/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * * This message is sent from a Poll Service in response to a TAXII Poll Request. Note that, as with any
 *   content provided by a Producer, the Producer MAY edit or eliminate content for any reason prior to
 *   providing it to a Consumer. As such, two Consumers polling the same Poll Service using identical
 *   parameters might receive different TAXII Data Collection content.
 *   If the named TAXII Data Collection is a TAXII Data Feed, the message indicates the time bounds within
 *   which TAXII Data Feed content was considered in the fulfillment of this request. As noted, content may
 *   be hidden from some Consumers, so the Poll Response Begin Timestamp and End Timestamp fields
 *   reflect the range of timestamps the Producer considers, but not all content in the considered range is
 *   necessarily included in the Poll Response Message. Nominally, the timestamp bounds in the Poll
 *   Response will be identical to the bounds provided in the Poll Request, with a "No Upper Bound" value
 *   This message is sent from a Poll Service in response to a TAXII Poll Request. Note that, as with any
 *   content provided by a Producer, the Producer MAY edit or eliminate content for any reason prior to
 *   providing it to a Consumer. As such, two Consumers polling the same Poll Service using identical
 *   parameters might receive different TAXII Data Collection content.
 *   If the named TAXII Data Collection is a TAXII Data Feed, the message indicates the time bounds within
 *   which TAXII Data Feed content was considered in the fulfillment of this request. As noted, content may
 *   be hidden from some Consumers, so the Poll Response Begin Timestamp and End Timestamp fields
 *   reflect the range of timestamps the Producer considers, but not all content in the considered range is
 *   necessarily included in the Poll Response Message. Nominally, the timestamp bounds in the Poll
 *   Response will be identical to the bounds provided in the Poll Request, with a "No Upper Bound" value
 * 
 *   Note:  At MOST one of exclusive begin timestamp or inclusive begin timestamp may appear
 * *
 */
public class TaxiiPollResponse implements org.apache.thrift.TBase<TaxiiPollResponse, TaxiiPollResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TaxiiPollResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaxiiPollResponse");

  private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("exclusiveBeginTimestampLabel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("inclusiveBeginTimestampLabel", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INCLUSIVE_END_TIMESTAMP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("inclusiveEndTimestampLabel", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MORE_FIELD_DESC = new org.apache.thrift.protocol.TField("more", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField RESULT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resultId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RESULT_PART_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("resultPartNumber", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RECORD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("recordCount", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CONTENT_BLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("contentBlock", org.apache.thrift.protocol.TType.SET, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaxiiPollResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaxiiPollResponseTupleSchemeFactory());
  }

  public String collectionName; // required
  public String subscriptionId; // optional
  public String exclusiveBeginTimestampLabel; // optional
  public String inclusiveBeginTimestampLabel; // optional
  /**
   * This field contains a Timestamp Label indicating the end of
   * the time range this Poll Response covers. This field is
   * inclusive. This field MUST be present if the named Data
   * Collection is a Data Feed. This field MUST NOT be present
   * if the named Data Collection is a Data Set.
   * NOTE: Required if for a Feed; prohibited otherwise
   */
  public String inclusiveEndTimestampLabel; // optional
  /**
   * * This field contains a boolean value. If the field value is
   *   TRUE, this indicates there are additional parts remaining of
   *   a larger result set. If the field value is FALSE, this indicates
   *   that there are no parts of the result set with higher Result
   *   Part Numbers. If this field is absent, treat that as
   *   equivalent to a value of FALSE.
   * 
   * *
   */
  public boolean more; // optional
  /**
   *     * This field contains a Result ID that can be used in Poll
   *       Fulfillment Requests to identify other parts of this result
   *       set. This field MUST be present if the More field is set to
   *       TRUE.
   * *
   */
  public String resultId; // optional
  /**
   * * This field contains an integer indicating the part of the
   *   result set contained in this Poll Response Message. Each
   *   part of a multi-part response is assigned a sequential
   *   integer starting with 1. (As such, the response to the initial
   *   Poll Request would have a 1 for this field.) If this field is
   *   absent, treat the field as having a value of 1.
   * *
   */
  public int resultPartNumber; // optional
  /**
   * * Indicates the number of applicable records for the given
   *   Poll Request, which MUST be greater than or equal to the
   *   number of content records returned in this message's
   *   Content Block(s). This field SHOULD be present in all Poll
   *   Response messages.
   * 
   * *
   */
  public RecordCount recordCount; // optional
  /**
   * * This field contains additional information for the message
   *   recipient. There is no expectation that this field be
   *   interpretable by a machine; it is instead targeted to human
   *   readers.
   * 
   * *
   */
  public String message; // optional
  /**
   * * This field contains a piece of content and additional
   *   information related to the content. This field MAY appear
   *   0 or more times. See Section 0 for the definition of a
   *   Content Block.
   * *
   */
  public Set<ContentBlock> contentBlock; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLLECTION_NAME((short)1, "collectionName"),
    SUBSCRIPTION_ID((short)2, "subscriptionId"),
    EXCLUSIVE_BEGIN_TIMESTAMP_LABEL((short)3, "exclusiveBeginTimestampLabel"),
    INCLUSIVE_BEGIN_TIMESTAMP_LABEL((short)4, "inclusiveBeginTimestampLabel"),
    /**
     * This field contains a Timestamp Label indicating the end of
     * the time range this Poll Response covers. This field is
     * inclusive. This field MUST be present if the named Data
     * Collection is a Data Feed. This field MUST NOT be present
     * if the named Data Collection is a Data Set.
     * NOTE: Required if for a Feed; prohibited otherwise
     */
    INCLUSIVE_END_TIMESTAMP_LABEL((short)5, "inclusiveEndTimestampLabel"),
    /**
     * * This field contains a boolean value. If the field value is
     *   TRUE, this indicates there are additional parts remaining of
     *   a larger result set. If the field value is FALSE, this indicates
     *   that there are no parts of the result set with higher Result
     *   Part Numbers. If this field is absent, treat that as
     *   equivalent to a value of FALSE.
     * 
     * *
     */
    MORE((short)6, "more"),
    /**
     *     * This field contains a Result ID that can be used in Poll
     *       Fulfillment Requests to identify other parts of this result
     *       set. This field MUST be present if the More field is set to
     *       TRUE.
     * *
     */
    RESULT_ID((short)7, "resultId"),
    /**
     * * This field contains an integer indicating the part of the
     *   result set contained in this Poll Response Message. Each
     *   part of a multi-part response is assigned a sequential
     *   integer starting with 1. (As such, the response to the initial
     *   Poll Request would have a 1 for this field.) If this field is
     *   absent, treat the field as having a value of 1.
     * *
     */
    RESULT_PART_NUMBER((short)8, "resultPartNumber"),
    /**
     * * Indicates the number of applicable records for the given
     *   Poll Request, which MUST be greater than or equal to the
     *   number of content records returned in this message's
     *   Content Block(s). This field SHOULD be present in all Poll
     *   Response messages.
     * 
     * *
     */
    RECORD_COUNT((short)9, "recordCount"),
    /**
     * * This field contains additional information for the message
     *   recipient. There is no expectation that this field be
     *   interpretable by a machine; it is instead targeted to human
     *   readers.
     * 
     * *
     */
    MESSAGE((short)10, "message"),
    /**
     * * This field contains a piece of content and additional
     *   information related to the content. This field MAY appear
     *   0 or more times. See Section 0 for the definition of a
     *   Content Block.
     * *
     */
    CONTENT_BLOCK((short)11, "contentBlock");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION_NAME
          return COLLECTION_NAME;
        case 2: // SUBSCRIPTION_ID
          return SUBSCRIPTION_ID;
        case 3: // EXCLUSIVE_BEGIN_TIMESTAMP_LABEL
          return EXCLUSIVE_BEGIN_TIMESTAMP_LABEL;
        case 4: // INCLUSIVE_BEGIN_TIMESTAMP_LABEL
          return INCLUSIVE_BEGIN_TIMESTAMP_LABEL;
        case 5: // INCLUSIVE_END_TIMESTAMP_LABEL
          return INCLUSIVE_END_TIMESTAMP_LABEL;
        case 6: // MORE
          return MORE;
        case 7: // RESULT_ID
          return RESULT_ID;
        case 8: // RESULT_PART_NUMBER
          return RESULT_PART_NUMBER;
        case 9: // RECORD_COUNT
          return RECORD_COUNT;
        case 10: // MESSAGE
          return MESSAGE;
        case 11: // CONTENT_BLOCK
          return CONTENT_BLOCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MORE_ISSET_ID = 0;
  private static final int __RESULTPARTNUMBER_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUBSCRIPTION_ID,_Fields.EXCLUSIVE_BEGIN_TIMESTAMP_LABEL,_Fields.INCLUSIVE_BEGIN_TIMESTAMP_LABEL,_Fields.INCLUSIVE_END_TIMESTAMP_LABEL,_Fields.MORE,_Fields.RESULT_ID,_Fields.RESULT_PART_NUMBER,_Fields.RECORD_COUNT,_Fields.MESSAGE,_Fields.CONTENT_BLOCK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("subscriptionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCLUSIVE_BEGIN_TIMESTAMP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("exclusiveBeginTimestampLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TimestampLabel")));
    tmpMap.put(_Fields.INCLUSIVE_BEGIN_TIMESTAMP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("inclusiveBeginTimestampLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TimestampLabel")));
    tmpMap.put(_Fields.INCLUSIVE_END_TIMESTAMP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("inclusiveEndTimestampLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TimestampLabel")));
    tmpMap.put(_Fields.MORE, new org.apache.thrift.meta_data.FieldMetaData("more", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESULT_ID, new org.apache.thrift.meta_data.FieldMetaData("resultId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_PART_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("resultPartNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("recordCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordCount.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_BLOCK, new org.apache.thrift.meta_data.FieldMetaData("contentBlock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContentBlock.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaxiiPollResponse.class, metaDataMap);
  }

  public TaxiiPollResponse() {
    this.resultPartNumber = 1;

  }

  public TaxiiPollResponse(
    String collectionName)
  {
    this();
    this.collectionName = collectionName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaxiiPollResponse(TaxiiPollResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCollectionName()) {
      this.collectionName = other.collectionName;
    }
    if (other.isSetSubscriptionId()) {
      this.subscriptionId = other.subscriptionId;
    }
    if (other.isSetExclusiveBeginTimestampLabel()) {
      this.exclusiveBeginTimestampLabel = other.exclusiveBeginTimestampLabel;
    }
    if (other.isSetInclusiveBeginTimestampLabel()) {
      this.inclusiveBeginTimestampLabel = other.inclusiveBeginTimestampLabel;
    }
    if (other.isSetInclusiveEndTimestampLabel()) {
      this.inclusiveEndTimestampLabel = other.inclusiveEndTimestampLabel;
    }
    this.more = other.more;
    if (other.isSetResultId()) {
      this.resultId = other.resultId;
    }
    this.resultPartNumber = other.resultPartNumber;
    if (other.isSetRecordCount()) {
      this.recordCount = new RecordCount(other.recordCount);
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetContentBlock()) {
      Set<ContentBlock> __this__contentBlock = new HashSet<ContentBlock>(other.contentBlock.size());
      for (ContentBlock other_element : other.contentBlock) {
        __this__contentBlock.add(new ContentBlock(other_element));
      }
      this.contentBlock = __this__contentBlock;
    }
  }

  public TaxiiPollResponse deepCopy() {
    return new TaxiiPollResponse(this);
  }

  @Override
  public void clear() {
    this.collectionName = null;
    this.subscriptionId = null;
    this.exclusiveBeginTimestampLabel = null;
    this.inclusiveBeginTimestampLabel = null;
    this.inclusiveEndTimestampLabel = null;
    setMoreIsSet(false);
    this.more = false;
    this.resultId = null;
    this.resultPartNumber = 1;

    this.recordCount = null;
    this.message = null;
    this.contentBlock = null;
  }

  public String getCollectionName() {
    return this.collectionName;
  }

  public TaxiiPollResponse setCollectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  public void unsetCollectionName() {
    this.collectionName = null;
  }

  /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionName() {
    return this.collectionName != null;
  }

  public void setCollectionNameIsSet(boolean value) {
    if (!value) {
      this.collectionName = null;
    }
  }

  public String getSubscriptionId() {
    return this.subscriptionId;
  }

  public TaxiiPollResponse setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  public void unsetSubscriptionId() {
    this.subscriptionId = null;
  }

  /** Returns true if field subscriptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionId() {
    return this.subscriptionId != null;
  }

  public void setSubscriptionIdIsSet(boolean value) {
    if (!value) {
      this.subscriptionId = null;
    }
  }

  public String getExclusiveBeginTimestampLabel() {
    return this.exclusiveBeginTimestampLabel;
  }

  public TaxiiPollResponse setExclusiveBeginTimestampLabel(String exclusiveBeginTimestampLabel) {
    this.exclusiveBeginTimestampLabel = exclusiveBeginTimestampLabel;
    return this;
  }

  public void unsetExclusiveBeginTimestampLabel() {
    this.exclusiveBeginTimestampLabel = null;
  }

  /** Returns true if field exclusiveBeginTimestampLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetExclusiveBeginTimestampLabel() {
    return this.exclusiveBeginTimestampLabel != null;
  }

  public void setExclusiveBeginTimestampLabelIsSet(boolean value) {
    if (!value) {
      this.exclusiveBeginTimestampLabel = null;
    }
  }

  public String getInclusiveBeginTimestampLabel() {
    return this.inclusiveBeginTimestampLabel;
  }

  public TaxiiPollResponse setInclusiveBeginTimestampLabel(String inclusiveBeginTimestampLabel) {
    this.inclusiveBeginTimestampLabel = inclusiveBeginTimestampLabel;
    return this;
  }

  public void unsetInclusiveBeginTimestampLabel() {
    this.inclusiveBeginTimestampLabel = null;
  }

  /** Returns true if field inclusiveBeginTimestampLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetInclusiveBeginTimestampLabel() {
    return this.inclusiveBeginTimestampLabel != null;
  }

  public void setInclusiveBeginTimestampLabelIsSet(boolean value) {
    if (!value) {
      this.inclusiveBeginTimestampLabel = null;
    }
  }

  /**
   * This field contains a Timestamp Label indicating the end of
   * the time range this Poll Response covers. This field is
   * inclusive. This field MUST be present if the named Data
   * Collection is a Data Feed. This field MUST NOT be present
   * if the named Data Collection is a Data Set.
   * NOTE: Required if for a Feed; prohibited otherwise
   */
  public String getInclusiveEndTimestampLabel() {
    return this.inclusiveEndTimestampLabel;
  }

  /**
   * This field contains a Timestamp Label indicating the end of
   * the time range this Poll Response covers. This field is
   * inclusive. This field MUST be present if the named Data
   * Collection is a Data Feed. This field MUST NOT be present
   * if the named Data Collection is a Data Set.
   * NOTE: Required if for a Feed; prohibited otherwise
   */
  public TaxiiPollResponse setInclusiveEndTimestampLabel(String inclusiveEndTimestampLabel) {
    this.inclusiveEndTimestampLabel = inclusiveEndTimestampLabel;
    return this;
  }

  public void unsetInclusiveEndTimestampLabel() {
    this.inclusiveEndTimestampLabel = null;
  }

  /** Returns true if field inclusiveEndTimestampLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetInclusiveEndTimestampLabel() {
    return this.inclusiveEndTimestampLabel != null;
  }

  public void setInclusiveEndTimestampLabelIsSet(boolean value) {
    if (!value) {
      this.inclusiveEndTimestampLabel = null;
    }
  }

  /**
   * * This field contains a boolean value. If the field value is
   *   TRUE, this indicates there are additional parts remaining of
   *   a larger result set. If the field value is FALSE, this indicates
   *   that there are no parts of the result set with higher Result
   *   Part Numbers. If this field is absent, treat that as
   *   equivalent to a value of FALSE.
   * 
   * *
   */
  public boolean isMore() {
    return this.more;
  }

  /**
   * * This field contains a boolean value. If the field value is
   *   TRUE, this indicates there are additional parts remaining of
   *   a larger result set. If the field value is FALSE, this indicates
   *   that there are no parts of the result set with higher Result
   *   Part Numbers. If this field is absent, treat that as
   *   equivalent to a value of FALSE.
   * 
   * *
   */
  public TaxiiPollResponse setMore(boolean more) {
    this.more = more;
    setMoreIsSet(true);
    return this;
  }

  public void unsetMore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORE_ISSET_ID);
  }

  /** Returns true if field more is set (has been assigned a value) and false otherwise */
  public boolean isSetMore() {
    return EncodingUtils.testBit(__isset_bitfield, __MORE_ISSET_ID);
  }

  public void setMoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORE_ISSET_ID, value);
  }

  /**
   *     * This field contains a Result ID that can be used in Poll
   *       Fulfillment Requests to identify other parts of this result
   *       set. This field MUST be present if the More field is set to
   *       TRUE.
   * *
   */
  public String getResultId() {
    return this.resultId;
  }

  /**
   *     * This field contains a Result ID that can be used in Poll
   *       Fulfillment Requests to identify other parts of this result
   *       set. This field MUST be present if the More field is set to
   *       TRUE.
   * *
   */
  public TaxiiPollResponse setResultId(String resultId) {
    this.resultId = resultId;
    return this;
  }

  public void unsetResultId() {
    this.resultId = null;
  }

  /** Returns true if field resultId is set (has been assigned a value) and false otherwise */
  public boolean isSetResultId() {
    return this.resultId != null;
  }

  public void setResultIdIsSet(boolean value) {
    if (!value) {
      this.resultId = null;
    }
  }

  /**
   * * This field contains an integer indicating the part of the
   *   result set contained in this Poll Response Message. Each
   *   part of a multi-part response is assigned a sequential
   *   integer starting with 1. (As such, the response to the initial
   *   Poll Request would have a 1 for this field.) If this field is
   *   absent, treat the field as having a value of 1.
   * *
   */
  public int getResultPartNumber() {
    return this.resultPartNumber;
  }

  /**
   * * This field contains an integer indicating the part of the
   *   result set contained in this Poll Response Message. Each
   *   part of a multi-part response is assigned a sequential
   *   integer starting with 1. (As such, the response to the initial
   *   Poll Request would have a 1 for this field.) If this field is
   *   absent, treat the field as having a value of 1.
   * *
   */
  public TaxiiPollResponse setResultPartNumber(int resultPartNumber) {
    this.resultPartNumber = resultPartNumber;
    setResultPartNumberIsSet(true);
    return this;
  }

  public void unsetResultPartNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTPARTNUMBER_ISSET_ID);
  }

  /** Returns true if field resultPartNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetResultPartNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULTPARTNUMBER_ISSET_ID);
  }

  public void setResultPartNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTPARTNUMBER_ISSET_ID, value);
  }

  /**
   * * Indicates the number of applicable records for the given
   *   Poll Request, which MUST be greater than or equal to the
   *   number of content records returned in this message's
   *   Content Block(s). This field SHOULD be present in all Poll
   *   Response messages.
   * 
   * *
   */
  public RecordCount getRecordCount() {
    return this.recordCount;
  }

  /**
   * * Indicates the number of applicable records for the given
   *   Poll Request, which MUST be greater than or equal to the
   *   number of content records returned in this message's
   *   Content Block(s). This field SHOULD be present in all Poll
   *   Response messages.
   * 
   * *
   */
  public TaxiiPollResponse setRecordCount(RecordCount recordCount) {
    this.recordCount = recordCount;
    return this;
  }

  public void unsetRecordCount() {
    this.recordCount = null;
  }

  /** Returns true if field recordCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordCount() {
    return this.recordCount != null;
  }

  public void setRecordCountIsSet(boolean value) {
    if (!value) {
      this.recordCount = null;
    }
  }

  /**
   * * This field contains additional information for the message
   *   recipient. There is no expectation that this field be
   *   interpretable by a machine; it is instead targeted to human
   *   readers.
   * 
   * *
   */
  public String getMessage() {
    return this.message;
  }

  /**
   * * This field contains additional information for the message
   *   recipient. There is no expectation that this field be
   *   interpretable by a machine; it is instead targeted to human
   *   readers.
   * 
   * *
   */
  public TaxiiPollResponse setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getContentBlockSize() {
    return (this.contentBlock == null) ? 0 : this.contentBlock.size();
  }

  public java.util.Iterator<ContentBlock> getContentBlockIterator() {
    return (this.contentBlock == null) ? null : this.contentBlock.iterator();
  }

  public void addToContentBlock(ContentBlock elem) {
    if (this.contentBlock == null) {
      this.contentBlock = new HashSet<ContentBlock>();
    }
    this.contentBlock.add(elem);
  }

  /**
   * * This field contains a piece of content and additional
   *   information related to the content. This field MAY appear
   *   0 or more times. See Section 0 for the definition of a
   *   Content Block.
   * *
   */
  public Set<ContentBlock> getContentBlock() {
    return this.contentBlock;
  }

  /**
   * * This field contains a piece of content and additional
   *   information related to the content. This field MAY appear
   *   0 or more times. See Section 0 for the definition of a
   *   Content Block.
   * *
   */
  public TaxiiPollResponse setContentBlock(Set<ContentBlock> contentBlock) {
    this.contentBlock = contentBlock;
    return this;
  }

  public void unsetContentBlock() {
    this.contentBlock = null;
  }

  /** Returns true if field contentBlock is set (has been assigned a value) and false otherwise */
  public boolean isSetContentBlock() {
    return this.contentBlock != null;
  }

  public void setContentBlockIsSet(boolean value) {
    if (!value) {
      this.contentBlock = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTION_NAME:
      if (value == null) {
        unsetCollectionName();
      } else {
        setCollectionName((String)value);
      }
      break;

    case SUBSCRIPTION_ID:
      if (value == null) {
        unsetSubscriptionId();
      } else {
        setSubscriptionId((String)value);
      }
      break;

    case EXCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      if (value == null) {
        unsetExclusiveBeginTimestampLabel();
      } else {
        setExclusiveBeginTimestampLabel((String)value);
      }
      break;

    case INCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      if (value == null) {
        unsetInclusiveBeginTimestampLabel();
      } else {
        setInclusiveBeginTimestampLabel((String)value);
      }
      break;

    case INCLUSIVE_END_TIMESTAMP_LABEL:
      if (value == null) {
        unsetInclusiveEndTimestampLabel();
      } else {
        setInclusiveEndTimestampLabel((String)value);
      }
      break;

    case MORE:
      if (value == null) {
        unsetMore();
      } else {
        setMore((Boolean)value);
      }
      break;

    case RESULT_ID:
      if (value == null) {
        unsetResultId();
      } else {
        setResultId((String)value);
      }
      break;

    case RESULT_PART_NUMBER:
      if (value == null) {
        unsetResultPartNumber();
      } else {
        setResultPartNumber((Integer)value);
      }
      break;

    case RECORD_COUNT:
      if (value == null) {
        unsetRecordCount();
      } else {
        setRecordCount((RecordCount)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case CONTENT_BLOCK:
      if (value == null) {
        unsetContentBlock();
      } else {
        setContentBlock((Set<ContentBlock>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION_NAME:
      return getCollectionName();

    case SUBSCRIPTION_ID:
      return getSubscriptionId();

    case EXCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return getExclusiveBeginTimestampLabel();

    case INCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return getInclusiveBeginTimestampLabel();

    case INCLUSIVE_END_TIMESTAMP_LABEL:
      return getInclusiveEndTimestampLabel();

    case MORE:
      return Boolean.valueOf(isMore());

    case RESULT_ID:
      return getResultId();

    case RESULT_PART_NUMBER:
      return Integer.valueOf(getResultPartNumber());

    case RECORD_COUNT:
      return getRecordCount();

    case MESSAGE:
      return getMessage();

    case CONTENT_BLOCK:
      return getContentBlock();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION_NAME:
      return isSetCollectionName();
    case SUBSCRIPTION_ID:
      return isSetSubscriptionId();
    case EXCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return isSetExclusiveBeginTimestampLabel();
    case INCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return isSetInclusiveBeginTimestampLabel();
    case INCLUSIVE_END_TIMESTAMP_LABEL:
      return isSetInclusiveEndTimestampLabel();
    case MORE:
      return isSetMore();
    case RESULT_ID:
      return isSetResultId();
    case RESULT_PART_NUMBER:
      return isSetResultPartNumber();
    case RECORD_COUNT:
      return isSetRecordCount();
    case MESSAGE:
      return isSetMessage();
    case CONTENT_BLOCK:
      return isSetContentBlock();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaxiiPollResponse)
      return this.equals((TaxiiPollResponse)that);
    return false;
  }

  public boolean equals(TaxiiPollResponse that) {
    if (that == null)
      return false;

    boolean this_present_collectionName = true && this.isSetCollectionName();
    boolean that_present_collectionName = true && that.isSetCollectionName();
    if (this_present_collectionName || that_present_collectionName) {
      if (!(this_present_collectionName && that_present_collectionName))
        return false;
      if (!this.collectionName.equals(that.collectionName))
        return false;
    }

    boolean this_present_subscriptionId = true && this.isSetSubscriptionId();
    boolean that_present_subscriptionId = true && that.isSetSubscriptionId();
    if (this_present_subscriptionId || that_present_subscriptionId) {
      if (!(this_present_subscriptionId && that_present_subscriptionId))
        return false;
      if (!this.subscriptionId.equals(that.subscriptionId))
        return false;
    }

    boolean this_present_exclusiveBeginTimestampLabel = true && this.isSetExclusiveBeginTimestampLabel();
    boolean that_present_exclusiveBeginTimestampLabel = true && that.isSetExclusiveBeginTimestampLabel();
    if (this_present_exclusiveBeginTimestampLabel || that_present_exclusiveBeginTimestampLabel) {
      if (!(this_present_exclusiveBeginTimestampLabel && that_present_exclusiveBeginTimestampLabel))
        return false;
      if (!this.exclusiveBeginTimestampLabel.equals(that.exclusiveBeginTimestampLabel))
        return false;
    }

    boolean this_present_inclusiveBeginTimestampLabel = true && this.isSetInclusiveBeginTimestampLabel();
    boolean that_present_inclusiveBeginTimestampLabel = true && that.isSetInclusiveBeginTimestampLabel();
    if (this_present_inclusiveBeginTimestampLabel || that_present_inclusiveBeginTimestampLabel) {
      if (!(this_present_inclusiveBeginTimestampLabel && that_present_inclusiveBeginTimestampLabel))
        return false;
      if (!this.inclusiveBeginTimestampLabel.equals(that.inclusiveBeginTimestampLabel))
        return false;
    }

    boolean this_present_inclusiveEndTimestampLabel = true && this.isSetInclusiveEndTimestampLabel();
    boolean that_present_inclusiveEndTimestampLabel = true && that.isSetInclusiveEndTimestampLabel();
    if (this_present_inclusiveEndTimestampLabel || that_present_inclusiveEndTimestampLabel) {
      if (!(this_present_inclusiveEndTimestampLabel && that_present_inclusiveEndTimestampLabel))
        return false;
      if (!this.inclusiveEndTimestampLabel.equals(that.inclusiveEndTimestampLabel))
        return false;
    }

    boolean this_present_more = true && this.isSetMore();
    boolean that_present_more = true && that.isSetMore();
    if (this_present_more || that_present_more) {
      if (!(this_present_more && that_present_more))
        return false;
      if (this.more != that.more)
        return false;
    }

    boolean this_present_resultId = true && this.isSetResultId();
    boolean that_present_resultId = true && that.isSetResultId();
    if (this_present_resultId || that_present_resultId) {
      if (!(this_present_resultId && that_present_resultId))
        return false;
      if (!this.resultId.equals(that.resultId))
        return false;
    }

    boolean this_present_resultPartNumber = true && this.isSetResultPartNumber();
    boolean that_present_resultPartNumber = true && that.isSetResultPartNumber();
    if (this_present_resultPartNumber || that_present_resultPartNumber) {
      if (!(this_present_resultPartNumber && that_present_resultPartNumber))
        return false;
      if (this.resultPartNumber != that.resultPartNumber)
        return false;
    }

    boolean this_present_recordCount = true && this.isSetRecordCount();
    boolean that_present_recordCount = true && that.isSetRecordCount();
    if (this_present_recordCount || that_present_recordCount) {
      if (!(this_present_recordCount && that_present_recordCount))
        return false;
      if (!this.recordCount.equals(that.recordCount))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_contentBlock = true && this.isSetContentBlock();
    boolean that_present_contentBlock = true && that.isSetContentBlock();
    if (this_present_contentBlock || that_present_contentBlock) {
      if (!(this_present_contentBlock && that_present_contentBlock))
        return false;
      if (!this.contentBlock.equals(that.contentBlock))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TaxiiPollResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionId()).compareTo(other.isSetSubscriptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionId, other.subscriptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExclusiveBeginTimestampLabel()).compareTo(other.isSetExclusiveBeginTimestampLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExclusiveBeginTimestampLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exclusiveBeginTimestampLabel, other.exclusiveBeginTimestampLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInclusiveBeginTimestampLabel()).compareTo(other.isSetInclusiveBeginTimestampLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInclusiveBeginTimestampLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inclusiveBeginTimestampLabel, other.inclusiveBeginTimestampLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInclusiveEndTimestampLabel()).compareTo(other.isSetInclusiveEndTimestampLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInclusiveEndTimestampLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inclusiveEndTimestampLabel, other.inclusiveEndTimestampLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMore()).compareTo(other.isSetMore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.more, other.more);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultId()).compareTo(other.isSetResultId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultId, other.resultId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultPartNumber()).compareTo(other.isSetResultPartNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultPartNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultPartNumber, other.resultPartNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordCount()).compareTo(other.isSetRecordCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordCount, other.recordCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentBlock()).compareTo(other.isSetContentBlock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentBlock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentBlock, other.contentBlock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaxiiPollResponse(");
    boolean first = true;

    sb.append("collectionName:");
    if (this.collectionName == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionName);
    }
    first = false;
    if (isSetSubscriptionId()) {
      if (!first) sb.append(", ");
      sb.append("subscriptionId:");
      if (this.subscriptionId == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriptionId);
      }
      first = false;
    }
    if (isSetExclusiveBeginTimestampLabel()) {
      if (!first) sb.append(", ");
      sb.append("exclusiveBeginTimestampLabel:");
      if (this.exclusiveBeginTimestampLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.exclusiveBeginTimestampLabel);
      }
      first = false;
    }
    if (isSetInclusiveBeginTimestampLabel()) {
      if (!first) sb.append(", ");
      sb.append("inclusiveBeginTimestampLabel:");
      if (this.inclusiveBeginTimestampLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.inclusiveBeginTimestampLabel);
      }
      first = false;
    }
    if (isSetInclusiveEndTimestampLabel()) {
      if (!first) sb.append(", ");
      sb.append("inclusiveEndTimestampLabel:");
      if (this.inclusiveEndTimestampLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.inclusiveEndTimestampLabel);
      }
      first = false;
    }
    if (isSetMore()) {
      if (!first) sb.append(", ");
      sb.append("more:");
      sb.append(this.more);
      first = false;
    }
    if (isSetResultId()) {
      if (!first) sb.append(", ");
      sb.append("resultId:");
      if (this.resultId == null) {
        sb.append("null");
      } else {
        sb.append(this.resultId);
      }
      first = false;
    }
    if (isSetResultPartNumber()) {
      if (!first) sb.append(", ");
      sb.append("resultPartNumber:");
      sb.append(this.resultPartNumber);
      first = false;
    }
    if (isSetRecordCount()) {
      if (!first) sb.append(", ");
      sb.append("recordCount:");
      if (this.recordCount == null) {
        sb.append("null");
      } else {
        sb.append(this.recordCount);
      }
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetContentBlock()) {
      if (!first) sb.append(", ");
      sb.append("contentBlock:");
      if (this.contentBlock == null) {
        sb.append("null");
      } else {
        sb.append(this.contentBlock);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (collectionName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'collectionName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (recordCount != null) {
      recordCount.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaxiiPollResponseStandardSchemeFactory implements SchemeFactory {
    public TaxiiPollResponseStandardScheme getScheme() {
      return new TaxiiPollResponseStandardScheme();
    }
  }

  private static class TaxiiPollResponseStandardScheme extends StandardScheme<TaxiiPollResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaxiiPollResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionName = iprot.readString();
              struct.setCollectionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBSCRIPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subscriptionId = iprot.readString();
              struct.setSubscriptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXCLUSIVE_BEGIN_TIMESTAMP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exclusiveBeginTimestampLabel = iprot.readString();
              struct.setExclusiveBeginTimestampLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCLUSIVE_BEGIN_TIMESTAMP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inclusiveBeginTimestampLabel = iprot.readString();
              struct.setInclusiveBeginTimestampLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INCLUSIVE_END_TIMESTAMP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inclusiveEndTimestampLabel = iprot.readString();
              struct.setInclusiveEndTimestampLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MORE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.more = iprot.readBool();
              struct.setMoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESULT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultId = iprot.readString();
              struct.setResultIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESULT_PART_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultPartNumber = iprot.readI32();
              struct.setResultPartNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECORD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recordCount = new RecordCount();
              struct.recordCount.read(iprot);
              struct.setRecordCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONTENT_BLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set208 = iprot.readSetBegin();
                struct.contentBlock = new HashSet<ContentBlock>(2*_set208.size);
                for (int _i209 = 0; _i209 < _set208.size; ++_i209)
                {
                  ContentBlock _elem210;
                  _elem210 = new ContentBlock();
                  _elem210.read(iprot);
                  struct.contentBlock.add(_elem210);
                }
                iprot.readSetEnd();
              }
              struct.setContentBlockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaxiiPollResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collectionName != null) {
        oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
        oprot.writeString(struct.collectionName);
        oprot.writeFieldEnd();
      }
      if (struct.subscriptionId != null) {
        if (struct.isSetSubscriptionId()) {
          oprot.writeFieldBegin(SUBSCRIPTION_ID_FIELD_DESC);
          oprot.writeString(struct.subscriptionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exclusiveBeginTimestampLabel != null) {
        if (struct.isSetExclusiveBeginTimestampLabel()) {
          oprot.writeFieldBegin(EXCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC);
          oprot.writeString(struct.exclusiveBeginTimestampLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inclusiveBeginTimestampLabel != null) {
        if (struct.isSetInclusiveBeginTimestampLabel()) {
          oprot.writeFieldBegin(INCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC);
          oprot.writeString(struct.inclusiveBeginTimestampLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inclusiveEndTimestampLabel != null) {
        if (struct.isSetInclusiveEndTimestampLabel()) {
          oprot.writeFieldBegin(INCLUSIVE_END_TIMESTAMP_LABEL_FIELD_DESC);
          oprot.writeString(struct.inclusiveEndTimestampLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMore()) {
        oprot.writeFieldBegin(MORE_FIELD_DESC);
        oprot.writeBool(struct.more);
        oprot.writeFieldEnd();
      }
      if (struct.resultId != null) {
        if (struct.isSetResultId()) {
          oprot.writeFieldBegin(RESULT_ID_FIELD_DESC);
          oprot.writeString(struct.resultId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResultPartNumber()) {
        oprot.writeFieldBegin(RESULT_PART_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.resultPartNumber);
        oprot.writeFieldEnd();
      }
      if (struct.recordCount != null) {
        if (struct.isSetRecordCount()) {
          oprot.writeFieldBegin(RECORD_COUNT_FIELD_DESC);
          struct.recordCount.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentBlock != null) {
        if (struct.isSetContentBlock()) {
          oprot.writeFieldBegin(CONTENT_BLOCK_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.contentBlock.size()));
            for (ContentBlock _iter211 : struct.contentBlock)
            {
              _iter211.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaxiiPollResponseTupleSchemeFactory implements SchemeFactory {
    public TaxiiPollResponseTupleScheme getScheme() {
      return new TaxiiPollResponseTupleScheme();
    }
  }

  private static class TaxiiPollResponseTupleScheme extends TupleScheme<TaxiiPollResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaxiiPollResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.collectionName);
      BitSet optionals = new BitSet();
      if (struct.isSetSubscriptionId()) {
        optionals.set(0);
      }
      if (struct.isSetExclusiveBeginTimestampLabel()) {
        optionals.set(1);
      }
      if (struct.isSetInclusiveBeginTimestampLabel()) {
        optionals.set(2);
      }
      if (struct.isSetInclusiveEndTimestampLabel()) {
        optionals.set(3);
      }
      if (struct.isSetMore()) {
        optionals.set(4);
      }
      if (struct.isSetResultId()) {
        optionals.set(5);
      }
      if (struct.isSetResultPartNumber()) {
        optionals.set(6);
      }
      if (struct.isSetRecordCount()) {
        optionals.set(7);
      }
      if (struct.isSetMessage()) {
        optionals.set(8);
      }
      if (struct.isSetContentBlock()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetSubscriptionId()) {
        oprot.writeString(struct.subscriptionId);
      }
      if (struct.isSetExclusiveBeginTimestampLabel()) {
        oprot.writeString(struct.exclusiveBeginTimestampLabel);
      }
      if (struct.isSetInclusiveBeginTimestampLabel()) {
        oprot.writeString(struct.inclusiveBeginTimestampLabel);
      }
      if (struct.isSetInclusiveEndTimestampLabel()) {
        oprot.writeString(struct.inclusiveEndTimestampLabel);
      }
      if (struct.isSetMore()) {
        oprot.writeBool(struct.more);
      }
      if (struct.isSetResultId()) {
        oprot.writeString(struct.resultId);
      }
      if (struct.isSetResultPartNumber()) {
        oprot.writeI32(struct.resultPartNumber);
      }
      if (struct.isSetRecordCount()) {
        struct.recordCount.write(oprot);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetContentBlock()) {
        {
          oprot.writeI32(struct.contentBlock.size());
          for (ContentBlock _iter212 : struct.contentBlock)
          {
            _iter212.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaxiiPollResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.collectionName = iprot.readString();
      struct.setCollectionNameIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.subscriptionId = iprot.readString();
        struct.setSubscriptionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exclusiveBeginTimestampLabel = iprot.readString();
        struct.setExclusiveBeginTimestampLabelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.inclusiveBeginTimestampLabel = iprot.readString();
        struct.setInclusiveBeginTimestampLabelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.inclusiveEndTimestampLabel = iprot.readString();
        struct.setInclusiveEndTimestampLabelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.more = iprot.readBool();
        struct.setMoreIsSet(true);
      }
      if (incoming.get(5)) {
        struct.resultId = iprot.readString();
        struct.setResultIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.resultPartNumber = iprot.readI32();
        struct.setResultPartNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.recordCount = new RecordCount();
        struct.recordCount.read(iprot);
        struct.setRecordCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set213 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contentBlock = new HashSet<ContentBlock>(2*_set213.size);
          for (int _i214 = 0; _i214 < _set213.size; ++_i214)
          {
            ContentBlock _elem215;
            _elem215 = new ContentBlock();
            _elem215.read(iprot);
            struct.contentBlock.add(_elem215);
          }
        }
        struct.setContentBlockIsSet(true);
      }
    }
  }

}

