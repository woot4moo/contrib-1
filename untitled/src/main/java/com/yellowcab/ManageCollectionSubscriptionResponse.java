/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * * This message is returned in response to a TAXII Manage Collection Request Message if the requested
 *   action was successfully completed.
 * *
 */
public class ManageCollectionSubscriptionResponse implements org.apache.thrift.TBase<ManageCollectionSubscriptionResponse, ManageCollectionSubscriptionResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ManageCollectionSubscriptionResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ManageCollectionSubscriptionResponse");

  private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_INSTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionInstances", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ManageCollectionSubscriptionResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ManageCollectionSubscriptionResponseTupleSchemeFactory());
  }

  /**
   * * This field identifies the name of the TAXII Data
   *   Collection to which the action applies.
   * *
   */
  public String collectionName; // required
  /**
   * * This field contains a message associated with the
   *   subscription response. This message is not required to
   *   be machine readable and is usually a message for a
   *   human operator.
   * 
   * *
   */
  public String message; // optional
  /**
   *     * This field contains information about existing
   *       subscriptions by the requester to the given TAXII Data
   *       Collection. It appears any number of times (including 0)
   *       if this message is in response to a STATUS action, or
   *       exactly once if responding to any other action.
   * 
   * *
   */
  public Set<SubscriptionInstance> subscriptionInstances; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field identifies the name of the TAXII Data
     *   Collection to which the action applies.
     * *
     */
    COLLECTION_NAME((short)1, "collectionName"),
    /**
     * * This field contains a message associated with the
     *   subscription response. This message is not required to
     *   be machine readable and is usually a message for a
     *   human operator.
     * 
     * *
     */
    MESSAGE((short)2, "message"),
    /**
     *     * This field contains information about existing
     *       subscriptions by the requester to the given TAXII Data
     *       Collection. It appears any number of times (including 0)
     *       if this message is in response to a STATUS action, or
     *       exactly once if responding to any other action.
     * 
     * *
     */
    SUBSCRIPTION_INSTANCES((short)3, "subscriptionInstances");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION_NAME
          return COLLECTION_NAME;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // SUBSCRIPTION_INSTANCES
          return SUBSCRIPTION_INSTANCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.MESSAGE,_Fields.SUBSCRIPTION_INSTANCES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIPTION_INSTANCES, new org.apache.thrift.meta_data.FieldMetaData("subscriptionInstances", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubscriptionInstance.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ManageCollectionSubscriptionResponse.class, metaDataMap);
  }

  public ManageCollectionSubscriptionResponse() {
  }

  public ManageCollectionSubscriptionResponse(
    String collectionName)
  {
    this();
    this.collectionName = collectionName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ManageCollectionSubscriptionResponse(ManageCollectionSubscriptionResponse other) {
    if (other.isSetCollectionName()) {
      this.collectionName = other.collectionName;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetSubscriptionInstances()) {
      Set<SubscriptionInstance> __this__subscriptionInstances = new HashSet<SubscriptionInstance>(other.subscriptionInstances.size());
      for (SubscriptionInstance other_element : other.subscriptionInstances) {
        __this__subscriptionInstances.add(new SubscriptionInstance(other_element));
      }
      this.subscriptionInstances = __this__subscriptionInstances;
    }
  }

  public ManageCollectionSubscriptionResponse deepCopy() {
    return new ManageCollectionSubscriptionResponse(this);
  }

  @Override
  public void clear() {
    this.collectionName = null;
    this.message = null;
    this.subscriptionInstances = null;
  }

  /**
   * * This field identifies the name of the TAXII Data
   *   Collection to which the action applies.
   * *
   */
  public String getCollectionName() {
    return this.collectionName;
  }

  /**
   * * This field identifies the name of the TAXII Data
   *   Collection to which the action applies.
   * *
   */
  public ManageCollectionSubscriptionResponse setCollectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  public void unsetCollectionName() {
    this.collectionName = null;
  }

  /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionName() {
    return this.collectionName != null;
  }

  public void setCollectionNameIsSet(boolean value) {
    if (!value) {
      this.collectionName = null;
    }
  }

  /**
   * * This field contains a message associated with the
   *   subscription response. This message is not required to
   *   be machine readable and is usually a message for a
   *   human operator.
   * 
   * *
   */
  public String getMessage() {
    return this.message;
  }

  /**
   * * This field contains a message associated with the
   *   subscription response. This message is not required to
   *   be machine readable and is usually a message for a
   *   human operator.
   * 
   * *
   */
  public ManageCollectionSubscriptionResponse setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getSubscriptionInstancesSize() {
    return (this.subscriptionInstances == null) ? 0 : this.subscriptionInstances.size();
  }

  public java.util.Iterator<SubscriptionInstance> getSubscriptionInstancesIterator() {
    return (this.subscriptionInstances == null) ? null : this.subscriptionInstances.iterator();
  }

  public void addToSubscriptionInstances(SubscriptionInstance elem) {
    if (this.subscriptionInstances == null) {
      this.subscriptionInstances = new HashSet<SubscriptionInstance>();
    }
    this.subscriptionInstances.add(elem);
  }

  /**
   *     * This field contains information about existing
   *       subscriptions by the requester to the given TAXII Data
   *       Collection. It appears any number of times (including 0)
   *       if this message is in response to a STATUS action, or
   *       exactly once if responding to any other action.
   * 
   * *
   */
  public Set<SubscriptionInstance> getSubscriptionInstances() {
    return this.subscriptionInstances;
  }

  /**
   *     * This field contains information about existing
   *       subscriptions by the requester to the given TAXII Data
   *       Collection. It appears any number of times (including 0)
   *       if this message is in response to a STATUS action, or
   *       exactly once if responding to any other action.
   * 
   * *
   */
  public ManageCollectionSubscriptionResponse setSubscriptionInstances(Set<SubscriptionInstance> subscriptionInstances) {
    this.subscriptionInstances = subscriptionInstances;
    return this;
  }

  public void unsetSubscriptionInstances() {
    this.subscriptionInstances = null;
  }

  /** Returns true if field subscriptionInstances is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionInstances() {
    return this.subscriptionInstances != null;
  }

  public void setSubscriptionInstancesIsSet(boolean value) {
    if (!value) {
      this.subscriptionInstances = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTION_NAME:
      if (value == null) {
        unsetCollectionName();
      } else {
        setCollectionName((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case SUBSCRIPTION_INSTANCES:
      if (value == null) {
        unsetSubscriptionInstances();
      } else {
        setSubscriptionInstances((Set<SubscriptionInstance>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION_NAME:
      return getCollectionName();

    case MESSAGE:
      return getMessage();

    case SUBSCRIPTION_INSTANCES:
      return getSubscriptionInstances();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION_NAME:
      return isSetCollectionName();
    case MESSAGE:
      return isSetMessage();
    case SUBSCRIPTION_INSTANCES:
      return isSetSubscriptionInstances();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ManageCollectionSubscriptionResponse)
      return this.equals((ManageCollectionSubscriptionResponse)that);
    return false;
  }

  public boolean equals(ManageCollectionSubscriptionResponse that) {
    if (that == null)
      return false;

    boolean this_present_collectionName = true && this.isSetCollectionName();
    boolean that_present_collectionName = true && that.isSetCollectionName();
    if (this_present_collectionName || that_present_collectionName) {
      if (!(this_present_collectionName && that_present_collectionName))
        return false;
      if (!this.collectionName.equals(that.collectionName))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_subscriptionInstances = true && this.isSetSubscriptionInstances();
    boolean that_present_subscriptionInstances = true && that.isSetSubscriptionInstances();
    if (this_present_subscriptionInstances || that_present_subscriptionInstances) {
      if (!(this_present_subscriptionInstances && that_present_subscriptionInstances))
        return false;
      if (!this.subscriptionInstances.equals(that.subscriptionInstances))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ManageCollectionSubscriptionResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionInstances()).compareTo(other.isSetSubscriptionInstances());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionInstances()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionInstances, other.subscriptionInstances);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ManageCollectionSubscriptionResponse(");
    boolean first = true;

    sb.append("collectionName:");
    if (this.collectionName == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionName);
    }
    first = false;
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetSubscriptionInstances()) {
      if (!first) sb.append(", ");
      sb.append("subscriptionInstances:");
      if (this.subscriptionInstances == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriptionInstances);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (collectionName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'collectionName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ManageCollectionSubscriptionResponseStandardSchemeFactory implements SchemeFactory {
    public ManageCollectionSubscriptionResponseStandardScheme getScheme() {
      return new ManageCollectionSubscriptionResponseStandardScheme();
    }
  }

  private static class ManageCollectionSubscriptionResponseStandardScheme extends StandardScheme<ManageCollectionSubscriptionResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ManageCollectionSubscriptionResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionName = iprot.readString();
              struct.setCollectionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUBSCRIPTION_INSTANCES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set192 = iprot.readSetBegin();
                struct.subscriptionInstances = new HashSet<SubscriptionInstance>(2*_set192.size);
                for (int _i193 = 0; _i193 < _set192.size; ++_i193)
                {
                  SubscriptionInstance _elem194;
                  _elem194 = new SubscriptionInstance();
                  _elem194.read(iprot);
                  struct.subscriptionInstances.add(_elem194);
                }
                iprot.readSetEnd();
              }
              struct.setSubscriptionInstancesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ManageCollectionSubscriptionResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collectionName != null) {
        oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
        oprot.writeString(struct.collectionName);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscriptionInstances != null) {
        if (struct.isSetSubscriptionInstances()) {
          oprot.writeFieldBegin(SUBSCRIPTION_INSTANCES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.subscriptionInstances.size()));
            for (SubscriptionInstance _iter195 : struct.subscriptionInstances)
            {
              _iter195.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ManageCollectionSubscriptionResponseTupleSchemeFactory implements SchemeFactory {
    public ManageCollectionSubscriptionResponseTupleScheme getScheme() {
      return new ManageCollectionSubscriptionResponseTupleScheme();
    }
  }

  private static class ManageCollectionSubscriptionResponseTupleScheme extends TupleScheme<ManageCollectionSubscriptionResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ManageCollectionSubscriptionResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.collectionName);
      BitSet optionals = new BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetSubscriptionInstances()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetSubscriptionInstances()) {
        {
          oprot.writeI32(struct.subscriptionInstances.size());
          for (SubscriptionInstance _iter196 : struct.subscriptionInstances)
          {
            _iter196.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ManageCollectionSubscriptionResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.collectionName = iprot.readString();
      struct.setCollectionNameIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set197 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subscriptionInstances = new HashSet<SubscriptionInstance>(2*_set197.size);
          for (int _i198 = 0; _i198 < _set197.size; ++_i198)
          {
            SubscriptionInstance _elem199;
            _elem199 = new SubscriptionInstance();
            _elem199.read(iprot);
            struct.subscriptionInstances.add(_elem199);
          }
        }
        struct.setSubscriptionInstancesIsSet(true);
      }
    }
  }

}

