/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Used to indicate the content of a Poll Response
 * 
 */
public class PollParameter implements org.apache.thrift.TBase<PollParameter, PollParameter._Fields>, java.io.Serializable, Cloneable, Comparable<PollParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PollParameter");

  private static final org.apache.thrift.protocol.TField RESPONSE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_BINDING_FIELD_DESC = new org.apache.thrift.protocol.TField("contentBinding", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ALLOW_ASYNCH_FIELD_DESC = new org.apache.thrift.protocol.TField("allowAsynch", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField DELIEVERY_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("delieveryParameter", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PollParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PollParameterTupleSchemeFactory());
  }

  /**
   * This field identifies the response type that is being
   * requested. The Response Type MUST be one of the
   * following:
   *  FULL – Messages sent in fulfillment of this request are
   * requested to contain full content.
   *  COUNT ONLY – The requester is requesting that
   * messages sent in fulfillment of this subscription only
   * contain count information (i.e., content is not
   * included).
   * Absence of this field indicates a request for FULL
   * responses
   * 
   * @see PollParameterResponseType
   */
  public PollParameterResponseType responseType; // optional
  /**
   * This field contains Content Binding IDs indicating which
   * types of contents the Consumer requests to receive.
   * Multiple Content Binding IDs may be specified. This field
   * MUST contain Content Binding IDs as defined in the TAXII
   * Content Binding Reference or by a third party. If none of
   * the listed Content Binding values are supported by the
   * Data Collection, a Status Message with a status of
   * 'Unsupported Content Binding' SHOULD be returned.
   * Absence of this field indicates that all content bindings are
   * accepted.
   */
  public Set<ContentBinding> contentBinding; // optional
  /**
   * * This field contains a query expression. Only content that
   *   matches the query expression should be sent in response
   *   to this message. The query expression may be structured;
   *   the specific structure used for the query expression is
   *   identified in the Query Format field.
   * 
   * *
   */
  public Query query; // optional
  /**
   * This field indicates whether the Consumer is willing to
   * support Asynchronous Polling. If this value is FALSE, the
   * response MUST NOT respond with a Status Message with
   * Status Type of "Pending". Absence of this field should be
   * treated as indicating a value of FALSE. For more
   * information on Asynchronous Polling, see Section 3.6.2.
   */
  public boolean allowAsynch; // optional
  /**
   * This field identifies how to push Asynchronous Poll Results
   * to an Inbox Service specified by the poll requestor if the
   * requestor wishes this to happen. This field MUST NOT be
   * present if Allow Pending is absent or has a value of FALSE.
   * If this field is absent but Allow Pending has a value of
   * TRUE, this indicates that the Consumer will pull any
   * Asynchronous Poll results rather than having them
   * pushed. The Poll Service ignores this field if it is able to
   * include results in a Poll Response Message. (Unsupported
   * sub-field values should not lead to error Status Messages if
   * the Delivery Parameters are ignored.) The Poll Service also
   * ignores this field if it is not willing to push Asynchronous
   * Poll Results to a Consumer
   */
  public DeliveryParameter delieveryParameter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * This field identifies the response type that is being
     * requested. The Response Type MUST be one of the
     * following:
     *  FULL – Messages sent in fulfillment of this request are
     * requested to contain full content.
     *  COUNT ONLY – The requester is requesting that
     * messages sent in fulfillment of this subscription only
     * contain count information (i.e., content is not
     * included).
     * Absence of this field indicates a request for FULL
     * responses
     * 
     * @see PollParameterResponseType
     */
    RESPONSE_TYPE((short)1, "responseType"),
    /**
     * This field contains Content Binding IDs indicating which
     * types of contents the Consumer requests to receive.
     * Multiple Content Binding IDs may be specified. This field
     * MUST contain Content Binding IDs as defined in the TAXII
     * Content Binding Reference or by a third party. If none of
     * the listed Content Binding values are supported by the
     * Data Collection, a Status Message with a status of
     * 'Unsupported Content Binding' SHOULD be returned.
     * Absence of this field indicates that all content bindings are
     * accepted.
     */
    CONTENT_BINDING((short)2, "contentBinding"),
    /**
     * * This field contains a query expression. Only content that
     *   matches the query expression should be sent in response
     *   to this message. The query expression may be structured;
     *   the specific structure used for the query expression is
     *   identified in the Query Format field.
     * 
     * *
     */
    QUERY((short)3, "query"),
    /**
     * This field indicates whether the Consumer is willing to
     * support Asynchronous Polling. If this value is FALSE, the
     * response MUST NOT respond with a Status Message with
     * Status Type of "Pending". Absence of this field should be
     * treated as indicating a value of FALSE. For more
     * information on Asynchronous Polling, see Section 3.6.2.
     */
    ALLOW_ASYNCH((short)4, "allowAsynch"),
    /**
     * This field identifies how to push Asynchronous Poll Results
     * to an Inbox Service specified by the poll requestor if the
     * requestor wishes this to happen. This field MUST NOT be
     * present if Allow Pending is absent or has a value of FALSE.
     * If this field is absent but Allow Pending has a value of
     * TRUE, this indicates that the Consumer will pull any
     * Asynchronous Poll results rather than having them
     * pushed. The Poll Service ignores this field if it is able to
     * include results in a Poll Response Message. (Unsupported
     * sub-field values should not lead to error Status Messages if
     * the Delivery Parameters are ignored.) The Poll Service also
     * ignores this field if it is not willing to push Asynchronous
     * Poll Results to a Consumer
     */
    DELIEVERY_PARAMETER((short)5, "delieveryParameter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESPONSE_TYPE
          return RESPONSE_TYPE;
        case 2: // CONTENT_BINDING
          return CONTENT_BINDING;
        case 3: // QUERY
          return QUERY;
        case 4: // ALLOW_ASYNCH
          return ALLOW_ASYNCH;
        case 5: // DELIEVERY_PARAMETER
          return DELIEVERY_PARAMETER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALLOWASYNCH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RESPONSE_TYPE,_Fields.CONTENT_BINDING,_Fields.QUERY,_Fields.ALLOW_ASYNCH,_Fields.DELIEVERY_PARAMETER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESPONSE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("responseType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PollParameterResponseType.class)));
    tmpMap.put(_Fields.CONTENT_BINDING, new org.apache.thrift.meta_data.FieldMetaData("contentBinding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContentBinding.class))));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Query.class)));
    tmpMap.put(_Fields.ALLOW_ASYNCH, new org.apache.thrift.meta_data.FieldMetaData("allowAsynch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELIEVERY_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("delieveryParameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeliveryParameter.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PollParameter.class, metaDataMap);
  }

  public PollParameter() {
    this.allowAsynch = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PollParameter(PollParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResponseType()) {
      this.responseType = other.responseType;
    }
    if (other.isSetContentBinding()) {
      Set<ContentBinding> __this__contentBinding = new HashSet<ContentBinding>(other.contentBinding.size());
      for (ContentBinding other_element : other.contentBinding) {
        __this__contentBinding.add(new ContentBinding(other_element));
      }
      this.contentBinding = __this__contentBinding;
    }
    if (other.isSetQuery()) {
      this.query = new Query(other.query);
    }
    this.allowAsynch = other.allowAsynch;
    if (other.isSetDelieveryParameter()) {
      this.delieveryParameter = new DeliveryParameter(other.delieveryParameter);
    }
  }

  public PollParameter deepCopy() {
    return new PollParameter(this);
  }

  @Override
  public void clear() {
    this.responseType = null;
    this.contentBinding = null;
    this.query = null;
    this.allowAsynch = false;

    this.delieveryParameter = null;
  }

  /**
   * This field identifies the response type that is being
   * requested. The Response Type MUST be one of the
   * following:
   *  FULL – Messages sent in fulfillment of this request are
   * requested to contain full content.
   *  COUNT ONLY – The requester is requesting that
   * messages sent in fulfillment of this subscription only
   * contain count information (i.e., content is not
   * included).
   * Absence of this field indicates a request for FULL
   * responses
   * 
   * @see PollParameterResponseType
   */
  public PollParameterResponseType getResponseType() {
    return this.responseType;
  }

  /**
   * This field identifies the response type that is being
   * requested. The Response Type MUST be one of the
   * following:
   *  FULL – Messages sent in fulfillment of this request are
   * requested to contain full content.
   *  COUNT ONLY – The requester is requesting that
   * messages sent in fulfillment of this subscription only
   * contain count information (i.e., content is not
   * included).
   * Absence of this field indicates a request for FULL
   * responses
   * 
   * @see PollParameterResponseType
   */
  public PollParameter setResponseType(PollParameterResponseType responseType) {
    this.responseType = responseType;
    return this;
  }

  public void unsetResponseType() {
    this.responseType = null;
  }

  /** Returns true if field responseType is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseType() {
    return this.responseType != null;
  }

  public void setResponseTypeIsSet(boolean value) {
    if (!value) {
      this.responseType = null;
    }
  }

  public int getContentBindingSize() {
    return (this.contentBinding == null) ? 0 : this.contentBinding.size();
  }

  public java.util.Iterator<ContentBinding> getContentBindingIterator() {
    return (this.contentBinding == null) ? null : this.contentBinding.iterator();
  }

  public void addToContentBinding(ContentBinding elem) {
    if (this.contentBinding == null) {
      this.contentBinding = new HashSet<ContentBinding>();
    }
    this.contentBinding.add(elem);
  }

  /**
   * This field contains Content Binding IDs indicating which
   * types of contents the Consumer requests to receive.
   * Multiple Content Binding IDs may be specified. This field
   * MUST contain Content Binding IDs as defined in the TAXII
   * Content Binding Reference or by a third party. If none of
   * the listed Content Binding values are supported by the
   * Data Collection, a Status Message with a status of
   * 'Unsupported Content Binding' SHOULD be returned.
   * Absence of this field indicates that all content bindings are
   * accepted.
   */
  public Set<ContentBinding> getContentBinding() {
    return this.contentBinding;
  }

  /**
   * This field contains Content Binding IDs indicating which
   * types of contents the Consumer requests to receive.
   * Multiple Content Binding IDs may be specified. This field
   * MUST contain Content Binding IDs as defined in the TAXII
   * Content Binding Reference or by a third party. If none of
   * the listed Content Binding values are supported by the
   * Data Collection, a Status Message with a status of
   * 'Unsupported Content Binding' SHOULD be returned.
   * Absence of this field indicates that all content bindings are
   * accepted.
   */
  public PollParameter setContentBinding(Set<ContentBinding> contentBinding) {
    this.contentBinding = contentBinding;
    return this;
  }

  public void unsetContentBinding() {
    this.contentBinding = null;
  }

  /** Returns true if field contentBinding is set (has been assigned a value) and false otherwise */
  public boolean isSetContentBinding() {
    return this.contentBinding != null;
  }

  public void setContentBindingIsSet(boolean value) {
    if (!value) {
      this.contentBinding = null;
    }
  }

  /**
   * * This field contains a query expression. Only content that
   *   matches the query expression should be sent in response
   *   to this message. The query expression may be structured;
   *   the specific structure used for the query expression is
   *   identified in the Query Format field.
   * 
   * *
   */
  public Query getQuery() {
    return this.query;
  }

  /**
   * * This field contains a query expression. Only content that
   *   matches the query expression should be sent in response
   *   to this message. The query expression may be structured;
   *   the specific structure used for the query expression is
   *   identified in the Query Format field.
   * 
   * *
   */
  public PollParameter setQuery(Query query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  /**
   * This field indicates whether the Consumer is willing to
   * support Asynchronous Polling. If this value is FALSE, the
   * response MUST NOT respond with a Status Message with
   * Status Type of "Pending". Absence of this field should be
   * treated as indicating a value of FALSE. For more
   * information on Asynchronous Polling, see Section 3.6.2.
   */
  public boolean isAllowAsynch() {
    return this.allowAsynch;
  }

  /**
   * This field indicates whether the Consumer is willing to
   * support Asynchronous Polling. If this value is FALSE, the
   * response MUST NOT respond with a Status Message with
   * Status Type of "Pending". Absence of this field should be
   * treated as indicating a value of FALSE. For more
   * information on Asynchronous Polling, see Section 3.6.2.
   */
  public PollParameter setAllowAsynch(boolean allowAsynch) {
    this.allowAsynch = allowAsynch;
    setAllowAsynchIsSet(true);
    return this;
  }

  public void unsetAllowAsynch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWASYNCH_ISSET_ID);
  }

  /** Returns true if field allowAsynch is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowAsynch() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWASYNCH_ISSET_ID);
  }

  public void setAllowAsynchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWASYNCH_ISSET_ID, value);
  }

  /**
   * This field identifies how to push Asynchronous Poll Results
   * to an Inbox Service specified by the poll requestor if the
   * requestor wishes this to happen. This field MUST NOT be
   * present if Allow Pending is absent or has a value of FALSE.
   * If this field is absent but Allow Pending has a value of
   * TRUE, this indicates that the Consumer will pull any
   * Asynchronous Poll results rather than having them
   * pushed. The Poll Service ignores this field if it is able to
   * include results in a Poll Response Message. (Unsupported
   * sub-field values should not lead to error Status Messages if
   * the Delivery Parameters are ignored.) The Poll Service also
   * ignores this field if it is not willing to push Asynchronous
   * Poll Results to a Consumer
   */
  public DeliveryParameter getDelieveryParameter() {
    return this.delieveryParameter;
  }

  /**
   * This field identifies how to push Asynchronous Poll Results
   * to an Inbox Service specified by the poll requestor if the
   * requestor wishes this to happen. This field MUST NOT be
   * present if Allow Pending is absent or has a value of FALSE.
   * If this field is absent but Allow Pending has a value of
   * TRUE, this indicates that the Consumer will pull any
   * Asynchronous Poll results rather than having them
   * pushed. The Poll Service ignores this field if it is able to
   * include results in a Poll Response Message. (Unsupported
   * sub-field values should not lead to error Status Messages if
   * the Delivery Parameters are ignored.) The Poll Service also
   * ignores this field if it is not willing to push Asynchronous
   * Poll Results to a Consumer
   */
  public PollParameter setDelieveryParameter(DeliveryParameter delieveryParameter) {
    this.delieveryParameter = delieveryParameter;
    return this;
  }

  public void unsetDelieveryParameter() {
    this.delieveryParameter = null;
  }

  /** Returns true if field delieveryParameter is set (has been assigned a value) and false otherwise */
  public boolean isSetDelieveryParameter() {
    return this.delieveryParameter != null;
  }

  public void setDelieveryParameterIsSet(boolean value) {
    if (!value) {
      this.delieveryParameter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESPONSE_TYPE:
      if (value == null) {
        unsetResponseType();
      } else {
        setResponseType((PollParameterResponseType)value);
      }
      break;

    case CONTENT_BINDING:
      if (value == null) {
        unsetContentBinding();
      } else {
        setContentBinding((Set<ContentBinding>)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((Query)value);
      }
      break;

    case ALLOW_ASYNCH:
      if (value == null) {
        unsetAllowAsynch();
      } else {
        setAllowAsynch((Boolean)value);
      }
      break;

    case DELIEVERY_PARAMETER:
      if (value == null) {
        unsetDelieveryParameter();
      } else {
        setDelieveryParameter((DeliveryParameter)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESPONSE_TYPE:
      return getResponseType();

    case CONTENT_BINDING:
      return getContentBinding();

    case QUERY:
      return getQuery();

    case ALLOW_ASYNCH:
      return Boolean.valueOf(isAllowAsynch());

    case DELIEVERY_PARAMETER:
      return getDelieveryParameter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESPONSE_TYPE:
      return isSetResponseType();
    case CONTENT_BINDING:
      return isSetContentBinding();
    case QUERY:
      return isSetQuery();
    case ALLOW_ASYNCH:
      return isSetAllowAsynch();
    case DELIEVERY_PARAMETER:
      return isSetDelieveryParameter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PollParameter)
      return this.equals((PollParameter)that);
    return false;
  }

  public boolean equals(PollParameter that) {
    if (that == null)
      return false;

    boolean this_present_responseType = true && this.isSetResponseType();
    boolean that_present_responseType = true && that.isSetResponseType();
    if (this_present_responseType || that_present_responseType) {
      if (!(this_present_responseType && that_present_responseType))
        return false;
      if (!this.responseType.equals(that.responseType))
        return false;
    }

    boolean this_present_contentBinding = true && this.isSetContentBinding();
    boolean that_present_contentBinding = true && that.isSetContentBinding();
    if (this_present_contentBinding || that_present_contentBinding) {
      if (!(this_present_contentBinding && that_present_contentBinding))
        return false;
      if (!this.contentBinding.equals(that.contentBinding))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_allowAsynch = true && this.isSetAllowAsynch();
    boolean that_present_allowAsynch = true && that.isSetAllowAsynch();
    if (this_present_allowAsynch || that_present_allowAsynch) {
      if (!(this_present_allowAsynch && that_present_allowAsynch))
        return false;
      if (this.allowAsynch != that.allowAsynch)
        return false;
    }

    boolean this_present_delieveryParameter = true && this.isSetDelieveryParameter();
    boolean that_present_delieveryParameter = true && that.isSetDelieveryParameter();
    if (this_present_delieveryParameter || that_present_delieveryParameter) {
      if (!(this_present_delieveryParameter && that_present_delieveryParameter))
        return false;
      if (!this.delieveryParameter.equals(that.delieveryParameter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PollParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResponseType()).compareTo(other.isSetResponseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseType, other.responseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentBinding()).compareTo(other.isSetContentBinding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentBinding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentBinding, other.contentBinding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowAsynch()).compareTo(other.isSetAllowAsynch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowAsynch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowAsynch, other.allowAsynch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelieveryParameter()).compareTo(other.isSetDelieveryParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelieveryParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delieveryParameter, other.delieveryParameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PollParameter(");
    boolean first = true;

    if (isSetResponseType()) {
      sb.append("responseType:");
      if (this.responseType == null) {
        sb.append("null");
      } else {
        sb.append(this.responseType);
      }
      first = false;
    }
    if (isSetContentBinding()) {
      if (!first) sb.append(", ");
      sb.append("contentBinding:");
      if (this.contentBinding == null) {
        sb.append("null");
      } else {
        sb.append(this.contentBinding);
      }
      first = false;
    }
    if (isSetQuery()) {
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetAllowAsynch()) {
      if (!first) sb.append(", ");
      sb.append("allowAsynch:");
      sb.append(this.allowAsynch);
      first = false;
    }
    if (isSetDelieveryParameter()) {
      if (!first) sb.append(", ");
      sb.append("delieveryParameter:");
      if (this.delieveryParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.delieveryParameter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (query != null) {
      query.validate();
    }
    if (delieveryParameter != null) {
      delieveryParameter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PollParameterStandardSchemeFactory implements SchemeFactory {
    public PollParameterStandardScheme getScheme() {
      return new PollParameterStandardScheme();
    }
  }

  private static class PollParameterStandardScheme extends StandardScheme<PollParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PollParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESPONSE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.responseType = PollParameterResponseType.findByValue(iprot.readI32());
              struct.setResponseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT_BINDING
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set200 = iprot.readSetBegin();
                struct.contentBinding = new HashSet<ContentBinding>(2*_set200.size);
                for (int _i201 = 0; _i201 < _set200.size; ++_i201)
                {
                  ContentBinding _elem202;
                  _elem202 = new ContentBinding();
                  _elem202.read(iprot);
                  struct.contentBinding.add(_elem202);
                }
                iprot.readSetEnd();
              }
              struct.setContentBindingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query = new Query();
              struct.query.read(iprot);
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALLOW_ASYNCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowAsynch = iprot.readBool();
              struct.setAllowAsynchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DELIEVERY_PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.delieveryParameter = new DeliveryParameter();
              struct.delieveryParameter.read(iprot);
              struct.setDelieveryParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PollParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.responseType != null) {
        if (struct.isSetResponseType()) {
          oprot.writeFieldBegin(RESPONSE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.responseType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentBinding != null) {
        if (struct.isSetContentBinding()) {
          oprot.writeFieldBegin(CONTENT_BINDING_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.contentBinding.size()));
            for (ContentBinding _iter203 : struct.contentBinding)
            {
              _iter203.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllowAsynch()) {
        oprot.writeFieldBegin(ALLOW_ASYNCH_FIELD_DESC);
        oprot.writeBool(struct.allowAsynch);
        oprot.writeFieldEnd();
      }
      if (struct.delieveryParameter != null) {
        if (struct.isSetDelieveryParameter()) {
          oprot.writeFieldBegin(DELIEVERY_PARAMETER_FIELD_DESC);
          struct.delieveryParameter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PollParameterTupleSchemeFactory implements SchemeFactory {
    public PollParameterTupleScheme getScheme() {
      return new PollParameterTupleScheme();
    }
  }

  private static class PollParameterTupleScheme extends TupleScheme<PollParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PollParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResponseType()) {
        optionals.set(0);
      }
      if (struct.isSetContentBinding()) {
        optionals.set(1);
      }
      if (struct.isSetQuery()) {
        optionals.set(2);
      }
      if (struct.isSetAllowAsynch()) {
        optionals.set(3);
      }
      if (struct.isSetDelieveryParameter()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetResponseType()) {
        oprot.writeI32(struct.responseType.getValue());
      }
      if (struct.isSetContentBinding()) {
        {
          oprot.writeI32(struct.contentBinding.size());
          for (ContentBinding _iter204 : struct.contentBinding)
          {
            _iter204.write(oprot);
          }
        }
      }
      if (struct.isSetQuery()) {
        struct.query.write(oprot);
      }
      if (struct.isSetAllowAsynch()) {
        oprot.writeBool(struct.allowAsynch);
      }
      if (struct.isSetDelieveryParameter()) {
        struct.delieveryParameter.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PollParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.responseType = PollParameterResponseType.findByValue(iprot.readI32());
        struct.setResponseTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set205 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contentBinding = new HashSet<ContentBinding>(2*_set205.size);
          for (int _i206 = 0; _i206 < _set205.size; ++_i206)
          {
            ContentBinding _elem207;
            _elem207 = new ContentBinding();
            _elem207.read(iprot);
            struct.contentBinding.add(_elem207);
          }
        }
        struct.setContentBindingIsSet(true);
      }
      if (incoming.get(2)) {
        struct.query = new Query();
        struct.query.read(iprot);
        struct.setQueryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.allowAsynch = iprot.readBool();
        struct.setAllowAsynchIsSet(true);
      }
      if (incoming.get(4)) {
        struct.delieveryParameter = new DeliveryParameter();
        struct.delieveryParameter.read(iprot);
        struct.setDelieveryParameterIsSet(true);
      }
    }
  }

}

