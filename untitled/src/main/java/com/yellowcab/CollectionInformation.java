/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * A TAXII Data Collection.
 * 
 */
public class CollectionInformation implements org.apache.thrift.TBase<CollectionInformation, CollectionInformation._Fields>, java.io.Serializable, Cloneable, Comparable<CollectionInformation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectionInformation");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SUPPORTED_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("supportedContent", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField IS_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isAvailable", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PUSH_METHODS_FIELD_DESC = new org.apache.thrift.protocol.TField("pushMethods", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField POLLING_SERVICE_INSTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("pollingServiceInstances", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_METHODS_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionMethods", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField RECEIVING_INBOX_SERVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("receivingInboxServices", org.apache.thrift.protocol.TType.SET, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectionInformationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectionInformationTupleSchemeFactory());
  }

  /**
   * * This field contains the name by which this TAXII Data
   *   Collection is identified.
   * *
   */
  public String name; // required
  /**
   * * This field indicates whether this Data Collection is a
   *   Data Feed (ordered Collection) or a Data Set
   *   (unordered Collection). Absence of this field denotes
   *   that this Collection is a Data Feed
   * *
   * 
   * @see CollectionType
   */
  public CollectionType type; // optional
  /**
   * * This field contains a prose description of this TAXII
   *   Data Collection. This field might also explain how to
   *   gain access to this TAXII Data Collection if out-of-band
   *   actions are required. (E.g., requires purchase of a
   *   contract, requires manual approval, etc.)
   *  *
   */
  public String description; // required
  /**
   * * This field indicates the typical number of records
   *   added to this Data Collection daily. This represents a
   *   "typical" value and the producer is under no
   *   obligation to keep the Data Collection volume at the
   *   given level.
   * *
   */
  public long volume; // optional
  /**
   * * This field contains Content Binding IDs indicating
   *   which types of content might be found in this TAXII
   *   Data Collection. Each Supported Content value MUST
   *   be a Content Binding ID as defined in the TAXII
   *   Content Binding Reference or by a third party.
   *   Absence of this field indicates that this Data
   *   Collection supports all types of content.
   * *
   */
  public Set<SupportedContent> supportedContent; // optional
  /**
   * * This field indicates whether the identity of the
   *   requester (authenticated or otherwise) is allowed to
   *   access this Collection. (Access could imply the ability
   *   to subscribe and/or the ability to send Poll Requests.)
   *   This field can indicate that the requester is known to
   *   have access, known not to have access, or that access
   *   is unknown. Absence of this field indicates that access
   *   is unknown.
   * 
   *   NOTE: For implementation purposes Unknown Access will be treated as equivalent to NO Access.
   *   There is no fundamental difference between these two choices, and regardless of the unknown/no access
   *   the client will not get a result.
   * *
   */
  public boolean isAvailable; // optional
  /**
   * * This field identifies the protocols that can be used to
   *   push content from this Data Collection via a
   *   subscription and/or for pushed results of
   *   Asynchronous Polling. This field MAY appear multiple
   *   times if content from this TAXII Data Collection can be
   *   pushed via multiple protocols. This field has multiple
   *   sub-fields. Absence of this field indicates that
   *   content from this Data Collection cannot be pushed
   *   to a Consumer using TAXII.
   * *
   */
  public Set<PushMethod> pushMethods; // optional
  /**
   * * This field identifies the bindings and address a
   *   Consumer can use to interact with a Poll Service
   *   instance that supports this TAXII Data Collection. This
   *   field MAY appear multiple times if multiple Poll
   *   Services support this TAXII Data Collection. This field
   *   has multiple sub-fields. Absence of this field indicates
   *   that this Data Collection cannot be polled using TAXII.
   * 
   * *
   */
  public Set<PollingInstance> pollingServiceInstances; // optional
  /**
   *     * This field identifies the protocol and address that can
   *       be used to contact the TAXII Daemon hosting the
   *       Collection Management Service that can process
   *       subscription requests for this TAXII Data Collection.
   *       Absence of this field indicates that there is not a TAXII
   *       Service that processes subscription requests for this
   *       Collection. In that case subscriptions, if supported,
   *       would need to be established by mechanisms other
   *       than TAXII. In the case of alternative subscription
   *       methods, the Collection Description field could
   *       provide procedures for subscribing.
   * *
   */
  public Set<SubscriptionMethod> subscriptionMethods; // optional
  /**
   *     * This field identifies the bindings and address of an
   *       Inbox Service to which content can be pushed to have
   *       it added to the given Data Collection. This field MAY
   *       appear multiple times if multiple Inbox Services may
   *       receive content for this TAXII Data Collection. If this
   *       field is absent, the Consumer cannot use TAXII
   *       Messages to request that content to be added
   *       specifically to this Data Collection. Note that content
   *       sent to this Inbox Service MAY still be rejected by the
   *       recipient for any reason instead of adding it to the
   *       indicated Data Collection.
   * 
   * *
   */
  public Set<ReceivingInboxService> receivingInboxServices; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field contains the name by which this TAXII Data
     *   Collection is identified.
     * *
     */
    NAME((short)1, "name"),
    /**
     * * This field indicates whether this Data Collection is a
     *   Data Feed (ordered Collection) or a Data Set
     *   (unordered Collection). Absence of this field denotes
     *   that this Collection is a Data Feed
     * *
     * 
     * @see CollectionType
     */
    TYPE((short)2, "type"),
    /**
     * * This field contains a prose description of this TAXII
     *   Data Collection. This field might also explain how to
     *   gain access to this TAXII Data Collection if out-of-band
     *   actions are required. (E.g., requires purchase of a
     *   contract, requires manual approval, etc.)
     *  *
     */
    DESCRIPTION((short)3, "description"),
    /**
     * * This field indicates the typical number of records
     *   added to this Data Collection daily. This represents a
     *   "typical" value and the producer is under no
     *   obligation to keep the Data Collection volume at the
     *   given level.
     * *
     */
    VOLUME((short)4, "volume"),
    /**
     * * This field contains Content Binding IDs indicating
     *   which types of content might be found in this TAXII
     *   Data Collection. Each Supported Content value MUST
     *   be a Content Binding ID as defined in the TAXII
     *   Content Binding Reference or by a third party.
     *   Absence of this field indicates that this Data
     *   Collection supports all types of content.
     * *
     */
    SUPPORTED_CONTENT((short)5, "supportedContent"),
    /**
     * * This field indicates whether the identity of the
     *   requester (authenticated or otherwise) is allowed to
     *   access this Collection. (Access could imply the ability
     *   to subscribe and/or the ability to send Poll Requests.)
     *   This field can indicate that the requester is known to
     *   have access, known not to have access, or that access
     *   is unknown. Absence of this field indicates that access
     *   is unknown.
     * 
     *   NOTE: For implementation purposes Unknown Access will be treated as equivalent to NO Access.
     *   There is no fundamental difference between these two choices, and regardless of the unknown/no access
     *   the client will not get a result.
     * *
     */
    IS_AVAILABLE((short)6, "isAvailable"),
    /**
     * * This field identifies the protocols that can be used to
     *   push content from this Data Collection via a
     *   subscription and/or for pushed results of
     *   Asynchronous Polling. This field MAY appear multiple
     *   times if content from this TAXII Data Collection can be
     *   pushed via multiple protocols. This field has multiple
     *   sub-fields. Absence of this field indicates that
     *   content from this Data Collection cannot be pushed
     *   to a Consumer using TAXII.
     * *
     */
    PUSH_METHODS((short)7, "pushMethods"),
    /**
     * * This field identifies the bindings and address a
     *   Consumer can use to interact with a Poll Service
     *   instance that supports this TAXII Data Collection. This
     *   field MAY appear multiple times if multiple Poll
     *   Services support this TAXII Data Collection. This field
     *   has multiple sub-fields. Absence of this field indicates
     *   that this Data Collection cannot be polled using TAXII.
     * 
     * *
     */
    POLLING_SERVICE_INSTANCES((short)8, "pollingServiceInstances"),
    /**
     *     * This field identifies the protocol and address that can
     *       be used to contact the TAXII Daemon hosting the
     *       Collection Management Service that can process
     *       subscription requests for this TAXII Data Collection.
     *       Absence of this field indicates that there is not a TAXII
     *       Service that processes subscription requests for this
     *       Collection. In that case subscriptions, if supported,
     *       would need to be established by mechanisms other
     *       than TAXII. In the case of alternative subscription
     *       methods, the Collection Description field could
     *       provide procedures for subscribing.
     * *
     */
    SUBSCRIPTION_METHODS((short)9, "subscriptionMethods"),
    /**
     *     * This field identifies the bindings and address of an
     *       Inbox Service to which content can be pushed to have
     *       it added to the given Data Collection. This field MAY
     *       appear multiple times if multiple Inbox Services may
     *       receive content for this TAXII Data Collection. If this
     *       field is absent, the Consumer cannot use TAXII
     *       Messages to request that content to be added
     *       specifically to this Data Collection. Note that content
     *       sent to this Inbox Service MAY still be rejected by the
     *       recipient for any reason instead of adding it to the
     *       indicated Data Collection.
     * 
     * *
     */
    RECEIVING_INBOX_SERVICES((short)10, "receivingInboxServices");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TYPE
          return TYPE;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // VOLUME
          return VOLUME;
        case 5: // SUPPORTED_CONTENT
          return SUPPORTED_CONTENT;
        case 6: // IS_AVAILABLE
          return IS_AVAILABLE;
        case 7: // PUSH_METHODS
          return PUSH_METHODS;
        case 8: // POLLING_SERVICE_INSTANCES
          return POLLING_SERVICE_INSTANCES;
        case 9: // SUBSCRIPTION_METHODS
          return SUBSCRIPTION_METHODS;
        case 10: // RECEIVING_INBOX_SERVICES
          return RECEIVING_INBOX_SERVICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOLUME_ISSET_ID = 0;
  private static final int __ISAVAILABLE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TYPE,_Fields.VOLUME,_Fields.SUPPORTED_CONTENT,_Fields.IS_AVAILABLE,_Fields.PUSH_METHODS,_Fields.POLLING_SERVICE_INSTANCES,_Fields.SUBSCRIPTION_METHODS,_Fields.RECEIVING_INBOX_SERVICES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CollectionType.class)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUPPORTED_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("supportedContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SupportedContent.class))));
    tmpMap.put(_Fields.IS_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("isAvailable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PUSH_METHODS, new org.apache.thrift.meta_data.FieldMetaData("pushMethods", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PushMethod.class))));
    tmpMap.put(_Fields.POLLING_SERVICE_INSTANCES, new org.apache.thrift.meta_data.FieldMetaData("pollingServiceInstances", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PollingInstance.class))));
    tmpMap.put(_Fields.SUBSCRIPTION_METHODS, new org.apache.thrift.meta_data.FieldMetaData("subscriptionMethods", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubscriptionMethod.class))));
    tmpMap.put(_Fields.RECEIVING_INBOX_SERVICES, new org.apache.thrift.meta_data.FieldMetaData("receivingInboxServices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReceivingInboxService.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectionInformation.class, metaDataMap);
  }

  public CollectionInformation() {
    this.type = com.yellowcab.CollectionType.DATA_FEED;

    this.isAvailable = false;

  }

  public CollectionInformation(
    String name,
    String description)
  {
    this();
    this.name = name;
    this.description = description;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectionInformation(CollectionInformation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.volume = other.volume;
    if (other.isSetSupportedContent()) {
      Set<SupportedContent> __this__supportedContent = new HashSet<SupportedContent>(other.supportedContent.size());
      for (SupportedContent other_element : other.supportedContent) {
        __this__supportedContent.add(new SupportedContent(other_element));
      }
      this.supportedContent = __this__supportedContent;
    }
    this.isAvailable = other.isAvailable;
    if (other.isSetPushMethods()) {
      Set<PushMethod> __this__pushMethods = new HashSet<PushMethod>(other.pushMethods.size());
      for (PushMethod other_element : other.pushMethods) {
        __this__pushMethods.add(new PushMethod(other_element));
      }
      this.pushMethods = __this__pushMethods;
    }
    if (other.isSetPollingServiceInstances()) {
      Set<PollingInstance> __this__pollingServiceInstances = new HashSet<PollingInstance>(other.pollingServiceInstances.size());
      for (PollingInstance other_element : other.pollingServiceInstances) {
        __this__pollingServiceInstances.add(new PollingInstance(other_element));
      }
      this.pollingServiceInstances = __this__pollingServiceInstances;
    }
    if (other.isSetSubscriptionMethods()) {
      Set<SubscriptionMethod> __this__subscriptionMethods = new HashSet<SubscriptionMethod>(other.subscriptionMethods.size());
      for (SubscriptionMethod other_element : other.subscriptionMethods) {
        __this__subscriptionMethods.add(new SubscriptionMethod(other_element));
      }
      this.subscriptionMethods = __this__subscriptionMethods;
    }
    if (other.isSetReceivingInboxServices()) {
      Set<ReceivingInboxService> __this__receivingInboxServices = new HashSet<ReceivingInboxService>(other.receivingInboxServices.size());
      for (ReceivingInboxService other_element : other.receivingInboxServices) {
        __this__receivingInboxServices.add(new ReceivingInboxService(other_element));
      }
      this.receivingInboxServices = __this__receivingInboxServices;
    }
  }

  public CollectionInformation deepCopy() {
    return new CollectionInformation(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.type = com.yellowcab.CollectionType.DATA_FEED;

    this.description = null;
    setVolumeIsSet(false);
    this.volume = 0;
    this.supportedContent = null;
    this.isAvailable = false;

    this.pushMethods = null;
    this.pollingServiceInstances = null;
    this.subscriptionMethods = null;
    this.receivingInboxServices = null;
  }

  /**
   * * This field contains the name by which this TAXII Data
   *   Collection is identified.
   * *
   */
  public String getName() {
    return this.name;
  }

  /**
   * * This field contains the name by which this TAXII Data
   *   Collection is identified.
   * *
   */
  public CollectionInformation setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * * This field indicates whether this Data Collection is a
   *   Data Feed (ordered Collection) or a Data Set
   *   (unordered Collection). Absence of this field denotes
   *   that this Collection is a Data Feed
   * *
   * 
   * @see CollectionType
   */
  public CollectionType getType() {
    return this.type;
  }

  /**
   * * This field indicates whether this Data Collection is a
   *   Data Feed (ordered Collection) or a Data Set
   *   (unordered Collection). Absence of this field denotes
   *   that this Collection is a Data Feed
   * *
   * 
   * @see CollectionType
   */
  public CollectionInformation setType(CollectionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * * This field contains a prose description of this TAXII
   *   Data Collection. This field might also explain how to
   *   gain access to this TAXII Data Collection if out-of-band
   *   actions are required. (E.g., requires purchase of a
   *   contract, requires manual approval, etc.)
   *  *
   */
  public String getDescription() {
    return this.description;
  }

  /**
   * * This field contains a prose description of this TAXII
   *   Data Collection. This field might also explain how to
   *   gain access to this TAXII Data Collection if out-of-band
   *   actions are required. (E.g., requires purchase of a
   *   contract, requires manual approval, etc.)
   *  *
   */
  public CollectionInformation setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * * This field indicates the typical number of records
   *   added to this Data Collection daily. This represents a
   *   "typical" value and the producer is under no
   *   obligation to keep the Data Collection volume at the
   *   given level.
   * *
   */
  public long getVolume() {
    return this.volume;
  }

  /**
   * * This field indicates the typical number of records
   *   added to this Data Collection daily. This represents a
   *   "typical" value and the producer is under no
   *   obligation to keep the Data Collection volume at the
   *   given level.
   * *
   */
  public CollectionInformation setVolume(long volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  public int getSupportedContentSize() {
    return (this.supportedContent == null) ? 0 : this.supportedContent.size();
  }

  public java.util.Iterator<SupportedContent> getSupportedContentIterator() {
    return (this.supportedContent == null) ? null : this.supportedContent.iterator();
  }

  public void addToSupportedContent(SupportedContent elem) {
    if (this.supportedContent == null) {
      this.supportedContent = new HashSet<SupportedContent>();
    }
    this.supportedContent.add(elem);
  }

  /**
   * * This field contains Content Binding IDs indicating
   *   which types of content might be found in this TAXII
   *   Data Collection. Each Supported Content value MUST
   *   be a Content Binding ID as defined in the TAXII
   *   Content Binding Reference or by a third party.
   *   Absence of this field indicates that this Data
   *   Collection supports all types of content.
   * *
   */
  public Set<SupportedContent> getSupportedContent() {
    return this.supportedContent;
  }

  /**
   * * This field contains Content Binding IDs indicating
   *   which types of content might be found in this TAXII
   *   Data Collection. Each Supported Content value MUST
   *   be a Content Binding ID as defined in the TAXII
   *   Content Binding Reference or by a third party.
   *   Absence of this field indicates that this Data
   *   Collection supports all types of content.
   * *
   */
  public CollectionInformation setSupportedContent(Set<SupportedContent> supportedContent) {
    this.supportedContent = supportedContent;
    return this;
  }

  public void unsetSupportedContent() {
    this.supportedContent = null;
  }

  /** Returns true if field supportedContent is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportedContent() {
    return this.supportedContent != null;
  }

  public void setSupportedContentIsSet(boolean value) {
    if (!value) {
      this.supportedContent = null;
    }
  }

  /**
   * * This field indicates whether the identity of the
   *   requester (authenticated or otherwise) is allowed to
   *   access this Collection. (Access could imply the ability
   *   to subscribe and/or the ability to send Poll Requests.)
   *   This field can indicate that the requester is known to
   *   have access, known not to have access, or that access
   *   is unknown. Absence of this field indicates that access
   *   is unknown.
   * 
   *   NOTE: For implementation purposes Unknown Access will be treated as equivalent to NO Access.
   *   There is no fundamental difference between these two choices, and regardless of the unknown/no access
   *   the client will not get a result.
   * *
   */
  public boolean isIsAvailable() {
    return this.isAvailable;
  }

  /**
   * * This field indicates whether the identity of the
   *   requester (authenticated or otherwise) is allowed to
   *   access this Collection. (Access could imply the ability
   *   to subscribe and/or the ability to send Poll Requests.)
   *   This field can indicate that the requester is known to
   *   have access, known not to have access, or that access
   *   is unknown. Absence of this field indicates that access
   *   is unknown.
   * 
   *   NOTE: For implementation purposes Unknown Access will be treated as equivalent to NO Access.
   *   There is no fundamental difference between these two choices, and regardless of the unknown/no access
   *   the client will not get a result.
   * *
   */
  public CollectionInformation setIsAvailable(boolean isAvailable) {
    this.isAvailable = isAvailable;
    setIsAvailableIsSet(true);
    return this;
  }

  public void unsetIsAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAVAILABLE_ISSET_ID);
  }

  /** Returns true if field isAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAVAILABLE_ISSET_ID);
  }

  public void setIsAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAVAILABLE_ISSET_ID, value);
  }

  public int getPushMethodsSize() {
    return (this.pushMethods == null) ? 0 : this.pushMethods.size();
  }

  public java.util.Iterator<PushMethod> getPushMethodsIterator() {
    return (this.pushMethods == null) ? null : this.pushMethods.iterator();
  }

  public void addToPushMethods(PushMethod elem) {
    if (this.pushMethods == null) {
      this.pushMethods = new HashSet<PushMethod>();
    }
    this.pushMethods.add(elem);
  }

  /**
   * * This field identifies the protocols that can be used to
   *   push content from this Data Collection via a
   *   subscription and/or for pushed results of
   *   Asynchronous Polling. This field MAY appear multiple
   *   times if content from this TAXII Data Collection can be
   *   pushed via multiple protocols. This field has multiple
   *   sub-fields. Absence of this field indicates that
   *   content from this Data Collection cannot be pushed
   *   to a Consumer using TAXII.
   * *
   */
  public Set<PushMethod> getPushMethods() {
    return this.pushMethods;
  }

  /**
   * * This field identifies the protocols that can be used to
   *   push content from this Data Collection via a
   *   subscription and/or for pushed results of
   *   Asynchronous Polling. This field MAY appear multiple
   *   times if content from this TAXII Data Collection can be
   *   pushed via multiple protocols. This field has multiple
   *   sub-fields. Absence of this field indicates that
   *   content from this Data Collection cannot be pushed
   *   to a Consumer using TAXII.
   * *
   */
  public CollectionInformation setPushMethods(Set<PushMethod> pushMethods) {
    this.pushMethods = pushMethods;
    return this;
  }

  public void unsetPushMethods() {
    this.pushMethods = null;
  }

  /** Returns true if field pushMethods is set (has been assigned a value) and false otherwise */
  public boolean isSetPushMethods() {
    return this.pushMethods != null;
  }

  public void setPushMethodsIsSet(boolean value) {
    if (!value) {
      this.pushMethods = null;
    }
  }

  public int getPollingServiceInstancesSize() {
    return (this.pollingServiceInstances == null) ? 0 : this.pollingServiceInstances.size();
  }

  public java.util.Iterator<PollingInstance> getPollingServiceInstancesIterator() {
    return (this.pollingServiceInstances == null) ? null : this.pollingServiceInstances.iterator();
  }

  public void addToPollingServiceInstances(PollingInstance elem) {
    if (this.pollingServiceInstances == null) {
      this.pollingServiceInstances = new HashSet<PollingInstance>();
    }
    this.pollingServiceInstances.add(elem);
  }

  /**
   * * This field identifies the bindings and address a
   *   Consumer can use to interact with a Poll Service
   *   instance that supports this TAXII Data Collection. This
   *   field MAY appear multiple times if multiple Poll
   *   Services support this TAXII Data Collection. This field
   *   has multiple sub-fields. Absence of this field indicates
   *   that this Data Collection cannot be polled using TAXII.
   * 
   * *
   */
  public Set<PollingInstance> getPollingServiceInstances() {
    return this.pollingServiceInstances;
  }

  /**
   * * This field identifies the bindings and address a
   *   Consumer can use to interact with a Poll Service
   *   instance that supports this TAXII Data Collection. This
   *   field MAY appear multiple times if multiple Poll
   *   Services support this TAXII Data Collection. This field
   *   has multiple sub-fields. Absence of this field indicates
   *   that this Data Collection cannot be polled using TAXII.
   * 
   * *
   */
  public CollectionInformation setPollingServiceInstances(Set<PollingInstance> pollingServiceInstances) {
    this.pollingServiceInstances = pollingServiceInstances;
    return this;
  }

  public void unsetPollingServiceInstances() {
    this.pollingServiceInstances = null;
  }

  /** Returns true if field pollingServiceInstances is set (has been assigned a value) and false otherwise */
  public boolean isSetPollingServiceInstances() {
    return this.pollingServiceInstances != null;
  }

  public void setPollingServiceInstancesIsSet(boolean value) {
    if (!value) {
      this.pollingServiceInstances = null;
    }
  }

  public int getSubscriptionMethodsSize() {
    return (this.subscriptionMethods == null) ? 0 : this.subscriptionMethods.size();
  }

  public java.util.Iterator<SubscriptionMethod> getSubscriptionMethodsIterator() {
    return (this.subscriptionMethods == null) ? null : this.subscriptionMethods.iterator();
  }

  public void addToSubscriptionMethods(SubscriptionMethod elem) {
    if (this.subscriptionMethods == null) {
      this.subscriptionMethods = new HashSet<SubscriptionMethod>();
    }
    this.subscriptionMethods.add(elem);
  }

  /**
   *     * This field identifies the protocol and address that can
   *       be used to contact the TAXII Daemon hosting the
   *       Collection Management Service that can process
   *       subscription requests for this TAXII Data Collection.
   *       Absence of this field indicates that there is not a TAXII
   *       Service that processes subscription requests for this
   *       Collection. In that case subscriptions, if supported,
   *       would need to be established by mechanisms other
   *       than TAXII. In the case of alternative subscription
   *       methods, the Collection Description field could
   *       provide procedures for subscribing.
   * *
   */
  public Set<SubscriptionMethod> getSubscriptionMethods() {
    return this.subscriptionMethods;
  }

  /**
   *     * This field identifies the protocol and address that can
   *       be used to contact the TAXII Daemon hosting the
   *       Collection Management Service that can process
   *       subscription requests for this TAXII Data Collection.
   *       Absence of this field indicates that there is not a TAXII
   *       Service that processes subscription requests for this
   *       Collection. In that case subscriptions, if supported,
   *       would need to be established by mechanisms other
   *       than TAXII. In the case of alternative subscription
   *       methods, the Collection Description field could
   *       provide procedures for subscribing.
   * *
   */
  public CollectionInformation setSubscriptionMethods(Set<SubscriptionMethod> subscriptionMethods) {
    this.subscriptionMethods = subscriptionMethods;
    return this;
  }

  public void unsetSubscriptionMethods() {
    this.subscriptionMethods = null;
  }

  /** Returns true if field subscriptionMethods is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionMethods() {
    return this.subscriptionMethods != null;
  }

  public void setSubscriptionMethodsIsSet(boolean value) {
    if (!value) {
      this.subscriptionMethods = null;
    }
  }

  public int getReceivingInboxServicesSize() {
    return (this.receivingInboxServices == null) ? 0 : this.receivingInboxServices.size();
  }

  public java.util.Iterator<ReceivingInboxService> getReceivingInboxServicesIterator() {
    return (this.receivingInboxServices == null) ? null : this.receivingInboxServices.iterator();
  }

  public void addToReceivingInboxServices(ReceivingInboxService elem) {
    if (this.receivingInboxServices == null) {
      this.receivingInboxServices = new HashSet<ReceivingInboxService>();
    }
    this.receivingInboxServices.add(elem);
  }

  /**
   *     * This field identifies the bindings and address of an
   *       Inbox Service to which content can be pushed to have
   *       it added to the given Data Collection. This field MAY
   *       appear multiple times if multiple Inbox Services may
   *       receive content for this TAXII Data Collection. If this
   *       field is absent, the Consumer cannot use TAXII
   *       Messages to request that content to be added
   *       specifically to this Data Collection. Note that content
   *       sent to this Inbox Service MAY still be rejected by the
   *       recipient for any reason instead of adding it to the
   *       indicated Data Collection.
   * 
   * *
   */
  public Set<ReceivingInboxService> getReceivingInboxServices() {
    return this.receivingInboxServices;
  }

  /**
   *     * This field identifies the bindings and address of an
   *       Inbox Service to which content can be pushed to have
   *       it added to the given Data Collection. This field MAY
   *       appear multiple times if multiple Inbox Services may
   *       receive content for this TAXII Data Collection. If this
   *       field is absent, the Consumer cannot use TAXII
   *       Messages to request that content to be added
   *       specifically to this Data Collection. Note that content
   *       sent to this Inbox Service MAY still be rejected by the
   *       recipient for any reason instead of adding it to the
   *       indicated Data Collection.
   * 
   * *
   */
  public CollectionInformation setReceivingInboxServices(Set<ReceivingInboxService> receivingInboxServices) {
    this.receivingInboxServices = receivingInboxServices;
    return this;
  }

  public void unsetReceivingInboxServices() {
    this.receivingInboxServices = null;
  }

  /** Returns true if field receivingInboxServices is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivingInboxServices() {
    return this.receivingInboxServices != null;
  }

  public void setReceivingInboxServicesIsSet(boolean value) {
    if (!value) {
      this.receivingInboxServices = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((CollectionType)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Long)value);
      }
      break;

    case SUPPORTED_CONTENT:
      if (value == null) {
        unsetSupportedContent();
      } else {
        setSupportedContent((Set<SupportedContent>)value);
      }
      break;

    case IS_AVAILABLE:
      if (value == null) {
        unsetIsAvailable();
      } else {
        setIsAvailable((Boolean)value);
      }
      break;

    case PUSH_METHODS:
      if (value == null) {
        unsetPushMethods();
      } else {
        setPushMethods((Set<PushMethod>)value);
      }
      break;

    case POLLING_SERVICE_INSTANCES:
      if (value == null) {
        unsetPollingServiceInstances();
      } else {
        setPollingServiceInstances((Set<PollingInstance>)value);
      }
      break;

    case SUBSCRIPTION_METHODS:
      if (value == null) {
        unsetSubscriptionMethods();
      } else {
        setSubscriptionMethods((Set<SubscriptionMethod>)value);
      }
      break;

    case RECEIVING_INBOX_SERVICES:
      if (value == null) {
        unsetReceivingInboxServices();
      } else {
        setReceivingInboxServices((Set<ReceivingInboxService>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TYPE:
      return getType();

    case DESCRIPTION:
      return getDescription();

    case VOLUME:
      return Long.valueOf(getVolume());

    case SUPPORTED_CONTENT:
      return getSupportedContent();

    case IS_AVAILABLE:
      return Boolean.valueOf(isIsAvailable());

    case PUSH_METHODS:
      return getPushMethods();

    case POLLING_SERVICE_INSTANCES:
      return getPollingServiceInstances();

    case SUBSCRIPTION_METHODS:
      return getSubscriptionMethods();

    case RECEIVING_INBOX_SERVICES:
      return getReceivingInboxServices();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case DESCRIPTION:
      return isSetDescription();
    case VOLUME:
      return isSetVolume();
    case SUPPORTED_CONTENT:
      return isSetSupportedContent();
    case IS_AVAILABLE:
      return isSetIsAvailable();
    case PUSH_METHODS:
      return isSetPushMethods();
    case POLLING_SERVICE_INSTANCES:
      return isSetPollingServiceInstances();
    case SUBSCRIPTION_METHODS:
      return isSetSubscriptionMethods();
    case RECEIVING_INBOX_SERVICES:
      return isSetReceivingInboxServices();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectionInformation)
      return this.equals((CollectionInformation)that);
    return false;
  }

  public boolean equals(CollectionInformation that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_volume = true && this.isSetVolume();
    boolean that_present_volume = true && that.isSetVolume();
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_supportedContent = true && this.isSetSupportedContent();
    boolean that_present_supportedContent = true && that.isSetSupportedContent();
    if (this_present_supportedContent || that_present_supportedContent) {
      if (!(this_present_supportedContent && that_present_supportedContent))
        return false;
      if (!this.supportedContent.equals(that.supportedContent))
        return false;
    }

    boolean this_present_isAvailable = true && this.isSetIsAvailable();
    boolean that_present_isAvailable = true && that.isSetIsAvailable();
    if (this_present_isAvailable || that_present_isAvailable) {
      if (!(this_present_isAvailable && that_present_isAvailable))
        return false;
      if (this.isAvailable != that.isAvailable)
        return false;
    }

    boolean this_present_pushMethods = true && this.isSetPushMethods();
    boolean that_present_pushMethods = true && that.isSetPushMethods();
    if (this_present_pushMethods || that_present_pushMethods) {
      if (!(this_present_pushMethods && that_present_pushMethods))
        return false;
      if (!this.pushMethods.equals(that.pushMethods))
        return false;
    }

    boolean this_present_pollingServiceInstances = true && this.isSetPollingServiceInstances();
    boolean that_present_pollingServiceInstances = true && that.isSetPollingServiceInstances();
    if (this_present_pollingServiceInstances || that_present_pollingServiceInstances) {
      if (!(this_present_pollingServiceInstances && that_present_pollingServiceInstances))
        return false;
      if (!this.pollingServiceInstances.equals(that.pollingServiceInstances))
        return false;
    }

    boolean this_present_subscriptionMethods = true && this.isSetSubscriptionMethods();
    boolean that_present_subscriptionMethods = true && that.isSetSubscriptionMethods();
    if (this_present_subscriptionMethods || that_present_subscriptionMethods) {
      if (!(this_present_subscriptionMethods && that_present_subscriptionMethods))
        return false;
      if (!this.subscriptionMethods.equals(that.subscriptionMethods))
        return false;
    }

    boolean this_present_receivingInboxServices = true && this.isSetReceivingInboxServices();
    boolean that_present_receivingInboxServices = true && that.isSetReceivingInboxServices();
    if (this_present_receivingInboxServices || that_present_receivingInboxServices) {
      if (!(this_present_receivingInboxServices && that_present_receivingInboxServices))
        return false;
      if (!this.receivingInboxServices.equals(that.receivingInboxServices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CollectionInformation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportedContent()).compareTo(other.isSetSupportedContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportedContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportedContent, other.supportedContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAvailable()).compareTo(other.isSetIsAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAvailable, other.isAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushMethods()).compareTo(other.isSetPushMethods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushMethods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushMethods, other.pushMethods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPollingServiceInstances()).compareTo(other.isSetPollingServiceInstances());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollingServiceInstances()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollingServiceInstances, other.pollingServiceInstances);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionMethods()).compareTo(other.isSetSubscriptionMethods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionMethods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionMethods, other.subscriptionMethods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivingInboxServices()).compareTo(other.isSetReceivingInboxServices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivingInboxServices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivingInboxServices, other.receivingInboxServices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectionInformation(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (isSetVolume()) {
      if (!first) sb.append(", ");
      sb.append("volume:");
      sb.append(this.volume);
      first = false;
    }
    if (isSetSupportedContent()) {
      if (!first) sb.append(", ");
      sb.append("supportedContent:");
      if (this.supportedContent == null) {
        sb.append("null");
      } else {
        sb.append(this.supportedContent);
      }
      first = false;
    }
    if (isSetIsAvailable()) {
      if (!first) sb.append(", ");
      sb.append("isAvailable:");
      sb.append(this.isAvailable);
      first = false;
    }
    if (isSetPushMethods()) {
      if (!first) sb.append(", ");
      sb.append("pushMethods:");
      if (this.pushMethods == null) {
        sb.append("null");
      } else {
        sb.append(this.pushMethods);
      }
      first = false;
    }
    if (isSetPollingServiceInstances()) {
      if (!first) sb.append(", ");
      sb.append("pollingServiceInstances:");
      if (this.pollingServiceInstances == null) {
        sb.append("null");
      } else {
        sb.append(this.pollingServiceInstances);
      }
      first = false;
    }
    if (isSetSubscriptionMethods()) {
      if (!first) sb.append(", ");
      sb.append("subscriptionMethods:");
      if (this.subscriptionMethods == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriptionMethods);
      }
      first = false;
    }
    if (isSetReceivingInboxServices()) {
      if (!first) sb.append(", ");
      sb.append("receivingInboxServices:");
      if (this.receivingInboxServices == null) {
        sb.append("null");
      } else {
        sb.append(this.receivingInboxServices);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (description == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectionInformationStandardSchemeFactory implements SchemeFactory {
    public CollectionInformationStandardScheme getScheme() {
      return new CollectionInformationStandardScheme();
    }
  }

  private static class CollectionInformationStandardScheme extends StandardScheme<CollectionInformation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectionInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = CollectionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.volume = iprot.readI64();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUPPORTED_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set120 = iprot.readSetBegin();
                struct.supportedContent = new HashSet<SupportedContent>(2*_set120.size);
                for (int _i121 = 0; _i121 < _set120.size; ++_i121)
                {
                  SupportedContent _elem122;
                  _elem122 = new SupportedContent();
                  _elem122.read(iprot);
                  struct.supportedContent.add(_elem122);
                }
                iprot.readSetEnd();
              }
              struct.setSupportedContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAvailable = iprot.readBool();
              struct.setIsAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PUSH_METHODS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set123 = iprot.readSetBegin();
                struct.pushMethods = new HashSet<PushMethod>(2*_set123.size);
                for (int _i124 = 0; _i124 < _set123.size; ++_i124)
                {
                  PushMethod _elem125;
                  _elem125 = new PushMethod();
                  _elem125.read(iprot);
                  struct.pushMethods.add(_elem125);
                }
                iprot.readSetEnd();
              }
              struct.setPushMethodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POLLING_SERVICE_INSTANCES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set126 = iprot.readSetBegin();
                struct.pollingServiceInstances = new HashSet<PollingInstance>(2*_set126.size);
                for (int _i127 = 0; _i127 < _set126.size; ++_i127)
                {
                  PollingInstance _elem128;
                  _elem128 = new PollingInstance();
                  _elem128.read(iprot);
                  struct.pollingServiceInstances.add(_elem128);
                }
                iprot.readSetEnd();
              }
              struct.setPollingServiceInstancesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUBSCRIPTION_METHODS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set129 = iprot.readSetBegin();
                struct.subscriptionMethods = new HashSet<SubscriptionMethod>(2*_set129.size);
                for (int _i130 = 0; _i130 < _set129.size; ++_i130)
                {
                  SubscriptionMethod _elem131;
                  _elem131 = new SubscriptionMethod();
                  _elem131.read(iprot);
                  struct.subscriptionMethods.add(_elem131);
                }
                iprot.readSetEnd();
              }
              struct.setSubscriptionMethodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECEIVING_INBOX_SERVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set132 = iprot.readSetBegin();
                struct.receivingInboxServices = new HashSet<ReceivingInboxService>(2*_set132.size);
                for (int _i133 = 0; _i133 < _set132.size; ++_i133)
                {
                  ReceivingInboxService _elem134;
                  _elem134 = new ReceivingInboxService();
                  _elem134.read(iprot);
                  struct.receivingInboxServices.add(_elem134);
                }
                iprot.readSetEnd();
              }
              struct.setReceivingInboxServicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectionInformation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolume()) {
        oprot.writeFieldBegin(VOLUME_FIELD_DESC);
        oprot.writeI64(struct.volume);
        oprot.writeFieldEnd();
      }
      if (struct.supportedContent != null) {
        if (struct.isSetSupportedContent()) {
          oprot.writeFieldBegin(SUPPORTED_CONTENT_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.supportedContent.size()));
            for (SupportedContent _iter135 : struct.supportedContent)
            {
              _iter135.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsAvailable()) {
        oprot.writeFieldBegin(IS_AVAILABLE_FIELD_DESC);
        oprot.writeBool(struct.isAvailable);
        oprot.writeFieldEnd();
      }
      if (struct.pushMethods != null) {
        if (struct.isSetPushMethods()) {
          oprot.writeFieldBegin(PUSH_METHODS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.pushMethods.size()));
            for (PushMethod _iter136 : struct.pushMethods)
            {
              _iter136.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.pollingServiceInstances != null) {
        if (struct.isSetPollingServiceInstances()) {
          oprot.writeFieldBegin(POLLING_SERVICE_INSTANCES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.pollingServiceInstances.size()));
            for (PollingInstance _iter137 : struct.pollingServiceInstances)
            {
              _iter137.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscriptionMethods != null) {
        if (struct.isSetSubscriptionMethods()) {
          oprot.writeFieldBegin(SUBSCRIPTION_METHODS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.subscriptionMethods.size()));
            for (SubscriptionMethod _iter138 : struct.subscriptionMethods)
            {
              _iter138.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.receivingInboxServices != null) {
        if (struct.isSetReceivingInboxServices()) {
          oprot.writeFieldBegin(RECEIVING_INBOX_SERVICES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.receivingInboxServices.size()));
            for (ReceivingInboxService _iter139 : struct.receivingInboxServices)
            {
              _iter139.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectionInformationTupleSchemeFactory implements SchemeFactory {
    public CollectionInformationTupleScheme getScheme() {
      return new CollectionInformationTupleScheme();
    }
  }

  private static class CollectionInformationTupleScheme extends TupleScheme<CollectionInformation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectionInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeString(struct.description);
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetVolume()) {
        optionals.set(1);
      }
      if (struct.isSetSupportedContent()) {
        optionals.set(2);
      }
      if (struct.isSetIsAvailable()) {
        optionals.set(3);
      }
      if (struct.isSetPushMethods()) {
        optionals.set(4);
      }
      if (struct.isSetPollingServiceInstances()) {
        optionals.set(5);
      }
      if (struct.isSetSubscriptionMethods()) {
        optionals.set(6);
      }
      if (struct.isSetReceivingInboxServices()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetVolume()) {
        oprot.writeI64(struct.volume);
      }
      if (struct.isSetSupportedContent()) {
        {
          oprot.writeI32(struct.supportedContent.size());
          for (SupportedContent _iter140 : struct.supportedContent)
          {
            _iter140.write(oprot);
          }
        }
      }
      if (struct.isSetIsAvailable()) {
        oprot.writeBool(struct.isAvailable);
      }
      if (struct.isSetPushMethods()) {
        {
          oprot.writeI32(struct.pushMethods.size());
          for (PushMethod _iter141 : struct.pushMethods)
          {
            _iter141.write(oprot);
          }
        }
      }
      if (struct.isSetPollingServiceInstances()) {
        {
          oprot.writeI32(struct.pollingServiceInstances.size());
          for (PollingInstance _iter142 : struct.pollingServiceInstances)
          {
            _iter142.write(oprot);
          }
        }
      }
      if (struct.isSetSubscriptionMethods()) {
        {
          oprot.writeI32(struct.subscriptionMethods.size());
          for (SubscriptionMethod _iter143 : struct.subscriptionMethods)
          {
            _iter143.write(oprot);
          }
        }
      }
      if (struct.isSetReceivingInboxServices()) {
        {
          oprot.writeI32(struct.receivingInboxServices.size());
          for (ReceivingInboxService _iter144 : struct.receivingInboxServices)
          {
            _iter144.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectionInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.description = iprot.readString();
      struct.setDescriptionIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.type = CollectionType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.volume = iprot.readI64();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set145 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.supportedContent = new HashSet<SupportedContent>(2*_set145.size);
          for (int _i146 = 0; _i146 < _set145.size; ++_i146)
          {
            SupportedContent _elem147;
            _elem147 = new SupportedContent();
            _elem147.read(iprot);
            struct.supportedContent.add(_elem147);
          }
        }
        struct.setSupportedContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isAvailable = iprot.readBool();
        struct.setIsAvailableIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set148 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pushMethods = new HashSet<PushMethod>(2*_set148.size);
          for (int _i149 = 0; _i149 < _set148.size; ++_i149)
          {
            PushMethod _elem150;
            _elem150 = new PushMethod();
            _elem150.read(iprot);
            struct.pushMethods.add(_elem150);
          }
        }
        struct.setPushMethodsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set151 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pollingServiceInstances = new HashSet<PollingInstance>(2*_set151.size);
          for (int _i152 = 0; _i152 < _set151.size; ++_i152)
          {
            PollingInstance _elem153;
            _elem153 = new PollingInstance();
            _elem153.read(iprot);
            struct.pollingServiceInstances.add(_elem153);
          }
        }
        struct.setPollingServiceInstancesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set154 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subscriptionMethods = new HashSet<SubscriptionMethod>(2*_set154.size);
          for (int _i155 = 0; _i155 < _set154.size; ++_i155)
          {
            SubscriptionMethod _elem156;
            _elem156 = new SubscriptionMethod();
            _elem156.read(iprot);
            struct.subscriptionMethods.add(_elem156);
          }
        }
        struct.setSubscriptionMethodsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set157 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.receivingInboxServices = new HashSet<ReceivingInboxService>(2*_set157.size);
          for (int _i158 = 0; _i158 < _set157.size; ++_i158)
          {
            ReceivingInboxService _elem159;
            _elem159 = new ReceivingInboxService();
            _elem159.read(iprot);
            struct.receivingInboxServices.add(_elem159);
          }
        }
        struct.setReceivingInboxServicesIsSet(true);
      }
    }
  }

}

