/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Represents an instance of a subscription
 * 
 */
public class SubscriptionInstance implements org.apache.thrift.TBase<SubscriptionInstance, SubscriptionInstance._Fields>, java.io.Serializable, Cloneable, Comparable<SubscriptionInstance> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubscriptionInstance");

  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionParameter", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_DELIVERY_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionDeliveryParameter", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField POLLING_INSTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("pollingInstances", org.apache.thrift.protocol.TType.SET, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubscriptionInstanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubscriptionInstanceTupleSchemeFactory());
  }

  public String subscriptionId; // required
  /**
   *     * This field contains the status of the Subscription.
   * If this field is absent, treat it as having a value of Active.
   * 
   * *
   * 
   * @see SubscriptionStatus
   */
  public SubscriptionStatus status; // optional
  /**
   *     * This field contains a copy of the Subscription
   *       Parameters of the Manage Collection Subscription
   *       Request message that established this subscription.
   *       This field MUST be present if this message is in
   *       response to a request with and Action field value of
   *       STATUS. This field MAY be present when responding to
   *       any other Action type.
   * 
   * *
   */
  public SubscriptionParameter subscriptionParameter; // optional
  /**
   *     * This field contains a copy of the Delivery Parameters (if
   *       present) of the Manage Collection Subscription Request
   *       Message that established this subscription. This field is
   *       present if and only if the Producer is willing and able to
   *       push content to the indicated Inbox Service in
   *       fulfillment of the established subscription. (It does not
   *       matter whether the subscription is currently in a
   *       PAUSED state.)
   * 
   * *
   */
  public DeliveryParameter subscriptionDeliveryParameter; // optional
  /**
   *     * Each Poll Instance represents an instance of a Poll
   *       Service that can be contacted to retrieve content
   *       associated with the named subscription. Its subfields
   *       indicate where Poll Request Messages can be sent for
   *       the given subscription. Multiple instances of this field
   *       may be present if there are multiple Poll Services that
   *       can be contacted for content for this subscription. If
   *       this field is absent, this indicates that polling for
   *       subscription content is not supported via TAXII.
   * 
   * *
   */
  public Set<PollingInstance> pollingInstances; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBSCRIPTION_ID((short)1, "subscriptionId"),
    /**
     *     * This field contains the status of the Subscription.
     * If this field is absent, treat it as having a value of Active.
     * 
     * *
     * 
     * @see SubscriptionStatus
     */
    STATUS((short)2, "status"),
    /**
     *     * This field contains a copy of the Subscription
     *       Parameters of the Manage Collection Subscription
     *       Request message that established this subscription.
     *       This field MUST be present if this message is in
     *       response to a request with and Action field value of
     *       STATUS. This field MAY be present when responding to
     *       any other Action type.
     * 
     * *
     */
    SUBSCRIPTION_PARAMETER((short)3, "subscriptionParameter"),
    /**
     *     * This field contains a copy of the Delivery Parameters (if
     *       present) of the Manage Collection Subscription Request
     *       Message that established this subscription. This field is
     *       present if and only if the Producer is willing and able to
     *       push content to the indicated Inbox Service in
     *       fulfillment of the established subscription. (It does not
     *       matter whether the subscription is currently in a
     *       PAUSED state.)
     * 
     * *
     */
    SUBSCRIPTION_DELIVERY_PARAMETER((short)4, "subscriptionDeliveryParameter"),
    /**
     *     * Each Poll Instance represents an instance of a Poll
     *       Service that can be contacted to retrieve content
     *       associated with the named subscription. Its subfields
     *       indicate where Poll Request Messages can be sent for
     *       the given subscription. Multiple instances of this field
     *       may be present if there are multiple Poll Services that
     *       can be contacted for content for this subscription. If
     *       this field is absent, this indicates that polling for
     *       subscription content is not supported via TAXII.
     * 
     * *
     */
    POLLING_INSTANCES((short)5, "pollingInstances");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBSCRIPTION_ID
          return SUBSCRIPTION_ID;
        case 2: // STATUS
          return STATUS;
        case 3: // SUBSCRIPTION_PARAMETER
          return SUBSCRIPTION_PARAMETER;
        case 4: // SUBSCRIPTION_DELIVERY_PARAMETER
          return SUBSCRIPTION_DELIVERY_PARAMETER;
        case 5: // POLLING_INSTANCES
          return POLLING_INSTANCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.STATUS,_Fields.SUBSCRIPTION_PARAMETER,_Fields.SUBSCRIPTION_DELIVERY_PARAMETER,_Fields.POLLING_INSTANCES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBSCRIPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("subscriptionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SubscriptionStatus.class)));
    tmpMap.put(_Fields.SUBSCRIPTION_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("subscriptionParameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubscriptionParameter.class)));
    tmpMap.put(_Fields.SUBSCRIPTION_DELIVERY_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("subscriptionDeliveryParameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeliveryParameter.class)));
    tmpMap.put(_Fields.POLLING_INSTANCES, new org.apache.thrift.meta_data.FieldMetaData("pollingInstances", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PollingInstance.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubscriptionInstance.class, metaDataMap);
  }

  public SubscriptionInstance() {
  }

  public SubscriptionInstance(
    String subscriptionId)
  {
    this();
    this.subscriptionId = subscriptionId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubscriptionInstance(SubscriptionInstance other) {
    if (other.isSetSubscriptionId()) {
      this.subscriptionId = other.subscriptionId;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetSubscriptionParameter()) {
      this.subscriptionParameter = new SubscriptionParameter(other.subscriptionParameter);
    }
    if (other.isSetSubscriptionDeliveryParameter()) {
      this.subscriptionDeliveryParameter = new DeliveryParameter(other.subscriptionDeliveryParameter);
    }
    if (other.isSetPollingInstances()) {
      Set<PollingInstance> __this__pollingInstances = new HashSet<PollingInstance>(other.pollingInstances.size());
      for (PollingInstance other_element : other.pollingInstances) {
        __this__pollingInstances.add(new PollingInstance(other_element));
      }
      this.pollingInstances = __this__pollingInstances;
    }
  }

  public SubscriptionInstance deepCopy() {
    return new SubscriptionInstance(this);
  }

  @Override
  public void clear() {
    this.subscriptionId = null;
    this.status = null;
    this.subscriptionParameter = null;
    this.subscriptionDeliveryParameter = null;
    this.pollingInstances = null;
  }

  public String getSubscriptionId() {
    return this.subscriptionId;
  }

  public SubscriptionInstance setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  public void unsetSubscriptionId() {
    this.subscriptionId = null;
  }

  /** Returns true if field subscriptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionId() {
    return this.subscriptionId != null;
  }

  public void setSubscriptionIdIsSet(boolean value) {
    if (!value) {
      this.subscriptionId = null;
    }
  }

  /**
   *     * This field contains the status of the Subscription.
   * If this field is absent, treat it as having a value of Active.
   * 
   * *
   * 
   * @see SubscriptionStatus
   */
  public SubscriptionStatus getStatus() {
    return this.status;
  }

  /**
   *     * This field contains the status of the Subscription.
   * If this field is absent, treat it as having a value of Active.
   * 
   * *
   * 
   * @see SubscriptionStatus
   */
  public SubscriptionInstance setStatus(SubscriptionStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   *     * This field contains a copy of the Subscription
   *       Parameters of the Manage Collection Subscription
   *       Request message that established this subscription.
   *       This field MUST be present if this message is in
   *       response to a request with and Action field value of
   *       STATUS. This field MAY be present when responding to
   *       any other Action type.
   * 
   * *
   */
  public SubscriptionParameter getSubscriptionParameter() {
    return this.subscriptionParameter;
  }

  /**
   *     * This field contains a copy of the Subscription
   *       Parameters of the Manage Collection Subscription
   *       Request message that established this subscription.
   *       This field MUST be present if this message is in
   *       response to a request with and Action field value of
   *       STATUS. This field MAY be present when responding to
   *       any other Action type.
   * 
   * *
   */
  public SubscriptionInstance setSubscriptionParameter(SubscriptionParameter subscriptionParameter) {
    this.subscriptionParameter = subscriptionParameter;
    return this;
  }

  public void unsetSubscriptionParameter() {
    this.subscriptionParameter = null;
  }

  /** Returns true if field subscriptionParameter is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionParameter() {
    return this.subscriptionParameter != null;
  }

  public void setSubscriptionParameterIsSet(boolean value) {
    if (!value) {
      this.subscriptionParameter = null;
    }
  }

  /**
   *     * This field contains a copy of the Delivery Parameters (if
   *       present) of the Manage Collection Subscription Request
   *       Message that established this subscription. This field is
   *       present if and only if the Producer is willing and able to
   *       push content to the indicated Inbox Service in
   *       fulfillment of the established subscription. (It does not
   *       matter whether the subscription is currently in a
   *       PAUSED state.)
   * 
   * *
   */
  public DeliveryParameter getSubscriptionDeliveryParameter() {
    return this.subscriptionDeliveryParameter;
  }

  /**
   *     * This field contains a copy of the Delivery Parameters (if
   *       present) of the Manage Collection Subscription Request
   *       Message that established this subscription. This field is
   *       present if and only if the Producer is willing and able to
   *       push content to the indicated Inbox Service in
   *       fulfillment of the established subscription. (It does not
   *       matter whether the subscription is currently in a
   *       PAUSED state.)
   * 
   * *
   */
  public SubscriptionInstance setSubscriptionDeliveryParameter(DeliveryParameter subscriptionDeliveryParameter) {
    this.subscriptionDeliveryParameter = subscriptionDeliveryParameter;
    return this;
  }

  public void unsetSubscriptionDeliveryParameter() {
    this.subscriptionDeliveryParameter = null;
  }

  /** Returns true if field subscriptionDeliveryParameter is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionDeliveryParameter() {
    return this.subscriptionDeliveryParameter != null;
  }

  public void setSubscriptionDeliveryParameterIsSet(boolean value) {
    if (!value) {
      this.subscriptionDeliveryParameter = null;
    }
  }

  public int getPollingInstancesSize() {
    return (this.pollingInstances == null) ? 0 : this.pollingInstances.size();
  }

  public java.util.Iterator<PollingInstance> getPollingInstancesIterator() {
    return (this.pollingInstances == null) ? null : this.pollingInstances.iterator();
  }

  public void addToPollingInstances(PollingInstance elem) {
    if (this.pollingInstances == null) {
      this.pollingInstances = new HashSet<PollingInstance>();
    }
    this.pollingInstances.add(elem);
  }

  /**
   *     * Each Poll Instance represents an instance of a Poll
   *       Service that can be contacted to retrieve content
   *       associated with the named subscription. Its subfields
   *       indicate where Poll Request Messages can be sent for
   *       the given subscription. Multiple instances of this field
   *       may be present if there are multiple Poll Services that
   *       can be contacted for content for this subscription. If
   *       this field is absent, this indicates that polling for
   *       subscription content is not supported via TAXII.
   * 
   * *
   */
  public Set<PollingInstance> getPollingInstances() {
    return this.pollingInstances;
  }

  /**
   *     * Each Poll Instance represents an instance of a Poll
   *       Service that can be contacted to retrieve content
   *       associated with the named subscription. Its subfields
   *       indicate where Poll Request Messages can be sent for
   *       the given subscription. Multiple instances of this field
   *       may be present if there are multiple Poll Services that
   *       can be contacted for content for this subscription. If
   *       this field is absent, this indicates that polling for
   *       subscription content is not supported via TAXII.
   * 
   * *
   */
  public SubscriptionInstance setPollingInstances(Set<PollingInstance> pollingInstances) {
    this.pollingInstances = pollingInstances;
    return this;
  }

  public void unsetPollingInstances() {
    this.pollingInstances = null;
  }

  /** Returns true if field pollingInstances is set (has been assigned a value) and false otherwise */
  public boolean isSetPollingInstances() {
    return this.pollingInstances != null;
  }

  public void setPollingInstancesIsSet(boolean value) {
    if (!value) {
      this.pollingInstances = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUBSCRIPTION_ID:
      if (value == null) {
        unsetSubscriptionId();
      } else {
        setSubscriptionId((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((SubscriptionStatus)value);
      }
      break;

    case SUBSCRIPTION_PARAMETER:
      if (value == null) {
        unsetSubscriptionParameter();
      } else {
        setSubscriptionParameter((SubscriptionParameter)value);
      }
      break;

    case SUBSCRIPTION_DELIVERY_PARAMETER:
      if (value == null) {
        unsetSubscriptionDeliveryParameter();
      } else {
        setSubscriptionDeliveryParameter((DeliveryParameter)value);
      }
      break;

    case POLLING_INSTANCES:
      if (value == null) {
        unsetPollingInstances();
      } else {
        setPollingInstances((Set<PollingInstance>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBSCRIPTION_ID:
      return getSubscriptionId();

    case STATUS:
      return getStatus();

    case SUBSCRIPTION_PARAMETER:
      return getSubscriptionParameter();

    case SUBSCRIPTION_DELIVERY_PARAMETER:
      return getSubscriptionDeliveryParameter();

    case POLLING_INSTANCES:
      return getPollingInstances();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUBSCRIPTION_ID:
      return isSetSubscriptionId();
    case STATUS:
      return isSetStatus();
    case SUBSCRIPTION_PARAMETER:
      return isSetSubscriptionParameter();
    case SUBSCRIPTION_DELIVERY_PARAMETER:
      return isSetSubscriptionDeliveryParameter();
    case POLLING_INSTANCES:
      return isSetPollingInstances();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubscriptionInstance)
      return this.equals((SubscriptionInstance)that);
    return false;
  }

  public boolean equals(SubscriptionInstance that) {
    if (that == null)
      return false;

    boolean this_present_subscriptionId = true && this.isSetSubscriptionId();
    boolean that_present_subscriptionId = true && that.isSetSubscriptionId();
    if (this_present_subscriptionId || that_present_subscriptionId) {
      if (!(this_present_subscriptionId && that_present_subscriptionId))
        return false;
      if (!this.subscriptionId.equals(that.subscriptionId))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_subscriptionParameter = true && this.isSetSubscriptionParameter();
    boolean that_present_subscriptionParameter = true && that.isSetSubscriptionParameter();
    if (this_present_subscriptionParameter || that_present_subscriptionParameter) {
      if (!(this_present_subscriptionParameter && that_present_subscriptionParameter))
        return false;
      if (!this.subscriptionParameter.equals(that.subscriptionParameter))
        return false;
    }

    boolean this_present_subscriptionDeliveryParameter = true && this.isSetSubscriptionDeliveryParameter();
    boolean that_present_subscriptionDeliveryParameter = true && that.isSetSubscriptionDeliveryParameter();
    if (this_present_subscriptionDeliveryParameter || that_present_subscriptionDeliveryParameter) {
      if (!(this_present_subscriptionDeliveryParameter && that_present_subscriptionDeliveryParameter))
        return false;
      if (!this.subscriptionDeliveryParameter.equals(that.subscriptionDeliveryParameter))
        return false;
    }

    boolean this_present_pollingInstances = true && this.isSetPollingInstances();
    boolean that_present_pollingInstances = true && that.isSetPollingInstances();
    if (this_present_pollingInstances || that_present_pollingInstances) {
      if (!(this_present_pollingInstances && that_present_pollingInstances))
        return false;
      if (!this.pollingInstances.equals(that.pollingInstances))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubscriptionInstance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubscriptionId()).compareTo(other.isSetSubscriptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionId, other.subscriptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionParameter()).compareTo(other.isSetSubscriptionParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionParameter, other.subscriptionParameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionDeliveryParameter()).compareTo(other.isSetSubscriptionDeliveryParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionDeliveryParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionDeliveryParameter, other.subscriptionDeliveryParameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPollingInstances()).compareTo(other.isSetPollingInstances());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollingInstances()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollingInstances, other.pollingInstances);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubscriptionInstance(");
    boolean first = true;

    sb.append("subscriptionId:");
    if (this.subscriptionId == null) {
      sb.append("null");
    } else {
      sb.append(this.subscriptionId);
    }
    first = false;
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetSubscriptionParameter()) {
      if (!first) sb.append(", ");
      sb.append("subscriptionParameter:");
      if (this.subscriptionParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriptionParameter);
      }
      first = false;
    }
    if (isSetSubscriptionDeliveryParameter()) {
      if (!first) sb.append(", ");
      sb.append("subscriptionDeliveryParameter:");
      if (this.subscriptionDeliveryParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriptionDeliveryParameter);
      }
      first = false;
    }
    if (isSetPollingInstances()) {
      if (!first) sb.append(", ");
      sb.append("pollingInstances:");
      if (this.pollingInstances == null) {
        sb.append("null");
      } else {
        sb.append(this.pollingInstances);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (subscriptionId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subscriptionId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (subscriptionParameter != null) {
      subscriptionParameter.validate();
    }
    if (subscriptionDeliveryParameter != null) {
      subscriptionDeliveryParameter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubscriptionInstanceStandardSchemeFactory implements SchemeFactory {
    public SubscriptionInstanceStandardScheme getScheme() {
      return new SubscriptionInstanceStandardScheme();
    }
  }

  private static class SubscriptionInstanceStandardScheme extends StandardScheme<SubscriptionInstance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubscriptionInstance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBSCRIPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subscriptionId = iprot.readString();
              struct.setSubscriptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = SubscriptionStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUBSCRIPTION_PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.subscriptionParameter = new SubscriptionParameter();
              struct.subscriptionParameter.read(iprot);
              struct.setSubscriptionParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBSCRIPTION_DELIVERY_PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.subscriptionDeliveryParameter = new DeliveryParameter();
              struct.subscriptionDeliveryParameter.read(iprot);
              struct.setSubscriptionDeliveryParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POLLING_INSTANCES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set184 = iprot.readSetBegin();
                struct.pollingInstances = new HashSet<PollingInstance>(2*_set184.size);
                for (int _i185 = 0; _i185 < _set184.size; ++_i185)
                {
                  PollingInstance _elem186;
                  _elem186 = new PollingInstance();
                  _elem186.read(iprot);
                  struct.pollingInstances.add(_elem186);
                }
                iprot.readSetEnd();
              }
              struct.setPollingInstancesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubscriptionInstance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subscriptionId != null) {
        oprot.writeFieldBegin(SUBSCRIPTION_ID_FIELD_DESC);
        oprot.writeString(struct.subscriptionId);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscriptionParameter != null) {
        if (struct.isSetSubscriptionParameter()) {
          oprot.writeFieldBegin(SUBSCRIPTION_PARAMETER_FIELD_DESC);
          struct.subscriptionParameter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscriptionDeliveryParameter != null) {
        if (struct.isSetSubscriptionDeliveryParameter()) {
          oprot.writeFieldBegin(SUBSCRIPTION_DELIVERY_PARAMETER_FIELD_DESC);
          struct.subscriptionDeliveryParameter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pollingInstances != null) {
        if (struct.isSetPollingInstances()) {
          oprot.writeFieldBegin(POLLING_INSTANCES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.pollingInstances.size()));
            for (PollingInstance _iter187 : struct.pollingInstances)
            {
              _iter187.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubscriptionInstanceTupleSchemeFactory implements SchemeFactory {
    public SubscriptionInstanceTupleScheme getScheme() {
      return new SubscriptionInstanceTupleScheme();
    }
  }

  private static class SubscriptionInstanceTupleScheme extends TupleScheme<SubscriptionInstance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubscriptionInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.subscriptionId);
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetSubscriptionParameter()) {
        optionals.set(1);
      }
      if (struct.isSetSubscriptionDeliveryParameter()) {
        optionals.set(2);
      }
      if (struct.isSetPollingInstances()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetSubscriptionParameter()) {
        struct.subscriptionParameter.write(oprot);
      }
      if (struct.isSetSubscriptionDeliveryParameter()) {
        struct.subscriptionDeliveryParameter.write(oprot);
      }
      if (struct.isSetPollingInstances()) {
        {
          oprot.writeI32(struct.pollingInstances.size());
          for (PollingInstance _iter188 : struct.pollingInstances)
          {
            _iter188.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubscriptionInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.subscriptionId = iprot.readString();
      struct.setSubscriptionIdIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.status = SubscriptionStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subscriptionParameter = new SubscriptionParameter();
        struct.subscriptionParameter.read(iprot);
        struct.setSubscriptionParameterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subscriptionDeliveryParameter = new DeliveryParameter();
        struct.subscriptionDeliveryParameter.read(iprot);
        struct.setSubscriptionDeliveryParameterIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set189 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pollingInstances = new HashSet<PollingInstance>(2*_set189.size);
          for (int _i190 = 0; _i190 < _set189.size; ++_i190)
          {
            PollingInstance _elem191;
            _elem191 = new PollingInstance();
            _elem191.read(iprot);
            struct.pollingInstances.add(_elem191);
          }
        }
        struct.setPollingInstancesIsSet(true);
      }
    }
  }

}

