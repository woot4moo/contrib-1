/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * * The TAXII Poll Fulfillment Request is used to collect results from a Poll Service where the result set has
 *   already been created. In general, this is used to collect results using Asynchronous Polling (see Section
 *   3.6.2) or to collect multiple parts of a large result set over a Multi-Part Poll Exchange (see Section 3.6.1).
 * 
 * *
 */
public class PollFulfillmentRequest implements org.apache.thrift.TBase<PollFulfillmentRequest, PollFulfillmentRequest._Fields>, java.io.Serializable, Cloneable, Comparable<PollFulfillmentRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PollFulfillmentRequest");

  private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resultId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_PART_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("resultPartNumber", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PollFulfillmentRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PollFulfillmentRequestTupleSchemeFactory());
  }

  /**
   * * This field identifies the name of the TAXII Data Collection to
   *   which the request applies.
   * 
   * *
   */
  public String collectionName; // required
  /**
   * The ID of the requested result set.
   * 
   * 
   */
  public String resultId; // required
  /**
   * If present, indicates the Result Part that is being collected.
   * 
   * 
   */
  public int resultPartNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field identifies the name of the TAXII Data Collection to
     *   which the request applies.
     * 
     * *
     */
    COLLECTION_NAME((short)1, "collectionName"),
    /**
     * The ID of the requested result set.
     * 
     * 
     */
    RESULT_ID((short)2, "resultId"),
    /**
     * If present, indicates the Result Part that is being collected.
     * 
     * 
     */
    RESULT_PART_NUMBER((short)3, "resultPartNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION_NAME
          return COLLECTION_NAME;
        case 2: // RESULT_ID
          return RESULT_ID;
        case 3: // RESULT_PART_NUMBER
          return RESULT_PART_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULTPARTNUMBER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_ID, new org.apache.thrift.meta_data.FieldMetaData("resultId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_PART_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("resultPartNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PollFulfillmentRequest.class, metaDataMap);
  }

  public PollFulfillmentRequest() {
  }

  public PollFulfillmentRequest(
    String collectionName,
    String resultId,
    int resultPartNumber)
  {
    this();
    this.collectionName = collectionName;
    this.resultId = resultId;
    this.resultPartNumber = resultPartNumber;
    setResultPartNumberIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PollFulfillmentRequest(PollFulfillmentRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCollectionName()) {
      this.collectionName = other.collectionName;
    }
    if (other.isSetResultId()) {
      this.resultId = other.resultId;
    }
    this.resultPartNumber = other.resultPartNumber;
  }

  public PollFulfillmentRequest deepCopy() {
    return new PollFulfillmentRequest(this);
  }

  @Override
  public void clear() {
    this.collectionName = null;
    this.resultId = null;
    setResultPartNumberIsSet(false);
    this.resultPartNumber = 0;
  }

  /**
   * * This field identifies the name of the TAXII Data Collection to
   *   which the request applies.
   * 
   * *
   */
  public String getCollectionName() {
    return this.collectionName;
  }

  /**
   * * This field identifies the name of the TAXII Data Collection to
   *   which the request applies.
   * 
   * *
   */
  public PollFulfillmentRequest setCollectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  public void unsetCollectionName() {
    this.collectionName = null;
  }

  /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionName() {
    return this.collectionName != null;
  }

  public void setCollectionNameIsSet(boolean value) {
    if (!value) {
      this.collectionName = null;
    }
  }

  /**
   * The ID of the requested result set.
   * 
   * 
   */
  public String getResultId() {
    return this.resultId;
  }

  /**
   * The ID of the requested result set.
   * 
   * 
   */
  public PollFulfillmentRequest setResultId(String resultId) {
    this.resultId = resultId;
    return this;
  }

  public void unsetResultId() {
    this.resultId = null;
  }

  /** Returns true if field resultId is set (has been assigned a value) and false otherwise */
  public boolean isSetResultId() {
    return this.resultId != null;
  }

  public void setResultIdIsSet(boolean value) {
    if (!value) {
      this.resultId = null;
    }
  }

  /**
   * If present, indicates the Result Part that is being collected.
   * 
   * 
   */
  public int getResultPartNumber() {
    return this.resultPartNumber;
  }

  /**
   * If present, indicates the Result Part that is being collected.
   * 
   * 
   */
  public PollFulfillmentRequest setResultPartNumber(int resultPartNumber) {
    this.resultPartNumber = resultPartNumber;
    setResultPartNumberIsSet(true);
    return this;
  }

  public void unsetResultPartNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTPARTNUMBER_ISSET_ID);
  }

  /** Returns true if field resultPartNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetResultPartNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULTPARTNUMBER_ISSET_ID);
  }

  public void setResultPartNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTPARTNUMBER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTION_NAME:
      if (value == null) {
        unsetCollectionName();
      } else {
        setCollectionName((String)value);
      }
      break;

    case RESULT_ID:
      if (value == null) {
        unsetResultId();
      } else {
        setResultId((String)value);
      }
      break;

    case RESULT_PART_NUMBER:
      if (value == null) {
        unsetResultPartNumber();
      } else {
        setResultPartNumber((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION_NAME:
      return getCollectionName();

    case RESULT_ID:
      return getResultId();

    case RESULT_PART_NUMBER:
      return Integer.valueOf(getResultPartNumber());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION_NAME:
      return isSetCollectionName();
    case RESULT_ID:
      return isSetResultId();
    case RESULT_PART_NUMBER:
      return isSetResultPartNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PollFulfillmentRequest)
      return this.equals((PollFulfillmentRequest)that);
    return false;
  }

  public boolean equals(PollFulfillmentRequest that) {
    if (that == null)
      return false;

    boolean this_present_collectionName = true && this.isSetCollectionName();
    boolean that_present_collectionName = true && that.isSetCollectionName();
    if (this_present_collectionName || that_present_collectionName) {
      if (!(this_present_collectionName && that_present_collectionName))
        return false;
      if (!this.collectionName.equals(that.collectionName))
        return false;
    }

    boolean this_present_resultId = true && this.isSetResultId();
    boolean that_present_resultId = true && that.isSetResultId();
    if (this_present_resultId || that_present_resultId) {
      if (!(this_present_resultId && that_present_resultId))
        return false;
      if (!this.resultId.equals(that.resultId))
        return false;
    }

    boolean this_present_resultPartNumber = true;
    boolean that_present_resultPartNumber = true;
    if (this_present_resultPartNumber || that_present_resultPartNumber) {
      if (!(this_present_resultPartNumber && that_present_resultPartNumber))
        return false;
      if (this.resultPartNumber != that.resultPartNumber)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PollFulfillmentRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultId()).compareTo(other.isSetResultId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultId, other.resultId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultPartNumber()).compareTo(other.isSetResultPartNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultPartNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultPartNumber, other.resultPartNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PollFulfillmentRequest(");
    boolean first = true;

    sb.append("collectionName:");
    if (this.collectionName == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultId:");
    if (this.resultId == null) {
      sb.append("null");
    } else {
      sb.append(this.resultId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultPartNumber:");
    sb.append(this.resultPartNumber);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (collectionName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'collectionName' was not present! Struct: " + toString());
    }
    if (resultId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'resultPartNumber' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PollFulfillmentRequestStandardSchemeFactory implements SchemeFactory {
    public PollFulfillmentRequestStandardScheme getScheme() {
      return new PollFulfillmentRequestStandardScheme();
    }
  }

  private static class PollFulfillmentRequestStandardScheme extends StandardScheme<PollFulfillmentRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PollFulfillmentRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionName = iprot.readString();
              struct.setCollectionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultId = iprot.readString();
              struct.setResultIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_PART_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultPartNumber = iprot.readI32();
              struct.setResultPartNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetResultPartNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultPartNumber' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PollFulfillmentRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collectionName != null) {
        oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
        oprot.writeString(struct.collectionName);
        oprot.writeFieldEnd();
      }
      if (struct.resultId != null) {
        oprot.writeFieldBegin(RESULT_ID_FIELD_DESC);
        oprot.writeString(struct.resultId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESULT_PART_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.resultPartNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PollFulfillmentRequestTupleSchemeFactory implements SchemeFactory {
    public PollFulfillmentRequestTupleScheme getScheme() {
      return new PollFulfillmentRequestTupleScheme();
    }
  }

  private static class PollFulfillmentRequestTupleScheme extends TupleScheme<PollFulfillmentRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PollFulfillmentRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.collectionName);
      oprot.writeString(struct.resultId);
      oprot.writeI32(struct.resultPartNumber);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PollFulfillmentRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.collectionName = iprot.readString();
      struct.setCollectionNameIsSet(true);
      struct.resultId = iprot.readString();
      struct.setResultIdIsSet(true);
      struct.resultPartNumber = iprot.readI32();
      struct.setResultPartNumberIsSet(true);
    }
  }

}

