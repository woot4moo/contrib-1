/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *  A TAXII Inbox Message is used to push content from one entity to the TAXII Inbox Service of another
 *   entity.
 * *
 */
public class InboxMessage implements org.apache.thrift.TBase<InboxMessage, InboxMessage._Fields>, java.io.Serializable, Cloneable, Comparable<InboxMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InboxMessage");

  private static final org.apache.thrift.protocol.TField DESTINATION_COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("destinationCollectionName", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resultId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_INFORMATION_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionInformation", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RECORD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("recordCount", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENT_BLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("contentBlock", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InboxMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InboxMessageTupleSchemeFactory());
  }

  /**
   * * This field indicates the name of the TAXII Data Collection(s)
   *   to which this message’s content is being sent.
   * *
   */
  public Set<String> destinationCollectionName; // optional
  /**
   * * This field contains prose information for the message
   *   recipient. This message is not required to be machine
   *   readable and is usually a message for a human operator.
   * 
   * *
   */
  public String message; // optional
  /**
   * * This field indicates the Result ID of the result set of which
   *   this message's content is a part. This is normally used
   *   when a Producer is pushing Asynchronous Poll results (see
   *   Section 3.6.2.2).
   * 
   * *
   */
  public String resultId; // optional
  /**
   * This field is only present if this message is being sent to
   * provide content in fulfillment of an existing subscription.
   * Absence of this field indicates that this message is not
   * being sent in fulfillment of a subscription
   */
  public InboxSubscriptionInformation subscriptionInformation; // optional
  /**
   * * Indicates the number of applicable records for the given
   *   response, which MUST be greater than or equal to the
   *   number of content records returned in this message's
   *   Content Block(s). This field SHOULD be present in all Poll
   *   Response messages.
   * *
   */
  public RecordCount recordCount; // optional
  /**
   * * This field contains a piece of content and additional
   *   information related to the content. This field MAY appear
   *   0 or more times. See Section 0 for the definition of a
   *   Content Block.
   * 
   * *
   */
  public List<ContentBlock> contentBlock; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field indicates the name of the TAXII Data Collection(s)
     *   to which this message’s content is being sent.
     * *
     */
    DESTINATION_COLLECTION_NAME((short)1, "destinationCollectionName"),
    /**
     * * This field contains prose information for the message
     *   recipient. This message is not required to be machine
     *   readable and is usually a message for a human operator.
     * 
     * *
     */
    MESSAGE((short)2, "message"),
    /**
     * * This field indicates the Result ID of the result set of which
     *   this message's content is a part. This is normally used
     *   when a Producer is pushing Asynchronous Poll results (see
     *   Section 3.6.2.2).
     * 
     * *
     */
    RESULT_ID((short)3, "resultId"),
    /**
     * This field is only present if this message is being sent to
     * provide content in fulfillment of an existing subscription.
     * Absence of this field indicates that this message is not
     * being sent in fulfillment of a subscription
     */
    SUBSCRIPTION_INFORMATION((short)4, "subscriptionInformation"),
    /**
     * * Indicates the number of applicable records for the given
     *   response, which MUST be greater than or equal to the
     *   number of content records returned in this message's
     *   Content Block(s). This field SHOULD be present in all Poll
     *   Response messages.
     * *
     */
    RECORD_COUNT((short)5, "recordCount"),
    /**
     * * This field contains a piece of content and additional
     *   information related to the content. This field MAY appear
     *   0 or more times. See Section 0 for the definition of a
     *   Content Block.
     * 
     * *
     */
    CONTENT_BLOCK((short)6, "contentBlock");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESTINATION_COLLECTION_NAME
          return DESTINATION_COLLECTION_NAME;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // RESULT_ID
          return RESULT_ID;
        case 4: // SUBSCRIPTION_INFORMATION
          return SUBSCRIPTION_INFORMATION;
        case 5: // RECORD_COUNT
          return RECORD_COUNT;
        case 6: // CONTENT_BLOCK
          return CONTENT_BLOCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.DESTINATION_COLLECTION_NAME,_Fields.MESSAGE,_Fields.RESULT_ID,_Fields.SUBSCRIPTION_INFORMATION,_Fields.RECORD_COUNT,_Fields.CONTENT_BLOCK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESTINATION_COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("destinationCollectionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_ID, new org.apache.thrift.meta_data.FieldMetaData("resultId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIPTION_INFORMATION, new org.apache.thrift.meta_data.FieldMetaData("subscriptionInformation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InboxSubscriptionInformation.class)));
    tmpMap.put(_Fields.RECORD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("recordCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordCount.class)));
    tmpMap.put(_Fields.CONTENT_BLOCK, new org.apache.thrift.meta_data.FieldMetaData("contentBlock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContentBlock.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InboxMessage.class, metaDataMap);
  }

  public InboxMessage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InboxMessage(InboxMessage other) {
    if (other.isSetDestinationCollectionName()) {
      Set<String> __this__destinationCollectionName = new HashSet<String>(other.destinationCollectionName);
      this.destinationCollectionName = __this__destinationCollectionName;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetResultId()) {
      this.resultId = other.resultId;
    }
    if (other.isSetSubscriptionInformation()) {
      this.subscriptionInformation = new InboxSubscriptionInformation(other.subscriptionInformation);
    }
    if (other.isSetRecordCount()) {
      this.recordCount = new RecordCount(other.recordCount);
    }
    if (other.isSetContentBlock()) {
      List<ContentBlock> __this__contentBlock = new ArrayList<ContentBlock>(other.contentBlock.size());
      for (ContentBlock other_element : other.contentBlock) {
        __this__contentBlock.add(new ContentBlock(other_element));
      }
      this.contentBlock = __this__contentBlock;
    }
  }

  public InboxMessage deepCopy() {
    return new InboxMessage(this);
  }

  @Override
  public void clear() {
    this.destinationCollectionName = null;
    this.message = null;
    this.resultId = null;
    this.subscriptionInformation = null;
    this.recordCount = null;
    this.contentBlock = null;
  }

  public int getDestinationCollectionNameSize() {
    return (this.destinationCollectionName == null) ? 0 : this.destinationCollectionName.size();
  }

  public java.util.Iterator<String> getDestinationCollectionNameIterator() {
    return (this.destinationCollectionName == null) ? null : this.destinationCollectionName.iterator();
  }

  public void addToDestinationCollectionName(String elem) {
    if (this.destinationCollectionName == null) {
      this.destinationCollectionName = new HashSet<String>();
    }
    this.destinationCollectionName.add(elem);
  }

  /**
   * * This field indicates the name of the TAXII Data Collection(s)
   *   to which this message’s content is being sent.
   * *
   */
  public Set<String> getDestinationCollectionName() {
    return this.destinationCollectionName;
  }

  /**
   * * This field indicates the name of the TAXII Data Collection(s)
   *   to which this message’s content is being sent.
   * *
   */
  public InboxMessage setDestinationCollectionName(Set<String> destinationCollectionName) {
    this.destinationCollectionName = destinationCollectionName;
    return this;
  }

  public void unsetDestinationCollectionName() {
    this.destinationCollectionName = null;
  }

  /** Returns true if field destinationCollectionName is set (has been assigned a value) and false otherwise */
  public boolean isSetDestinationCollectionName() {
    return this.destinationCollectionName != null;
  }

  public void setDestinationCollectionNameIsSet(boolean value) {
    if (!value) {
      this.destinationCollectionName = null;
    }
  }

  /**
   * * This field contains prose information for the message
   *   recipient. This message is not required to be machine
   *   readable and is usually a message for a human operator.
   * 
   * *
   */
  public String getMessage() {
    return this.message;
  }

  /**
   * * This field contains prose information for the message
   *   recipient. This message is not required to be machine
   *   readable and is usually a message for a human operator.
   * 
   * *
   */
  public InboxMessage setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  /**
   * * This field indicates the Result ID of the result set of which
   *   this message's content is a part. This is normally used
   *   when a Producer is pushing Asynchronous Poll results (see
   *   Section 3.6.2.2).
   * 
   * *
   */
  public String getResultId() {
    return this.resultId;
  }

  /**
   * * This field indicates the Result ID of the result set of which
   *   this message's content is a part. This is normally used
   *   when a Producer is pushing Asynchronous Poll results (see
   *   Section 3.6.2.2).
   * 
   * *
   */
  public InboxMessage setResultId(String resultId) {
    this.resultId = resultId;
    return this;
  }

  public void unsetResultId() {
    this.resultId = null;
  }

  /** Returns true if field resultId is set (has been assigned a value) and false otherwise */
  public boolean isSetResultId() {
    return this.resultId != null;
  }

  public void setResultIdIsSet(boolean value) {
    if (!value) {
      this.resultId = null;
    }
  }

  /**
   * This field is only present if this message is being sent to
   * provide content in fulfillment of an existing subscription.
   * Absence of this field indicates that this message is not
   * being sent in fulfillment of a subscription
   */
  public InboxSubscriptionInformation getSubscriptionInformation() {
    return this.subscriptionInformation;
  }

  /**
   * This field is only present if this message is being sent to
   * provide content in fulfillment of an existing subscription.
   * Absence of this field indicates that this message is not
   * being sent in fulfillment of a subscription
   */
  public InboxMessage setSubscriptionInformation(InboxSubscriptionInformation subscriptionInformation) {
    this.subscriptionInformation = subscriptionInformation;
    return this;
  }

  public void unsetSubscriptionInformation() {
    this.subscriptionInformation = null;
  }

  /** Returns true if field subscriptionInformation is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionInformation() {
    return this.subscriptionInformation != null;
  }

  public void setSubscriptionInformationIsSet(boolean value) {
    if (!value) {
      this.subscriptionInformation = null;
    }
  }

  /**
   * * Indicates the number of applicable records for the given
   *   response, which MUST be greater than or equal to the
   *   number of content records returned in this message's
   *   Content Block(s). This field SHOULD be present in all Poll
   *   Response messages.
   * *
   */
  public RecordCount getRecordCount() {
    return this.recordCount;
  }

  /**
   * * Indicates the number of applicable records for the given
   *   response, which MUST be greater than or equal to the
   *   number of content records returned in this message's
   *   Content Block(s). This field SHOULD be present in all Poll
   *   Response messages.
   * *
   */
  public InboxMessage setRecordCount(RecordCount recordCount) {
    this.recordCount = recordCount;
    return this;
  }

  public void unsetRecordCount() {
    this.recordCount = null;
  }

  /** Returns true if field recordCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordCount() {
    return this.recordCount != null;
  }

  public void setRecordCountIsSet(boolean value) {
    if (!value) {
      this.recordCount = null;
    }
  }

  public int getContentBlockSize() {
    return (this.contentBlock == null) ? 0 : this.contentBlock.size();
  }

  public java.util.Iterator<ContentBlock> getContentBlockIterator() {
    return (this.contentBlock == null) ? null : this.contentBlock.iterator();
  }

  public void addToContentBlock(ContentBlock elem) {
    if (this.contentBlock == null) {
      this.contentBlock = new ArrayList<ContentBlock>();
    }
    this.contentBlock.add(elem);
  }

  /**
   * * This field contains a piece of content and additional
   *   information related to the content. This field MAY appear
   *   0 or more times. See Section 0 for the definition of a
   *   Content Block.
   * 
   * *
   */
  public List<ContentBlock> getContentBlock() {
    return this.contentBlock;
  }

  /**
   * * This field contains a piece of content and additional
   *   information related to the content. This field MAY appear
   *   0 or more times. See Section 0 for the definition of a
   *   Content Block.
   * 
   * *
   */
  public InboxMessage setContentBlock(List<ContentBlock> contentBlock) {
    this.contentBlock = contentBlock;
    return this;
  }

  public void unsetContentBlock() {
    this.contentBlock = null;
  }

  /** Returns true if field contentBlock is set (has been assigned a value) and false otherwise */
  public boolean isSetContentBlock() {
    return this.contentBlock != null;
  }

  public void setContentBlockIsSet(boolean value) {
    if (!value) {
      this.contentBlock = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DESTINATION_COLLECTION_NAME:
      if (value == null) {
        unsetDestinationCollectionName();
      } else {
        setDestinationCollectionName((Set<String>)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case RESULT_ID:
      if (value == null) {
        unsetResultId();
      } else {
        setResultId((String)value);
      }
      break;

    case SUBSCRIPTION_INFORMATION:
      if (value == null) {
        unsetSubscriptionInformation();
      } else {
        setSubscriptionInformation((InboxSubscriptionInformation)value);
      }
      break;

    case RECORD_COUNT:
      if (value == null) {
        unsetRecordCount();
      } else {
        setRecordCount((RecordCount)value);
      }
      break;

    case CONTENT_BLOCK:
      if (value == null) {
        unsetContentBlock();
      } else {
        setContentBlock((List<ContentBlock>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DESTINATION_COLLECTION_NAME:
      return getDestinationCollectionName();

    case MESSAGE:
      return getMessage();

    case RESULT_ID:
      return getResultId();

    case SUBSCRIPTION_INFORMATION:
      return getSubscriptionInformation();

    case RECORD_COUNT:
      return getRecordCount();

    case CONTENT_BLOCK:
      return getContentBlock();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DESTINATION_COLLECTION_NAME:
      return isSetDestinationCollectionName();
    case MESSAGE:
      return isSetMessage();
    case RESULT_ID:
      return isSetResultId();
    case SUBSCRIPTION_INFORMATION:
      return isSetSubscriptionInformation();
    case RECORD_COUNT:
      return isSetRecordCount();
    case CONTENT_BLOCK:
      return isSetContentBlock();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InboxMessage)
      return this.equals((InboxMessage)that);
    return false;
  }

  public boolean equals(InboxMessage that) {
    if (that == null)
      return false;

    boolean this_present_destinationCollectionName = true && this.isSetDestinationCollectionName();
    boolean that_present_destinationCollectionName = true && that.isSetDestinationCollectionName();
    if (this_present_destinationCollectionName || that_present_destinationCollectionName) {
      if (!(this_present_destinationCollectionName && that_present_destinationCollectionName))
        return false;
      if (!this.destinationCollectionName.equals(that.destinationCollectionName))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_resultId = true && this.isSetResultId();
    boolean that_present_resultId = true && that.isSetResultId();
    if (this_present_resultId || that_present_resultId) {
      if (!(this_present_resultId && that_present_resultId))
        return false;
      if (!this.resultId.equals(that.resultId))
        return false;
    }

    boolean this_present_subscriptionInformation = true && this.isSetSubscriptionInformation();
    boolean that_present_subscriptionInformation = true && that.isSetSubscriptionInformation();
    if (this_present_subscriptionInformation || that_present_subscriptionInformation) {
      if (!(this_present_subscriptionInformation && that_present_subscriptionInformation))
        return false;
      if (!this.subscriptionInformation.equals(that.subscriptionInformation))
        return false;
    }

    boolean this_present_recordCount = true && this.isSetRecordCount();
    boolean that_present_recordCount = true && that.isSetRecordCount();
    if (this_present_recordCount || that_present_recordCount) {
      if (!(this_present_recordCount && that_present_recordCount))
        return false;
      if (!this.recordCount.equals(that.recordCount))
        return false;
    }

    boolean this_present_contentBlock = true && this.isSetContentBlock();
    boolean that_present_contentBlock = true && that.isSetContentBlock();
    if (this_present_contentBlock || that_present_contentBlock) {
      if (!(this_present_contentBlock && that_present_contentBlock))
        return false;
      if (!this.contentBlock.equals(that.contentBlock))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(InboxMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDestinationCollectionName()).compareTo(other.isSetDestinationCollectionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestinationCollectionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinationCollectionName, other.destinationCollectionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultId()).compareTo(other.isSetResultId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultId, other.resultId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionInformation()).compareTo(other.isSetSubscriptionInformation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionInformation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionInformation, other.subscriptionInformation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordCount()).compareTo(other.isSetRecordCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordCount, other.recordCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentBlock()).compareTo(other.isSetContentBlock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentBlock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentBlock, other.contentBlock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InboxMessage(");
    boolean first = true;

    if (isSetDestinationCollectionName()) {
      sb.append("destinationCollectionName:");
      if (this.destinationCollectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.destinationCollectionName);
      }
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetResultId()) {
      if (!first) sb.append(", ");
      sb.append("resultId:");
      if (this.resultId == null) {
        sb.append("null");
      } else {
        sb.append(this.resultId);
      }
      first = false;
    }
    if (isSetSubscriptionInformation()) {
      if (!first) sb.append(", ");
      sb.append("subscriptionInformation:");
      if (this.subscriptionInformation == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriptionInformation);
      }
      first = false;
    }
    if (isSetRecordCount()) {
      if (!first) sb.append(", ");
      sb.append("recordCount:");
      if (this.recordCount == null) {
        sb.append("null");
      } else {
        sb.append(this.recordCount);
      }
      first = false;
    }
    if (isSetContentBlock()) {
      if (!first) sb.append(", ");
      sb.append("contentBlock:");
      if (this.contentBlock == null) {
        sb.append("null");
      } else {
        sb.append(this.contentBlock);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (subscriptionInformation != null) {
      subscriptionInformation.validate();
    }
    if (recordCount != null) {
      recordCount.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InboxMessageStandardSchemeFactory implements SchemeFactory {
    public InboxMessageStandardScheme getScheme() {
      return new InboxMessageStandardScheme();
    }
  }

  private static class InboxMessageStandardScheme extends StandardScheme<InboxMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InboxMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DESTINATION_COLLECTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set216 = iprot.readSetBegin();
                struct.destinationCollectionName = new HashSet<String>(2*_set216.size);
                for (int _i217 = 0; _i217 < _set216.size; ++_i217)
                {
                  String _elem218;
                  _elem218 = iprot.readString();
                  struct.destinationCollectionName.add(_elem218);
                }
                iprot.readSetEnd();
              }
              struct.setDestinationCollectionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultId = iprot.readString();
              struct.setResultIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBSCRIPTION_INFORMATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.subscriptionInformation = new InboxSubscriptionInformation();
              struct.subscriptionInformation.read(iprot);
              struct.setSubscriptionInformationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECORD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recordCount = new RecordCount();
              struct.recordCount.read(iprot);
              struct.setRecordCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENT_BLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list219 = iprot.readListBegin();
                struct.contentBlock = new ArrayList<ContentBlock>(_list219.size);
                for (int _i220 = 0; _i220 < _list219.size; ++_i220)
                {
                  ContentBlock _elem221;
                  _elem221 = new ContentBlock();
                  _elem221.read(iprot);
                  struct.contentBlock.add(_elem221);
                }
                iprot.readListEnd();
              }
              struct.setContentBlockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InboxMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.destinationCollectionName != null) {
        if (struct.isSetDestinationCollectionName()) {
          oprot.writeFieldBegin(DESTINATION_COLLECTION_NAME_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.destinationCollectionName.size()));
            for (String _iter222 : struct.destinationCollectionName)
            {
              oprot.writeString(_iter222);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultId != null) {
        if (struct.isSetResultId()) {
          oprot.writeFieldBegin(RESULT_ID_FIELD_DESC);
          oprot.writeString(struct.resultId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscriptionInformation != null) {
        if (struct.isSetSubscriptionInformation()) {
          oprot.writeFieldBegin(SUBSCRIPTION_INFORMATION_FIELD_DESC);
          struct.subscriptionInformation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recordCount != null) {
        if (struct.isSetRecordCount()) {
          oprot.writeFieldBegin(RECORD_COUNT_FIELD_DESC);
          struct.recordCount.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentBlock != null) {
        if (struct.isSetContentBlock()) {
          oprot.writeFieldBegin(CONTENT_BLOCK_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.contentBlock.size()));
            for (ContentBlock _iter223 : struct.contentBlock)
            {
              _iter223.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InboxMessageTupleSchemeFactory implements SchemeFactory {
    public InboxMessageTupleScheme getScheme() {
      return new InboxMessageTupleScheme();
    }
  }

  private static class InboxMessageTupleScheme extends TupleScheme<InboxMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InboxMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDestinationCollectionName()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetResultId()) {
        optionals.set(2);
      }
      if (struct.isSetSubscriptionInformation()) {
        optionals.set(3);
      }
      if (struct.isSetRecordCount()) {
        optionals.set(4);
      }
      if (struct.isSetContentBlock()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDestinationCollectionName()) {
        {
          oprot.writeI32(struct.destinationCollectionName.size());
          for (String _iter224 : struct.destinationCollectionName)
          {
            oprot.writeString(_iter224);
          }
        }
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetResultId()) {
        oprot.writeString(struct.resultId);
      }
      if (struct.isSetSubscriptionInformation()) {
        struct.subscriptionInformation.write(oprot);
      }
      if (struct.isSetRecordCount()) {
        struct.recordCount.write(oprot);
      }
      if (struct.isSetContentBlock()) {
        {
          oprot.writeI32(struct.contentBlock.size());
          for (ContentBlock _iter225 : struct.contentBlock)
          {
            _iter225.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InboxMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set226 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.destinationCollectionName = new HashSet<String>(2*_set226.size);
          for (int _i227 = 0; _i227 < _set226.size; ++_i227)
          {
            String _elem228;
            _elem228 = iprot.readString();
            struct.destinationCollectionName.add(_elem228);
          }
        }
        struct.setDestinationCollectionNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resultId = iprot.readString();
        struct.setResultIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subscriptionInformation = new InboxSubscriptionInformation();
        struct.subscriptionInformation.read(iprot);
        struct.setSubscriptionInformationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recordCount = new RecordCount();
        struct.recordCount.read(iprot);
        struct.setRecordCountIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contentBlock = new ArrayList<ContentBlock>(_list229.size);
          for (int _i230 = 0; _i230 < _list229.size; ++_i230)
          {
            ContentBlock _elem231;
            _elem231 = new ContentBlock();
            _elem231.read(iprot);
            struct.contentBlock.add(_elem231);
          }
        }
        struct.setContentBlockIsSet(true);
      }
    }
  }

}

