/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A TAXII Content Block contains a piece of content consisting of structured cyber threat information.
 * 
 */
public class ContentBlock implements org.apache.thrift.TBase<ContentBlock, ContentBlock._Fields>, java.io.Serializable, Cloneable, Comparable<ContentBlock> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContentBlock");

  private static final org.apache.thrift.protocol.TField CONTENT_BINDING_FIELD_DESC = new org.apache.thrift.protocol.TField("contentBinding", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("timestampLabel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PADDING_FIELD_DESC = new org.apache.thrift.protocol.TField("padding", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContentBlockStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContentBlockTupleSchemeFactory());
  }

  public ContentBinding contentBinding; // required
  /**
   * This field contains a piece of content of the type specified
   * by the Content Binding.
   */
  public String content; // required
  /**
   * This field contains a Timestamp Label associated with this
   * Content Block. This field is only relevant if the content
   * came from a TAXII Data Feed. It is at the sender's
   * discretion as to whether this is included.
   */
  public String timestampLabel; // optional
  /**
   * This field contains prose information for the message
   * recipient. This message is not required to be machine
   * readable and is usually a message for a human operator.
   */
  public String message; // optional
  /**
   * This field contains an arbitrary amount of padding for this
   * Content Block. This is typically used to obfuscate the size
   * of the Content Block when the Content is encrypted. This
   * field MUST be ignored when processing a Content Block.
   */
  public String padding; // optional
  /**
   * This field contains a signature associated with this Content
   * Block. The scope of this field is limited to the Content Block
   * that contains this field.
   */
  public String signature; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTENT_BINDING((short)1, "contentBinding"),
    /**
     * This field contains a piece of content of the type specified
     * by the Content Binding.
     */
    CONTENT((short)2, "content"),
    /**
     * This field contains a Timestamp Label associated with this
     * Content Block. This field is only relevant if the content
     * came from a TAXII Data Feed. It is at the sender's
     * discretion as to whether this is included.
     */
    TIMESTAMP_LABEL((short)3, "timestampLabel"),
    /**
     * This field contains prose information for the message
     * recipient. This message is not required to be machine
     * readable and is usually a message for a human operator.
     */
    MESSAGE((short)4, "message"),
    /**
     * This field contains an arbitrary amount of padding for this
     * Content Block. This is typically used to obfuscate the size
     * of the Content Block when the Content is encrypted. This
     * field MUST be ignored when processing a Content Block.
     */
    PADDING((short)5, "padding"),
    /**
     * This field contains a signature associated with this Content
     * Block. The scope of this field is limited to the Content Block
     * that contains this field.
     */
    SIGNATURE((short)6, "signature");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTENT_BINDING
          return CONTENT_BINDING;
        case 2: // CONTENT
          return CONTENT;
        case 3: // TIMESTAMP_LABEL
          return TIMESTAMP_LABEL;
        case 4: // MESSAGE
          return MESSAGE;
        case 5: // PADDING
          return PADDING;
        case 6: // SIGNATURE
          return SIGNATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TIMESTAMP_LABEL,_Fields.MESSAGE,_Fields.PADDING,_Fields.SIGNATURE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTENT_BINDING, new org.apache.thrift.meta_data.FieldMetaData("contentBinding", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContentBinding.class)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("timestampLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TimestampLabel")));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PADDING, new org.apache.thrift.meta_data.FieldMetaData("padding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContentBlock.class, metaDataMap);
  }

  public ContentBlock() {
  }

  public ContentBlock(
    ContentBinding contentBinding,
    String content)
  {
    this();
    this.contentBinding = contentBinding;
    this.content = content;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContentBlock(ContentBlock other) {
    if (other.isSetContentBinding()) {
      this.contentBinding = new ContentBinding(other.contentBinding);
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetTimestampLabel()) {
      this.timestampLabel = other.timestampLabel;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetPadding()) {
      this.padding = other.padding;
    }
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
  }

  public ContentBlock deepCopy() {
    return new ContentBlock(this);
  }

  @Override
  public void clear() {
    this.contentBinding = null;
    this.content = null;
    this.timestampLabel = null;
    this.message = null;
    this.padding = null;
    this.signature = null;
  }

  public ContentBinding getContentBinding() {
    return this.contentBinding;
  }

  public ContentBlock setContentBinding(ContentBinding contentBinding) {
    this.contentBinding = contentBinding;
    return this;
  }

  public void unsetContentBinding() {
    this.contentBinding = null;
  }

  /** Returns true if field contentBinding is set (has been assigned a value) and false otherwise */
  public boolean isSetContentBinding() {
    return this.contentBinding != null;
  }

  public void setContentBindingIsSet(boolean value) {
    if (!value) {
      this.contentBinding = null;
    }
  }

  /**
   * This field contains a piece of content of the type specified
   * by the Content Binding.
   */
  public String getContent() {
    return this.content;
  }

  /**
   * This field contains a piece of content of the type specified
   * by the Content Binding.
   */
  public ContentBlock setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  /**
   * This field contains a Timestamp Label associated with this
   * Content Block. This field is only relevant if the content
   * came from a TAXII Data Feed. It is at the sender's
   * discretion as to whether this is included.
   */
  public String getTimestampLabel() {
    return this.timestampLabel;
  }

  /**
   * This field contains a Timestamp Label associated with this
   * Content Block. This field is only relevant if the content
   * came from a TAXII Data Feed. It is at the sender's
   * discretion as to whether this is included.
   */
  public ContentBlock setTimestampLabel(String timestampLabel) {
    this.timestampLabel = timestampLabel;
    return this;
  }

  public void unsetTimestampLabel() {
    this.timestampLabel = null;
  }

  /** Returns true if field timestampLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestampLabel() {
    return this.timestampLabel != null;
  }

  public void setTimestampLabelIsSet(boolean value) {
    if (!value) {
      this.timestampLabel = null;
    }
  }

  /**
   * This field contains prose information for the message
   * recipient. This message is not required to be machine
   * readable and is usually a message for a human operator.
   */
  public String getMessage() {
    return this.message;
  }

  /**
   * This field contains prose information for the message
   * recipient. This message is not required to be machine
   * readable and is usually a message for a human operator.
   */
  public ContentBlock setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  /**
   * This field contains an arbitrary amount of padding for this
   * Content Block. This is typically used to obfuscate the size
   * of the Content Block when the Content is encrypted. This
   * field MUST be ignored when processing a Content Block.
   */
  public String getPadding() {
    return this.padding;
  }

  /**
   * This field contains an arbitrary amount of padding for this
   * Content Block. This is typically used to obfuscate the size
   * of the Content Block when the Content is encrypted. This
   * field MUST be ignored when processing a Content Block.
   */
  public ContentBlock setPadding(String padding) {
    this.padding = padding;
    return this;
  }

  public void unsetPadding() {
    this.padding = null;
  }

  /** Returns true if field padding is set (has been assigned a value) and false otherwise */
  public boolean isSetPadding() {
    return this.padding != null;
  }

  public void setPaddingIsSet(boolean value) {
    if (!value) {
      this.padding = null;
    }
  }

  /**
   * This field contains a signature associated with this Content
   * Block. The scope of this field is limited to the Content Block
   * that contains this field.
   */
  public String getSignature() {
    return this.signature;
  }

  /**
   * This field contains a signature associated with this Content
   * Block. The scope of this field is limited to the Content Block
   * that contains this field.
   */
  public ContentBlock setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTENT_BINDING:
      if (value == null) {
        unsetContentBinding();
      } else {
        setContentBinding((ContentBinding)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case TIMESTAMP_LABEL:
      if (value == null) {
        unsetTimestampLabel();
      } else {
        setTimestampLabel((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case PADDING:
      if (value == null) {
        unsetPadding();
      } else {
        setPadding((String)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTENT_BINDING:
      return getContentBinding();

    case CONTENT:
      return getContent();

    case TIMESTAMP_LABEL:
      return getTimestampLabel();

    case MESSAGE:
      return getMessage();

    case PADDING:
      return getPadding();

    case SIGNATURE:
      return getSignature();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTENT_BINDING:
      return isSetContentBinding();
    case CONTENT:
      return isSetContent();
    case TIMESTAMP_LABEL:
      return isSetTimestampLabel();
    case MESSAGE:
      return isSetMessage();
    case PADDING:
      return isSetPadding();
    case SIGNATURE:
      return isSetSignature();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContentBlock)
      return this.equals((ContentBlock)that);
    return false;
  }

  public boolean equals(ContentBlock that) {
    if (that == null)
      return false;

    boolean this_present_contentBinding = true && this.isSetContentBinding();
    boolean that_present_contentBinding = true && that.isSetContentBinding();
    if (this_present_contentBinding || that_present_contentBinding) {
      if (!(this_present_contentBinding && that_present_contentBinding))
        return false;
      if (!this.contentBinding.equals(that.contentBinding))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_timestampLabel = true && this.isSetTimestampLabel();
    boolean that_present_timestampLabel = true && that.isSetTimestampLabel();
    if (this_present_timestampLabel || that_present_timestampLabel) {
      if (!(this_present_timestampLabel && that_present_timestampLabel))
        return false;
      if (!this.timestampLabel.equals(that.timestampLabel))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_padding = true && this.isSetPadding();
    boolean that_present_padding = true && that.isSetPadding();
    if (this_present_padding || that_present_padding) {
      if (!(this_present_padding && that_present_padding))
        return false;
      if (!this.padding.equals(that.padding))
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ContentBlock other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContentBinding()).compareTo(other.isSetContentBinding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentBinding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentBinding, other.contentBinding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestampLabel()).compareTo(other.isSetTimestampLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestampLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestampLabel, other.timestampLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPadding()).compareTo(other.isSetPadding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPadding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.padding, other.padding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContentBlock(");
    boolean first = true;

    sb.append("contentBinding:");
    if (this.contentBinding == null) {
      sb.append("null");
    } else {
      sb.append(this.contentBinding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (isSetTimestampLabel()) {
      if (!first) sb.append(", ");
      sb.append("timestampLabel:");
      if (this.timestampLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.timestampLabel);
      }
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetPadding()) {
      if (!first) sb.append(", ");
      sb.append("padding:");
      if (this.padding == null) {
        sb.append("null");
      } else {
        sb.append(this.padding);
      }
      first = false;
    }
    if (isSetSignature()) {
      if (!first) sb.append(", ");
      sb.append("signature:");
      if (this.signature == null) {
        sb.append("null");
      } else {
        sb.append(this.signature);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (contentBinding == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentBinding' was not present! Struct: " + toString());
    }
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (contentBinding != null) {
      contentBinding.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContentBlockStandardSchemeFactory implements SchemeFactory {
    public ContentBlockStandardScheme getScheme() {
      return new ContentBlockStandardScheme();
    }
  }

  private static class ContentBlockStandardScheme extends StandardScheme<ContentBlock> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContentBlock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTENT_BINDING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contentBinding = new ContentBinding();
              struct.contentBinding.read(iprot);
              struct.setContentBindingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestampLabel = iprot.readString();
              struct.setTimestampLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PADDING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.padding = iprot.readString();
              struct.setPaddingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContentBlock struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contentBinding != null) {
        oprot.writeFieldBegin(CONTENT_BINDING_FIELD_DESC);
        struct.contentBinding.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.timestampLabel != null) {
        if (struct.isSetTimestampLabel()) {
          oprot.writeFieldBegin(TIMESTAMP_LABEL_FIELD_DESC);
          oprot.writeString(struct.timestampLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.padding != null) {
        if (struct.isSetPadding()) {
          oprot.writeFieldBegin(PADDING_FIELD_DESC);
          oprot.writeString(struct.padding);
          oprot.writeFieldEnd();
        }
      }
      if (struct.signature != null) {
        if (struct.isSetSignature()) {
          oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.signature);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContentBlockTupleSchemeFactory implements SchemeFactory {
    public ContentBlockTupleScheme getScheme() {
      return new ContentBlockTupleScheme();
    }
  }

  private static class ContentBlockTupleScheme extends TupleScheme<ContentBlock> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContentBlock struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.contentBinding.write(oprot);
      oprot.writeString(struct.content);
      BitSet optionals = new BitSet();
      if (struct.isSetTimestampLabel()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetPadding()) {
        optionals.set(2);
      }
      if (struct.isSetSignature()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTimestampLabel()) {
        oprot.writeString(struct.timestampLabel);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetPadding()) {
        oprot.writeString(struct.padding);
      }
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContentBlock struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.contentBinding = new ContentBinding();
      struct.contentBinding.read(iprot);
      struct.setContentBindingIsSet(true);
      struct.content = iprot.readString();
      struct.setContentIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.timestampLabel = iprot.readString();
        struct.setTimestampLabelIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.padding = iprot.readString();
        struct.setPaddingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
    }
  }

}

