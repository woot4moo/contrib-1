/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Represents a service as defined by the TAXII specification.
 * 
 */
public class ServiceInstance implements org.apache.thrift.TBase<ServiceInstance, ServiceInstance._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceInstance> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceInstance");

  private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceVersion", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROTOCOL_BINDING_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolBinding", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SERVICE_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceAddress", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MESSAGE_BINDINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("messageBindings", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SUPPORTED_QUERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("supportedQueries", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField INBOX_SERVICE_ACCEPTED_CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("inboxServiceAcceptedContents", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField IS_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isAvailable", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceInstanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceInstanceTupleSchemeFactory());
  }

  /**
   * * This field MAY appear any number of times (including 0),
   *   each time identifying a different instance of a TAXII Service.
   *   This field has several sub-fields. Absence of this field
   *   indicates that there are no TAXII Services that can be
   *   revealed to the requester
   * *
   * 
   * @see ServiceType
   */
  public ServiceType serviceType; // required
  /**
   * * This field identifies the TAXII Services Specification to which
   *   this Service conforms. This MUST be a TAXII Services Version
   *   ID as defined in a TAXII Services Specification.
   * *
   */
  public String serviceVersion; // required
  /**
   *     * This field identifies the protocol binding supported by this
   *       Service. This MUST be a TAXII Protocol Binding Version ID as
   *       defined in a TAXII Protocol Binding Specification or by a third
   *       party
   * *
   */
  public String protocolBinding; // required
  /**
   * * This field identifies the network address that can be used to
   *   contact TAXII Daemon that hosts this Service. The Service
   *   Address MUST use a format appropriate to the Protocol
   *   Binding field value.
   * *
   */
  public String serviceAddress; // required
  /**
   *     * This field identifies the message bindings supported by this
   *       Service instance. Each message binding MUST be a TAXII
   *       Message Binding Version ID as defined in a TAXII Message
   *       Binding Specification or by a third party.
   * *
   */
  public List<String> messageBindings; // required
  /**
   *     * This field indicates that the service supports a particular
   *       format of Query expression. This field SHOULD NOT be
   *       present for any Service Type other than Collection
   *       Management Service or Poll Service; recipients MUST ignore
   *       this field for other Service Types. The Query Format subfield
   *       identifies the type of query format supported. Other
   *       subfields MAY also be present and provide additional
   *       support information about the indicated query format -
   *       these parameters are identified in the definition of the given
   *       query format. (See Section 5.5 for more on Query Format
   *       definition.) Multiple instances of this field may appear, but
   *       each instance MUST include a different Query Format value.
   *       Absence of this field indicates that the identified service
   *       does not support the use of Query expressions
   * *
   */
  public List<Query> supportedQueries; // optional
  /**
   *     * This field SHOULD NOT be present for any Service Type other
   *       than Inbox; recipients MUST ignore this field if the Service
   *       Type is not Inbox. This field identifies content bindings that
   *       this Inbox Service is willing to accept. Each Inbox Service
   *       Accepted Content MUST be a Content Binding ID as defined
   *       in the TAXII Content Binding Reference or by a third party.
   *       Absence of this field when the Service Type field indicates an
   *       Inbox Service means that the Inbox Service accepts all
   *       content bindings.
   * 
   * *
   */
  public List<InboxServiceContent> inboxServiceAcceptedContents; // optional
  /**
   *     * This field indicates whether the identity of the requester
   *       (authenticated or otherwise) is allowed to access this TAXII
   *       Service. This field can indicate that the requester is known to
   *       have access, known not to have access, or that access is
   *       unknown. Absence of this field indicates that access is
   *       unknown.
   * 
   * *
   */
  public boolean isAvailable; // optional
  /**
   *     * This field contains a message regarding this Service instance.
   *       This message is not required to be machine readable and is
   *       usually a message for a human operator.
   * 
   * *
   */
  public Message message; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field MAY appear any number of times (including 0),
     *   each time identifying a different instance of a TAXII Service.
     *   This field has several sub-fields. Absence of this field
     *   indicates that there are no TAXII Services that can be
     *   revealed to the requester
     * *
     * 
     * @see ServiceType
     */
    SERVICE_TYPE((short)1, "serviceType"),
    /**
     * * This field identifies the TAXII Services Specification to which
     *   this Service conforms. This MUST be a TAXII Services Version
     *   ID as defined in a TAXII Services Specification.
     * *
     */
    SERVICE_VERSION((short)2, "serviceVersion"),
    /**
     *     * This field identifies the protocol binding supported by this
     *       Service. This MUST be a TAXII Protocol Binding Version ID as
     *       defined in a TAXII Protocol Binding Specification or by a third
     *       party
     * *
     */
    PROTOCOL_BINDING((short)3, "protocolBinding"),
    /**
     * * This field identifies the network address that can be used to
     *   contact TAXII Daemon that hosts this Service. The Service
     *   Address MUST use a format appropriate to the Protocol
     *   Binding field value.
     * *
     */
    SERVICE_ADDRESS((short)4, "serviceAddress"),
    /**
     *     * This field identifies the message bindings supported by this
     *       Service instance. Each message binding MUST be a TAXII
     *       Message Binding Version ID as defined in a TAXII Message
     *       Binding Specification or by a third party.
     * *
     */
    MESSAGE_BINDINGS((short)5, "messageBindings"),
    /**
     *     * This field indicates that the service supports a particular
     *       format of Query expression. This field SHOULD NOT be
     *       present for any Service Type other than Collection
     *       Management Service or Poll Service; recipients MUST ignore
     *       this field for other Service Types. The Query Format subfield
     *       identifies the type of query format supported. Other
     *       subfields MAY also be present and provide additional
     *       support information about the indicated query format -
     *       these parameters are identified in the definition of the given
     *       query format. (See Section 5.5 for more on Query Format
     *       definition.) Multiple instances of this field may appear, but
     *       each instance MUST include a different Query Format value.
     *       Absence of this field indicates that the identified service
     *       does not support the use of Query expressions
     * *
     */
    SUPPORTED_QUERIES((short)6, "supportedQueries"),
    /**
     *     * This field SHOULD NOT be present for any Service Type other
     *       than Inbox; recipients MUST ignore this field if the Service
     *       Type is not Inbox. This field identifies content bindings that
     *       this Inbox Service is willing to accept. Each Inbox Service
     *       Accepted Content MUST be a Content Binding ID as defined
     *       in the TAXII Content Binding Reference or by a third party.
     *       Absence of this field when the Service Type field indicates an
     *       Inbox Service means that the Inbox Service accepts all
     *       content bindings.
     * 
     * *
     */
    INBOX_SERVICE_ACCEPTED_CONTENTS((short)7, "inboxServiceAcceptedContents"),
    /**
     *     * This field indicates whether the identity of the requester
     *       (authenticated or otherwise) is allowed to access this TAXII
     *       Service. This field can indicate that the requester is known to
     *       have access, known not to have access, or that access is
     *       unknown. Absence of this field indicates that access is
     *       unknown.
     * 
     * *
     */
    IS_AVAILABLE((short)8, "isAvailable"),
    /**
     *     * This field contains a message regarding this Service instance.
     *       This message is not required to be machine readable and is
     *       usually a message for a human operator.
     * 
     * *
     */
    MESSAGE((short)9, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_TYPE
          return SERVICE_TYPE;
        case 2: // SERVICE_VERSION
          return SERVICE_VERSION;
        case 3: // PROTOCOL_BINDING
          return PROTOCOL_BINDING;
        case 4: // SERVICE_ADDRESS
          return SERVICE_ADDRESS;
        case 5: // MESSAGE_BINDINGS
          return MESSAGE_BINDINGS;
        case 6: // SUPPORTED_QUERIES
          return SUPPORTED_QUERIES;
        case 7: // INBOX_SERVICE_ACCEPTED_CONTENTS
          return INBOX_SERVICE_ACCEPTED_CONTENTS;
        case 8: // IS_AVAILABLE
          return IS_AVAILABLE;
        case 9: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISAVAILABLE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUPPORTED_QUERIES,_Fields.INBOX_SERVICE_ACCEPTED_CONTENTS,_Fields.IS_AVAILABLE,_Fields.MESSAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceType.class)));
    tmpMap.put(_Fields.SERVICE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("serviceVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTOCOL_BINDING, new org.apache.thrift.meta_data.FieldMetaData("protocolBinding", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("serviceAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_BINDINGS, new org.apache.thrift.meta_data.FieldMetaData("messageBindings", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SUPPORTED_QUERIES, new org.apache.thrift.meta_data.FieldMetaData("supportedQueries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Query.class))));
    tmpMap.put(_Fields.INBOX_SERVICE_ACCEPTED_CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("inboxServiceAcceptedContents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InboxServiceContent.class))));
    tmpMap.put(_Fields.IS_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("isAvailable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceInstance.class, metaDataMap);
  }

  public ServiceInstance() {
  }

  public ServiceInstance(
    ServiceType serviceType,
    String serviceVersion,
    String protocolBinding,
    String serviceAddress,
    List<String> messageBindings)
  {
    this();
    this.serviceType = serviceType;
    this.serviceVersion = serviceVersion;
    this.protocolBinding = protocolBinding;
    this.serviceAddress = serviceAddress;
    this.messageBindings = messageBindings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceInstance(ServiceInstance other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServiceType()) {
      this.serviceType = other.serviceType;
    }
    if (other.isSetServiceVersion()) {
      this.serviceVersion = other.serviceVersion;
    }
    if (other.isSetProtocolBinding()) {
      this.protocolBinding = other.protocolBinding;
    }
    if (other.isSetServiceAddress()) {
      this.serviceAddress = other.serviceAddress;
    }
    if (other.isSetMessageBindings()) {
      List<String> __this__messageBindings = new ArrayList<String>(other.messageBindings);
      this.messageBindings = __this__messageBindings;
    }
    if (other.isSetSupportedQueries()) {
      List<Query> __this__supportedQueries = new ArrayList<Query>(other.supportedQueries.size());
      for (Query other_element : other.supportedQueries) {
        __this__supportedQueries.add(new Query(other_element));
      }
      this.supportedQueries = __this__supportedQueries;
    }
    if (other.isSetInboxServiceAcceptedContents()) {
      List<InboxServiceContent> __this__inboxServiceAcceptedContents = new ArrayList<InboxServiceContent>(other.inboxServiceAcceptedContents.size());
      for (InboxServiceContent other_element : other.inboxServiceAcceptedContents) {
        __this__inboxServiceAcceptedContents.add(new InboxServiceContent(other_element));
      }
      this.inboxServiceAcceptedContents = __this__inboxServiceAcceptedContents;
    }
    this.isAvailable = other.isAvailable;
    if (other.isSetMessage()) {
      this.message = new Message(other.message);
    }
  }

  public ServiceInstance deepCopy() {
    return new ServiceInstance(this);
  }

  @Override
  public void clear() {
    this.serviceType = null;
    this.serviceVersion = null;
    this.protocolBinding = null;
    this.serviceAddress = null;
    this.messageBindings = null;
    this.supportedQueries = null;
    this.inboxServiceAcceptedContents = null;
    setIsAvailableIsSet(false);
    this.isAvailable = false;
    this.message = null;
  }

  /**
   * * This field MAY appear any number of times (including 0),
   *   each time identifying a different instance of a TAXII Service.
   *   This field has several sub-fields. Absence of this field
   *   indicates that there are no TAXII Services that can be
   *   revealed to the requester
   * *
   * 
   * @see ServiceType
   */
  public ServiceType getServiceType() {
    return this.serviceType;
  }

  /**
   * * This field MAY appear any number of times (including 0),
   *   each time identifying a different instance of a TAXII Service.
   *   This field has several sub-fields. Absence of this field
   *   indicates that there are no TAXII Services that can be
   *   revealed to the requester
   * *
   * 
   * @see ServiceType
   */
  public ServiceInstance setServiceType(ServiceType serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  public void unsetServiceType() {
    this.serviceType = null;
  }

  /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceType() {
    return this.serviceType != null;
  }

  public void setServiceTypeIsSet(boolean value) {
    if (!value) {
      this.serviceType = null;
    }
  }

  /**
   * * This field identifies the TAXII Services Specification to which
   *   this Service conforms. This MUST be a TAXII Services Version
   *   ID as defined in a TAXII Services Specification.
   * *
   */
  public String getServiceVersion() {
    return this.serviceVersion;
  }

  /**
   * * This field identifies the TAXII Services Specification to which
   *   this Service conforms. This MUST be a TAXII Services Version
   *   ID as defined in a TAXII Services Specification.
   * *
   */
  public ServiceInstance setServiceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
    return this;
  }

  public void unsetServiceVersion() {
    this.serviceVersion = null;
  }

  /** Returns true if field serviceVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceVersion() {
    return this.serviceVersion != null;
  }

  public void setServiceVersionIsSet(boolean value) {
    if (!value) {
      this.serviceVersion = null;
    }
  }

  /**
   *     * This field identifies the protocol binding supported by this
   *       Service. This MUST be a TAXII Protocol Binding Version ID as
   *       defined in a TAXII Protocol Binding Specification or by a third
   *       party
   * *
   */
  public String getProtocolBinding() {
    return this.protocolBinding;
  }

  /**
   *     * This field identifies the protocol binding supported by this
   *       Service. This MUST be a TAXII Protocol Binding Version ID as
   *       defined in a TAXII Protocol Binding Specification or by a third
   *       party
   * *
   */
  public ServiceInstance setProtocolBinding(String protocolBinding) {
    this.protocolBinding = protocolBinding;
    return this;
  }

  public void unsetProtocolBinding() {
    this.protocolBinding = null;
  }

  /** Returns true if field protocolBinding is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolBinding() {
    return this.protocolBinding != null;
  }

  public void setProtocolBindingIsSet(boolean value) {
    if (!value) {
      this.protocolBinding = null;
    }
  }

  /**
   * * This field identifies the network address that can be used to
   *   contact TAXII Daemon that hosts this Service. The Service
   *   Address MUST use a format appropriate to the Protocol
   *   Binding field value.
   * *
   */
  public String getServiceAddress() {
    return this.serviceAddress;
  }

  /**
   * * This field identifies the network address that can be used to
   *   contact TAXII Daemon that hosts this Service. The Service
   *   Address MUST use a format appropriate to the Protocol
   *   Binding field value.
   * *
   */
  public ServiceInstance setServiceAddress(String serviceAddress) {
    this.serviceAddress = serviceAddress;
    return this;
  }

  public void unsetServiceAddress() {
    this.serviceAddress = null;
  }

  /** Returns true if field serviceAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceAddress() {
    return this.serviceAddress != null;
  }

  public void setServiceAddressIsSet(boolean value) {
    if (!value) {
      this.serviceAddress = null;
    }
  }

  public int getMessageBindingsSize() {
    return (this.messageBindings == null) ? 0 : this.messageBindings.size();
  }

  public java.util.Iterator<String> getMessageBindingsIterator() {
    return (this.messageBindings == null) ? null : this.messageBindings.iterator();
  }

  public void addToMessageBindings(String elem) {
    if (this.messageBindings == null) {
      this.messageBindings = new ArrayList<String>();
    }
    this.messageBindings.add(elem);
  }

  /**
   *     * This field identifies the message bindings supported by this
   *       Service instance. Each message binding MUST be a TAXII
   *       Message Binding Version ID as defined in a TAXII Message
   *       Binding Specification or by a third party.
   * *
   */
  public List<String> getMessageBindings() {
    return this.messageBindings;
  }

  /**
   *     * This field identifies the message bindings supported by this
   *       Service instance. Each message binding MUST be a TAXII
   *       Message Binding Version ID as defined in a TAXII Message
   *       Binding Specification or by a third party.
   * *
   */
  public ServiceInstance setMessageBindings(List<String> messageBindings) {
    this.messageBindings = messageBindings;
    return this;
  }

  public void unsetMessageBindings() {
    this.messageBindings = null;
  }

  /** Returns true if field messageBindings is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageBindings() {
    return this.messageBindings != null;
  }

  public void setMessageBindingsIsSet(boolean value) {
    if (!value) {
      this.messageBindings = null;
    }
  }

  public int getSupportedQueriesSize() {
    return (this.supportedQueries == null) ? 0 : this.supportedQueries.size();
  }

  public java.util.Iterator<Query> getSupportedQueriesIterator() {
    return (this.supportedQueries == null) ? null : this.supportedQueries.iterator();
  }

  public void addToSupportedQueries(Query elem) {
    if (this.supportedQueries == null) {
      this.supportedQueries = new ArrayList<Query>();
    }
    this.supportedQueries.add(elem);
  }

  /**
   *     * This field indicates that the service supports a particular
   *       format of Query expression. This field SHOULD NOT be
   *       present for any Service Type other than Collection
   *       Management Service or Poll Service; recipients MUST ignore
   *       this field for other Service Types. The Query Format subfield
   *       identifies the type of query format supported. Other
   *       subfields MAY also be present and provide additional
   *       support information about the indicated query format -
   *       these parameters are identified in the definition of the given
   *       query format. (See Section 5.5 for more on Query Format
   *       definition.) Multiple instances of this field may appear, but
   *       each instance MUST include a different Query Format value.
   *       Absence of this field indicates that the identified service
   *       does not support the use of Query expressions
   * *
   */
  public List<Query> getSupportedQueries() {
    return this.supportedQueries;
  }

  /**
   *     * This field indicates that the service supports a particular
   *       format of Query expression. This field SHOULD NOT be
   *       present for any Service Type other than Collection
   *       Management Service or Poll Service; recipients MUST ignore
   *       this field for other Service Types. The Query Format subfield
   *       identifies the type of query format supported. Other
   *       subfields MAY also be present and provide additional
   *       support information about the indicated query format -
   *       these parameters are identified in the definition of the given
   *       query format. (See Section 5.5 for more on Query Format
   *       definition.) Multiple instances of this field may appear, but
   *       each instance MUST include a different Query Format value.
   *       Absence of this field indicates that the identified service
   *       does not support the use of Query expressions
   * *
   */
  public ServiceInstance setSupportedQueries(List<Query> supportedQueries) {
    this.supportedQueries = supportedQueries;
    return this;
  }

  public void unsetSupportedQueries() {
    this.supportedQueries = null;
  }

  /** Returns true if field supportedQueries is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportedQueries() {
    return this.supportedQueries != null;
  }

  public void setSupportedQueriesIsSet(boolean value) {
    if (!value) {
      this.supportedQueries = null;
    }
  }

  public int getInboxServiceAcceptedContentsSize() {
    return (this.inboxServiceAcceptedContents == null) ? 0 : this.inboxServiceAcceptedContents.size();
  }

  public java.util.Iterator<InboxServiceContent> getInboxServiceAcceptedContentsIterator() {
    return (this.inboxServiceAcceptedContents == null) ? null : this.inboxServiceAcceptedContents.iterator();
  }

  public void addToInboxServiceAcceptedContents(InboxServiceContent elem) {
    if (this.inboxServiceAcceptedContents == null) {
      this.inboxServiceAcceptedContents = new ArrayList<InboxServiceContent>();
    }
    this.inboxServiceAcceptedContents.add(elem);
  }

  /**
   *     * This field SHOULD NOT be present for any Service Type other
   *       than Inbox; recipients MUST ignore this field if the Service
   *       Type is not Inbox. This field identifies content bindings that
   *       this Inbox Service is willing to accept. Each Inbox Service
   *       Accepted Content MUST be a Content Binding ID as defined
   *       in the TAXII Content Binding Reference or by a third party.
   *       Absence of this field when the Service Type field indicates an
   *       Inbox Service means that the Inbox Service accepts all
   *       content bindings.
   * 
   * *
   */
  public List<InboxServiceContent> getInboxServiceAcceptedContents() {
    return this.inboxServiceAcceptedContents;
  }

  /**
   *     * This field SHOULD NOT be present for any Service Type other
   *       than Inbox; recipients MUST ignore this field if the Service
   *       Type is not Inbox. This field identifies content bindings that
   *       this Inbox Service is willing to accept. Each Inbox Service
   *       Accepted Content MUST be a Content Binding ID as defined
   *       in the TAXII Content Binding Reference or by a third party.
   *       Absence of this field when the Service Type field indicates an
   *       Inbox Service means that the Inbox Service accepts all
   *       content bindings.
   * 
   * *
   */
  public ServiceInstance setInboxServiceAcceptedContents(List<InboxServiceContent> inboxServiceAcceptedContents) {
    this.inboxServiceAcceptedContents = inboxServiceAcceptedContents;
    return this;
  }

  public void unsetInboxServiceAcceptedContents() {
    this.inboxServiceAcceptedContents = null;
  }

  /** Returns true if field inboxServiceAcceptedContents is set (has been assigned a value) and false otherwise */
  public boolean isSetInboxServiceAcceptedContents() {
    return this.inboxServiceAcceptedContents != null;
  }

  public void setInboxServiceAcceptedContentsIsSet(boolean value) {
    if (!value) {
      this.inboxServiceAcceptedContents = null;
    }
  }

  /**
   *     * This field indicates whether the identity of the requester
   *       (authenticated or otherwise) is allowed to access this TAXII
   *       Service. This field can indicate that the requester is known to
   *       have access, known not to have access, or that access is
   *       unknown. Absence of this field indicates that access is
   *       unknown.
   * 
   * *
   */
  public boolean isIsAvailable() {
    return this.isAvailable;
  }

  /**
   *     * This field indicates whether the identity of the requester
   *       (authenticated or otherwise) is allowed to access this TAXII
   *       Service. This field can indicate that the requester is known to
   *       have access, known not to have access, or that access is
   *       unknown. Absence of this field indicates that access is
   *       unknown.
   * 
   * *
   */
  public ServiceInstance setIsAvailable(boolean isAvailable) {
    this.isAvailable = isAvailable;
    setIsAvailableIsSet(true);
    return this;
  }

  public void unsetIsAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAVAILABLE_ISSET_ID);
  }

  /** Returns true if field isAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAVAILABLE_ISSET_ID);
  }

  public void setIsAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAVAILABLE_ISSET_ID, value);
  }

  /**
   *     * This field contains a message regarding this Service instance.
   *       This message is not required to be machine readable and is
   *       usually a message for a human operator.
   * 
   * *
   */
  public Message getMessage() {
    return this.message;
  }

  /**
   *     * This field contains a message regarding this Service instance.
   *       This message is not required to be machine readable and is
   *       usually a message for a human operator.
   * 
   * *
   */
  public ServiceInstance setMessage(Message message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_TYPE:
      if (value == null) {
        unsetServiceType();
      } else {
        setServiceType((ServiceType)value);
      }
      break;

    case SERVICE_VERSION:
      if (value == null) {
        unsetServiceVersion();
      } else {
        setServiceVersion((String)value);
      }
      break;

    case PROTOCOL_BINDING:
      if (value == null) {
        unsetProtocolBinding();
      } else {
        setProtocolBinding((String)value);
      }
      break;

    case SERVICE_ADDRESS:
      if (value == null) {
        unsetServiceAddress();
      } else {
        setServiceAddress((String)value);
      }
      break;

    case MESSAGE_BINDINGS:
      if (value == null) {
        unsetMessageBindings();
      } else {
        setMessageBindings((List<String>)value);
      }
      break;

    case SUPPORTED_QUERIES:
      if (value == null) {
        unsetSupportedQueries();
      } else {
        setSupportedQueries((List<Query>)value);
      }
      break;

    case INBOX_SERVICE_ACCEPTED_CONTENTS:
      if (value == null) {
        unsetInboxServiceAcceptedContents();
      } else {
        setInboxServiceAcceptedContents((List<InboxServiceContent>)value);
      }
      break;

    case IS_AVAILABLE:
      if (value == null) {
        unsetIsAvailable();
      } else {
        setIsAvailable((Boolean)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((Message)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_TYPE:
      return getServiceType();

    case SERVICE_VERSION:
      return getServiceVersion();

    case PROTOCOL_BINDING:
      return getProtocolBinding();

    case SERVICE_ADDRESS:
      return getServiceAddress();

    case MESSAGE_BINDINGS:
      return getMessageBindings();

    case SUPPORTED_QUERIES:
      return getSupportedQueries();

    case INBOX_SERVICE_ACCEPTED_CONTENTS:
      return getInboxServiceAcceptedContents();

    case IS_AVAILABLE:
      return Boolean.valueOf(isIsAvailable());

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_TYPE:
      return isSetServiceType();
    case SERVICE_VERSION:
      return isSetServiceVersion();
    case PROTOCOL_BINDING:
      return isSetProtocolBinding();
    case SERVICE_ADDRESS:
      return isSetServiceAddress();
    case MESSAGE_BINDINGS:
      return isSetMessageBindings();
    case SUPPORTED_QUERIES:
      return isSetSupportedQueries();
    case INBOX_SERVICE_ACCEPTED_CONTENTS:
      return isSetInboxServiceAcceptedContents();
    case IS_AVAILABLE:
      return isSetIsAvailable();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceInstance)
      return this.equals((ServiceInstance)that);
    return false;
  }

  public boolean equals(ServiceInstance that) {
    if (that == null)
      return false;

    boolean this_present_serviceType = true && this.isSetServiceType();
    boolean that_present_serviceType = true && that.isSetServiceType();
    if (this_present_serviceType || that_present_serviceType) {
      if (!(this_present_serviceType && that_present_serviceType))
        return false;
      if (!this.serviceType.equals(that.serviceType))
        return false;
    }

    boolean this_present_serviceVersion = true && this.isSetServiceVersion();
    boolean that_present_serviceVersion = true && that.isSetServiceVersion();
    if (this_present_serviceVersion || that_present_serviceVersion) {
      if (!(this_present_serviceVersion && that_present_serviceVersion))
        return false;
      if (!this.serviceVersion.equals(that.serviceVersion))
        return false;
    }

    boolean this_present_protocolBinding = true && this.isSetProtocolBinding();
    boolean that_present_protocolBinding = true && that.isSetProtocolBinding();
    if (this_present_protocolBinding || that_present_protocolBinding) {
      if (!(this_present_protocolBinding && that_present_protocolBinding))
        return false;
      if (!this.protocolBinding.equals(that.protocolBinding))
        return false;
    }

    boolean this_present_serviceAddress = true && this.isSetServiceAddress();
    boolean that_present_serviceAddress = true && that.isSetServiceAddress();
    if (this_present_serviceAddress || that_present_serviceAddress) {
      if (!(this_present_serviceAddress && that_present_serviceAddress))
        return false;
      if (!this.serviceAddress.equals(that.serviceAddress))
        return false;
    }

    boolean this_present_messageBindings = true && this.isSetMessageBindings();
    boolean that_present_messageBindings = true && that.isSetMessageBindings();
    if (this_present_messageBindings || that_present_messageBindings) {
      if (!(this_present_messageBindings && that_present_messageBindings))
        return false;
      if (!this.messageBindings.equals(that.messageBindings))
        return false;
    }

    boolean this_present_supportedQueries = true && this.isSetSupportedQueries();
    boolean that_present_supportedQueries = true && that.isSetSupportedQueries();
    if (this_present_supportedQueries || that_present_supportedQueries) {
      if (!(this_present_supportedQueries && that_present_supportedQueries))
        return false;
      if (!this.supportedQueries.equals(that.supportedQueries))
        return false;
    }

    boolean this_present_inboxServiceAcceptedContents = true && this.isSetInboxServiceAcceptedContents();
    boolean that_present_inboxServiceAcceptedContents = true && that.isSetInboxServiceAcceptedContents();
    if (this_present_inboxServiceAcceptedContents || that_present_inboxServiceAcceptedContents) {
      if (!(this_present_inboxServiceAcceptedContents && that_present_inboxServiceAcceptedContents))
        return false;
      if (!this.inboxServiceAcceptedContents.equals(that.inboxServiceAcceptedContents))
        return false;
    }

    boolean this_present_isAvailable = true && this.isSetIsAvailable();
    boolean that_present_isAvailable = true && that.isSetIsAvailable();
    if (this_present_isAvailable || that_present_isAvailable) {
      if (!(this_present_isAvailable && that_present_isAvailable))
        return false;
      if (this.isAvailable != that.isAvailable)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ServiceInstance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceVersion()).compareTo(other.isSetServiceVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceVersion, other.serviceVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocolBinding()).compareTo(other.isSetProtocolBinding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolBinding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolBinding, other.protocolBinding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceAddress()).compareTo(other.isSetServiceAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceAddress, other.serviceAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageBindings()).compareTo(other.isSetMessageBindings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageBindings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageBindings, other.messageBindings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportedQueries()).compareTo(other.isSetSupportedQueries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportedQueries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportedQueries, other.supportedQueries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInboxServiceAcceptedContents()).compareTo(other.isSetInboxServiceAcceptedContents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInboxServiceAcceptedContents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inboxServiceAcceptedContents, other.inboxServiceAcceptedContents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAvailable()).compareTo(other.isSetIsAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAvailable, other.isAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceInstance(");
    boolean first = true;

    sb.append("serviceType:");
    if (this.serviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceVersion:");
    if (this.serviceVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocolBinding:");
    if (this.protocolBinding == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolBinding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceAddress:");
    if (this.serviceAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageBindings:");
    if (this.messageBindings == null) {
      sb.append("null");
    } else {
      sb.append(this.messageBindings);
    }
    first = false;
    if (isSetSupportedQueries()) {
      if (!first) sb.append(", ");
      sb.append("supportedQueries:");
      if (this.supportedQueries == null) {
        sb.append("null");
      } else {
        sb.append(this.supportedQueries);
      }
      first = false;
    }
    if (isSetInboxServiceAcceptedContents()) {
      if (!first) sb.append(", ");
      sb.append("inboxServiceAcceptedContents:");
      if (this.inboxServiceAcceptedContents == null) {
        sb.append("null");
      } else {
        sb.append(this.inboxServiceAcceptedContents);
      }
      first = false;
    }
    if (isSetIsAvailable()) {
      if (!first) sb.append(", ");
      sb.append("isAvailable:");
      sb.append(this.isAvailable);
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serviceType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceType' was not present! Struct: " + toString());
    }
    if (serviceVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceVersion' was not present! Struct: " + toString());
    }
    if (protocolBinding == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocolBinding' was not present! Struct: " + toString());
    }
    if (serviceAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceAddress' was not present! Struct: " + toString());
    }
    if (messageBindings == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageBindings' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (message != null) {
      message.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceInstanceStandardSchemeFactory implements SchemeFactory {
    public ServiceInstanceStandardScheme getScheme() {
      return new ServiceInstanceStandardScheme();
    }
  }

  private static class ServiceInstanceStandardScheme extends StandardScheme<ServiceInstance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceInstance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceType = ServiceType.findByValue(iprot.readI32());
              struct.setServiceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceVersion = iprot.readString();
              struct.setServiceVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROTOCOL_BINDING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocolBinding = iprot.readString();
              struct.setProtocolBindingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVICE_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceAddress = iprot.readString();
              struct.setServiceAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MESSAGE_BINDINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.messageBindings = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  String _elem26;
                  _elem26 = iprot.readString();
                  struct.messageBindings.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setMessageBindingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUPPORTED_QUERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.supportedQueries = new ArrayList<Query>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  Query _elem29;
                  _elem29 = new Query();
                  _elem29.read(iprot);
                  struct.supportedQueries.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setSupportedQueriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INBOX_SERVICE_ACCEPTED_CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.inboxServiceAcceptedContents = new ArrayList<InboxServiceContent>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  InboxServiceContent _elem32;
                  _elem32 = new InboxServiceContent();
                  _elem32.read(iprot);
                  struct.inboxServiceAcceptedContents.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setInboxServiceAcceptedContentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAvailable = iprot.readBool();
              struct.setIsAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.message = new Message();
              struct.message.read(iprot);
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceInstance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceType != null) {
        oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.serviceType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.serviceVersion != null) {
        oprot.writeFieldBegin(SERVICE_VERSION_FIELD_DESC);
        oprot.writeString(struct.serviceVersion);
        oprot.writeFieldEnd();
      }
      if (struct.protocolBinding != null) {
        oprot.writeFieldBegin(PROTOCOL_BINDING_FIELD_DESC);
        oprot.writeString(struct.protocolBinding);
        oprot.writeFieldEnd();
      }
      if (struct.serviceAddress != null) {
        oprot.writeFieldBegin(SERVICE_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.serviceAddress);
        oprot.writeFieldEnd();
      }
      if (struct.messageBindings != null) {
        oprot.writeFieldBegin(MESSAGE_BINDINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.messageBindings.size()));
          for (String _iter33 : struct.messageBindings)
          {
            oprot.writeString(_iter33);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.supportedQueries != null) {
        if (struct.isSetSupportedQueries()) {
          oprot.writeFieldBegin(SUPPORTED_QUERIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.supportedQueries.size()));
            for (Query _iter34 : struct.supportedQueries)
            {
              _iter34.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.inboxServiceAcceptedContents != null) {
        if (struct.isSetInboxServiceAcceptedContents()) {
          oprot.writeFieldBegin(INBOX_SERVICE_ACCEPTED_CONTENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.inboxServiceAcceptedContents.size()));
            for (InboxServiceContent _iter35 : struct.inboxServiceAcceptedContents)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsAvailable()) {
        oprot.writeFieldBegin(IS_AVAILABLE_FIELD_DESC);
        oprot.writeBool(struct.isAvailable);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          struct.message.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceInstanceTupleSchemeFactory implements SchemeFactory {
    public ServiceInstanceTupleScheme getScheme() {
      return new ServiceInstanceTupleScheme();
    }
  }

  private static class ServiceInstanceTupleScheme extends TupleScheme<ServiceInstance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.serviceType.getValue());
      oprot.writeString(struct.serviceVersion);
      oprot.writeString(struct.protocolBinding);
      oprot.writeString(struct.serviceAddress);
      {
        oprot.writeI32(struct.messageBindings.size());
        for (String _iter36 : struct.messageBindings)
        {
          oprot.writeString(_iter36);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetSupportedQueries()) {
        optionals.set(0);
      }
      if (struct.isSetInboxServiceAcceptedContents()) {
        optionals.set(1);
      }
      if (struct.isSetIsAvailable()) {
        optionals.set(2);
      }
      if (struct.isSetMessage()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSupportedQueries()) {
        {
          oprot.writeI32(struct.supportedQueries.size());
          for (Query _iter37 : struct.supportedQueries)
          {
            _iter37.write(oprot);
          }
        }
      }
      if (struct.isSetInboxServiceAcceptedContents()) {
        {
          oprot.writeI32(struct.inboxServiceAcceptedContents.size());
          for (InboxServiceContent _iter38 : struct.inboxServiceAcceptedContents)
          {
            _iter38.write(oprot);
          }
        }
      }
      if (struct.isSetIsAvailable()) {
        oprot.writeBool(struct.isAvailable);
      }
      if (struct.isSetMessage()) {
        struct.message.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.serviceType = ServiceType.findByValue(iprot.readI32());
      struct.setServiceTypeIsSet(true);
      struct.serviceVersion = iprot.readString();
      struct.setServiceVersionIsSet(true);
      struct.protocolBinding = iprot.readString();
      struct.setProtocolBindingIsSet(true);
      struct.serviceAddress = iprot.readString();
      struct.setServiceAddressIsSet(true);
      {
        org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.messageBindings = new ArrayList<String>(_list39.size);
        for (int _i40 = 0; _i40 < _list39.size; ++_i40)
        {
          String _elem41;
          _elem41 = iprot.readString();
          struct.messageBindings.add(_elem41);
        }
      }
      struct.setMessageBindingsIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.supportedQueries = new ArrayList<Query>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            Query _elem44;
            _elem44 = new Query();
            _elem44.read(iprot);
            struct.supportedQueries.add(_elem44);
          }
        }
        struct.setSupportedQueriesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.inboxServiceAcceptedContents = new ArrayList<InboxServiceContent>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            InboxServiceContent _elem47;
            _elem47 = new InboxServiceContent();
            _elem47.read(iprot);
            struct.inboxServiceAcceptedContents.add(_elem47);
          }
        }
        struct.setInboxServiceAcceptedContentsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isAvailable = iprot.readBool();
        struct.setIsAvailableIsSet(true);
      }
      if (incoming.get(3)) {
        struct.message = new Message();
        struct.message.read(iprot);
        struct.setMessageIsSet(true);
      }
    }
  }

}

