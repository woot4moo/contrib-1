/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SubscriptionParameter implements org.apache.thrift.TBase<SubscriptionParameter, SubscriptionParameter._Fields>, java.io.Serializable, Cloneable, Comparable<SubscriptionParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubscriptionParameter");

  private static final org.apache.thrift.protocol.TField RESPONSE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_BINDINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("contentBindings", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubscriptionParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubscriptionParameterTupleSchemeFactory());
  }

  /**
   * * This field identifies the response type that is being
   *   requested as part of this subscription.
   *   Absence of this field indicates a request for FULL responses.
   * 
   * *
   * 
   * @see SubscriptionResponseType
   */
  public SubscriptionResponseType responseType; // optional
  /**
   * * This field contains Content Binding IDs indicating which
   *   types of contents the Consumer requests to receive for this
   *   subscription. Multiple Content Binding IDs may be specified.
   *   This field MUST contain Content Binding IDs as defined in
   *   the TAXII Content Binding Reference or by a third party. If
   *   none of the listed Content Binding values are supported by
   *   the Data Collection, a Status Message with a status of
   *   'Unsupported Content Binding' SHOULD be returned.
   *   Absence of this field indicates that all content bindings are
   *   accepted.
   * *
   */
  public Set<ContentBinding> contentBindings; // optional
  /**
   * * This field contains a query expression associated with this
   *   subscription request. If the subscription request is
   *   successful, only content that matches the query expression
   *   should be sent in fulfillment of the subscription. The query
   *   expression may be structured; the specific structure used for
   *   the query expression is identified in the Query Format field
   *  *
   */
  public Query query; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field identifies the response type that is being
     *   requested as part of this subscription.
     *   Absence of this field indicates a request for FULL responses.
     * 
     * *
     * 
     * @see SubscriptionResponseType
     */
    RESPONSE_TYPE((short)1, "responseType"),
    /**
     * * This field contains Content Binding IDs indicating which
     *   types of contents the Consumer requests to receive for this
     *   subscription. Multiple Content Binding IDs may be specified.
     *   This field MUST contain Content Binding IDs as defined in
     *   the TAXII Content Binding Reference or by a third party. If
     *   none of the listed Content Binding values are supported by
     *   the Data Collection, a Status Message with a status of
     *   'Unsupported Content Binding' SHOULD be returned.
     *   Absence of this field indicates that all content bindings are
     *   accepted.
     * *
     */
    CONTENT_BINDINGS((short)2, "contentBindings"),
    /**
     * * This field contains a query expression associated with this
     *   subscription request. If the subscription request is
     *   successful, only content that matches the query expression
     *   should be sent in fulfillment of the subscription. The query
     *   expression may be structured; the specific structure used for
     *   the query expression is identified in the Query Format field
     *  *
     */
    QUERY((short)3, "query");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESPONSE_TYPE
          return RESPONSE_TYPE;
        case 2: // CONTENT_BINDINGS
          return CONTENT_BINDINGS;
        case 3: // QUERY
          return QUERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.RESPONSE_TYPE,_Fields.CONTENT_BINDINGS,_Fields.QUERY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESPONSE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("responseType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SubscriptionResponseType.class)));
    tmpMap.put(_Fields.CONTENT_BINDINGS, new org.apache.thrift.meta_data.FieldMetaData("contentBindings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContentBinding.class))));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Query.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubscriptionParameter.class, metaDataMap);
  }

  public SubscriptionParameter() {
    this.responseType = com.yellowcab.SubscriptionResponseType.FULL;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubscriptionParameter(SubscriptionParameter other) {
    if (other.isSetResponseType()) {
      this.responseType = other.responseType;
    }
    if (other.isSetContentBindings()) {
      Set<ContentBinding> __this__contentBindings = new HashSet<ContentBinding>(other.contentBindings.size());
      for (ContentBinding other_element : other.contentBindings) {
        __this__contentBindings.add(new ContentBinding(other_element));
      }
      this.contentBindings = __this__contentBindings;
    }
    if (other.isSetQuery()) {
      this.query = new Query(other.query);
    }
  }

  public SubscriptionParameter deepCopy() {
    return new SubscriptionParameter(this);
  }

  @Override
  public void clear() {
    this.responseType = com.yellowcab.SubscriptionResponseType.FULL;

    this.contentBindings = null;
    this.query = null;
  }

  /**
   * * This field identifies the response type that is being
   *   requested as part of this subscription.
   *   Absence of this field indicates a request for FULL responses.
   * 
   * *
   * 
   * @see SubscriptionResponseType
   */
  public SubscriptionResponseType getResponseType() {
    return this.responseType;
  }

  /**
   * * This field identifies the response type that is being
   *   requested as part of this subscription.
   *   Absence of this field indicates a request for FULL responses.
   * 
   * *
   * 
   * @see SubscriptionResponseType
   */
  public SubscriptionParameter setResponseType(SubscriptionResponseType responseType) {
    this.responseType = responseType;
    return this;
  }

  public void unsetResponseType() {
    this.responseType = null;
  }

  /** Returns true if field responseType is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseType() {
    return this.responseType != null;
  }

  public void setResponseTypeIsSet(boolean value) {
    if (!value) {
      this.responseType = null;
    }
  }

  public int getContentBindingsSize() {
    return (this.contentBindings == null) ? 0 : this.contentBindings.size();
  }

  public java.util.Iterator<ContentBinding> getContentBindingsIterator() {
    return (this.contentBindings == null) ? null : this.contentBindings.iterator();
  }

  public void addToContentBindings(ContentBinding elem) {
    if (this.contentBindings == null) {
      this.contentBindings = new HashSet<ContentBinding>();
    }
    this.contentBindings.add(elem);
  }

  /**
   * * This field contains Content Binding IDs indicating which
   *   types of contents the Consumer requests to receive for this
   *   subscription. Multiple Content Binding IDs may be specified.
   *   This field MUST contain Content Binding IDs as defined in
   *   the TAXII Content Binding Reference or by a third party. If
   *   none of the listed Content Binding values are supported by
   *   the Data Collection, a Status Message with a status of
   *   'Unsupported Content Binding' SHOULD be returned.
   *   Absence of this field indicates that all content bindings are
   *   accepted.
   * *
   */
  public Set<ContentBinding> getContentBindings() {
    return this.contentBindings;
  }

  /**
   * * This field contains Content Binding IDs indicating which
   *   types of contents the Consumer requests to receive for this
   *   subscription. Multiple Content Binding IDs may be specified.
   *   This field MUST contain Content Binding IDs as defined in
   *   the TAXII Content Binding Reference or by a third party. If
   *   none of the listed Content Binding values are supported by
   *   the Data Collection, a Status Message with a status of
   *   'Unsupported Content Binding' SHOULD be returned.
   *   Absence of this field indicates that all content bindings are
   *   accepted.
   * *
   */
  public SubscriptionParameter setContentBindings(Set<ContentBinding> contentBindings) {
    this.contentBindings = contentBindings;
    return this;
  }

  public void unsetContentBindings() {
    this.contentBindings = null;
  }

  /** Returns true if field contentBindings is set (has been assigned a value) and false otherwise */
  public boolean isSetContentBindings() {
    return this.contentBindings != null;
  }

  public void setContentBindingsIsSet(boolean value) {
    if (!value) {
      this.contentBindings = null;
    }
  }

  /**
   * * This field contains a query expression associated with this
   *   subscription request. If the subscription request is
   *   successful, only content that matches the query expression
   *   should be sent in fulfillment of the subscription. The query
   *   expression may be structured; the specific structure used for
   *   the query expression is identified in the Query Format field
   *  *
   */
  public Query getQuery() {
    return this.query;
  }

  /**
   * * This field contains a query expression associated with this
   *   subscription request. If the subscription request is
   *   successful, only content that matches the query expression
   *   should be sent in fulfillment of the subscription. The query
   *   expression may be structured; the specific structure used for
   *   the query expression is identified in the Query Format field
   *  *
   */
  public SubscriptionParameter setQuery(Query query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESPONSE_TYPE:
      if (value == null) {
        unsetResponseType();
      } else {
        setResponseType((SubscriptionResponseType)value);
      }
      break;

    case CONTENT_BINDINGS:
      if (value == null) {
        unsetContentBindings();
      } else {
        setContentBindings((Set<ContentBinding>)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((Query)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESPONSE_TYPE:
      return getResponseType();

    case CONTENT_BINDINGS:
      return getContentBindings();

    case QUERY:
      return getQuery();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESPONSE_TYPE:
      return isSetResponseType();
    case CONTENT_BINDINGS:
      return isSetContentBindings();
    case QUERY:
      return isSetQuery();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubscriptionParameter)
      return this.equals((SubscriptionParameter)that);
    return false;
  }

  public boolean equals(SubscriptionParameter that) {
    if (that == null)
      return false;

    boolean this_present_responseType = true && this.isSetResponseType();
    boolean that_present_responseType = true && that.isSetResponseType();
    if (this_present_responseType || that_present_responseType) {
      if (!(this_present_responseType && that_present_responseType))
        return false;
      if (!this.responseType.equals(that.responseType))
        return false;
    }

    boolean this_present_contentBindings = true && this.isSetContentBindings();
    boolean that_present_contentBindings = true && that.isSetContentBindings();
    if (this_present_contentBindings || that_present_contentBindings) {
      if (!(this_present_contentBindings && that_present_contentBindings))
        return false;
      if (!this.contentBindings.equals(that.contentBindings))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubscriptionParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResponseType()).compareTo(other.isSetResponseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseType, other.responseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentBindings()).compareTo(other.isSetContentBindings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentBindings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentBindings, other.contentBindings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubscriptionParameter(");
    boolean first = true;

    if (isSetResponseType()) {
      sb.append("responseType:");
      if (this.responseType == null) {
        sb.append("null");
      } else {
        sb.append(this.responseType);
      }
      first = false;
    }
    if (isSetContentBindings()) {
      if (!first) sb.append(", ");
      sb.append("contentBindings:");
      if (this.contentBindings == null) {
        sb.append("null");
      } else {
        sb.append(this.contentBindings);
      }
      first = false;
    }
    if (isSetQuery()) {
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (query != null) {
      query.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubscriptionParameterStandardSchemeFactory implements SchemeFactory {
    public SubscriptionParameterStandardScheme getScheme() {
      return new SubscriptionParameterStandardScheme();
    }
  }

  private static class SubscriptionParameterStandardScheme extends StandardScheme<SubscriptionParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubscriptionParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESPONSE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.responseType = SubscriptionResponseType.findByValue(iprot.readI32());
              struct.setResponseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT_BINDINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set176 = iprot.readSetBegin();
                struct.contentBindings = new HashSet<ContentBinding>(2*_set176.size);
                for (int _i177 = 0; _i177 < _set176.size; ++_i177)
                {
                  ContentBinding _elem178;
                  _elem178 = new ContentBinding();
                  _elem178.read(iprot);
                  struct.contentBindings.add(_elem178);
                }
                iprot.readSetEnd();
              }
              struct.setContentBindingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query = new Query();
              struct.query.read(iprot);
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubscriptionParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.responseType != null) {
        if (struct.isSetResponseType()) {
          oprot.writeFieldBegin(RESPONSE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.responseType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentBindings != null) {
        if (struct.isSetContentBindings()) {
          oprot.writeFieldBegin(CONTENT_BINDINGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.contentBindings.size()));
            for (ContentBinding _iter179 : struct.contentBindings)
            {
              _iter179.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubscriptionParameterTupleSchemeFactory implements SchemeFactory {
    public SubscriptionParameterTupleScheme getScheme() {
      return new SubscriptionParameterTupleScheme();
    }
  }

  private static class SubscriptionParameterTupleScheme extends TupleScheme<SubscriptionParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubscriptionParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResponseType()) {
        optionals.set(0);
      }
      if (struct.isSetContentBindings()) {
        optionals.set(1);
      }
      if (struct.isSetQuery()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResponseType()) {
        oprot.writeI32(struct.responseType.getValue());
      }
      if (struct.isSetContentBindings()) {
        {
          oprot.writeI32(struct.contentBindings.size());
          for (ContentBinding _iter180 : struct.contentBindings)
          {
            _iter180.write(oprot);
          }
        }
      }
      if (struct.isSetQuery()) {
        struct.query.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubscriptionParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.responseType = SubscriptionResponseType.findByValue(iprot.readI32());
        struct.setResponseTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set181 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contentBindings = new HashSet<ContentBinding>(2*_set181.size);
          for (int _i182 = 0; _i182 < _set181.size; ++_i182)
          {
            ContentBinding _elem183;
            _elem183 = new ContentBinding();
            _elem183.read(iprot);
            struct.contentBindings.add(_elem183);
          }
        }
        struct.setContentBindingsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.query = new Query();
        struct.query.read(iprot);
        struct.setQueryIsSet(true);
      }
    }
  }

}

