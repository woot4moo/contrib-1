/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Specifies ids and subtypes for content bindings
 * 
 */
public class ContentBinding implements org.apache.thrift.TBase<ContentBinding, ContentBinding._Fields>, java.io.Serializable, Cloneable, Comparable<ContentBinding> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContentBinding");

  private static final org.apache.thrift.protocol.TField CONTENT_BINDING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contentBindingId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subType", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContentBindingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContentBindingTupleSchemeFactory());
  }

  public String contentBindingId; // required
  /**
   * * This field identifies content binding subtypes of the specified
   *   Content Binding. Each Subtype MUST be a Content Binding
   *   Subtype ID as defined in the TAXII Content Binding
   *   Reference or by a third party. Absence indicates that all
   *   subtypes of the specified Content Binding are accepted
   * *
   */
  public Set<String> subType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTENT_BINDING_ID((short)1, "contentBindingId"),
    /**
     * * This field identifies content binding subtypes of the specified
     *   Content Binding. Each Subtype MUST be a Content Binding
     *   Subtype ID as defined in the TAXII Content Binding
     *   Reference or by a third party. Absence indicates that all
     *   subtypes of the specified Content Binding are accepted
     * *
     */
    SUB_TYPE((short)2, "subType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTENT_BINDING_ID
          return CONTENT_BINDING_ID;
        case 2: // SUB_TYPE
          return SUB_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SUB_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTENT_BINDING_ID, new org.apache.thrift.meta_data.FieldMetaData("contentBindingId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("subType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContentBinding.class, metaDataMap);
  }

  public ContentBinding() {
  }

  public ContentBinding(
    String contentBindingId)
  {
    this();
    this.contentBindingId = contentBindingId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContentBinding(ContentBinding other) {
    if (other.isSetContentBindingId()) {
      this.contentBindingId = other.contentBindingId;
    }
    if (other.isSetSubType()) {
      Set<String> __this__subType = new HashSet<String>(other.subType);
      this.subType = __this__subType;
    }
  }

  public ContentBinding deepCopy() {
    return new ContentBinding(this);
  }

  @Override
  public void clear() {
    this.contentBindingId = null;
    this.subType = null;
  }

  public String getContentBindingId() {
    return this.contentBindingId;
  }

  public ContentBinding setContentBindingId(String contentBindingId) {
    this.contentBindingId = contentBindingId;
    return this;
  }

  public void unsetContentBindingId() {
    this.contentBindingId = null;
  }

  /** Returns true if field contentBindingId is set (has been assigned a value) and false otherwise */
  public boolean isSetContentBindingId() {
    return this.contentBindingId != null;
  }

  public void setContentBindingIdIsSet(boolean value) {
    if (!value) {
      this.contentBindingId = null;
    }
  }

  public int getSubTypeSize() {
    return (this.subType == null) ? 0 : this.subType.size();
  }

  public java.util.Iterator<String> getSubTypeIterator() {
    return (this.subType == null) ? null : this.subType.iterator();
  }

  public void addToSubType(String elem) {
    if (this.subType == null) {
      this.subType = new HashSet<String>();
    }
    this.subType.add(elem);
  }

  /**
   * * This field identifies content binding subtypes of the specified
   *   Content Binding. Each Subtype MUST be a Content Binding
   *   Subtype ID as defined in the TAXII Content Binding
   *   Reference or by a third party. Absence indicates that all
   *   subtypes of the specified Content Binding are accepted
   * *
   */
  public Set<String> getSubType() {
    return this.subType;
  }

  /**
   * * This field identifies content binding subtypes of the specified
   *   Content Binding. Each Subtype MUST be a Content Binding
   *   Subtype ID as defined in the TAXII Content Binding
   *   Reference or by a third party. Absence indicates that all
   *   subtypes of the specified Content Binding are accepted
   * *
   */
  public ContentBinding setSubType(Set<String> subType) {
    this.subType = subType;
    return this;
  }

  public void unsetSubType() {
    this.subType = null;
  }

  /** Returns true if field subType is set (has been assigned a value) and false otherwise */
  public boolean isSetSubType() {
    return this.subType != null;
  }

  public void setSubTypeIsSet(boolean value) {
    if (!value) {
      this.subType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTENT_BINDING_ID:
      if (value == null) {
        unsetContentBindingId();
      } else {
        setContentBindingId((String)value);
      }
      break;

    case SUB_TYPE:
      if (value == null) {
        unsetSubType();
      } else {
        setSubType((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTENT_BINDING_ID:
      return getContentBindingId();

    case SUB_TYPE:
      return getSubType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTENT_BINDING_ID:
      return isSetContentBindingId();
    case SUB_TYPE:
      return isSetSubType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContentBinding)
      return this.equals((ContentBinding)that);
    return false;
  }

  public boolean equals(ContentBinding that) {
    if (that == null)
      return false;

    boolean this_present_contentBindingId = true && this.isSetContentBindingId();
    boolean that_present_contentBindingId = true && that.isSetContentBindingId();
    if (this_present_contentBindingId || that_present_contentBindingId) {
      if (!(this_present_contentBindingId && that_present_contentBindingId))
        return false;
      if (!this.contentBindingId.equals(that.contentBindingId))
        return false;
    }

    boolean this_present_subType = true && this.isSetSubType();
    boolean that_present_subType = true && that.isSetSubType();
    if (this_present_subType || that_present_subType) {
      if (!(this_present_subType && that_present_subType))
        return false;
      if (!this.subType.equals(that.subType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ContentBinding other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContentBindingId()).compareTo(other.isSetContentBindingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentBindingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentBindingId, other.contentBindingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubType()).compareTo(other.isSetSubType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subType, other.subType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContentBinding(");
    boolean first = true;

    sb.append("contentBindingId:");
    if (this.contentBindingId == null) {
      sb.append("null");
    } else {
      sb.append(this.contentBindingId);
    }
    first = false;
    if (isSetSubType()) {
      if (!first) sb.append(", ");
      sb.append("subType:");
      if (this.subType == null) {
        sb.append("null");
      } else {
        sb.append(this.subType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (contentBindingId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentBindingId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContentBindingStandardSchemeFactory implements SchemeFactory {
    public ContentBindingStandardScheme getScheme() {
      return new ContentBindingStandardScheme();
    }
  }

  private static class ContentBindingStandardScheme extends StandardScheme<ContentBinding> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContentBinding struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTENT_BINDING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentBindingId = iprot.readString();
              struct.setContentBindingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.subType = new HashSet<String>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.subType.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setSubTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContentBinding struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contentBindingId != null) {
        oprot.writeFieldBegin(CONTENT_BINDING_ID_FIELD_DESC);
        oprot.writeString(struct.contentBindingId);
        oprot.writeFieldEnd();
      }
      if (struct.subType != null) {
        if (struct.isSetSubType()) {
          oprot.writeFieldBegin(SUB_TYPE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.subType.size()));
            for (String _iter3 : struct.subType)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContentBindingTupleSchemeFactory implements SchemeFactory {
    public ContentBindingTupleScheme getScheme() {
      return new ContentBindingTupleScheme();
    }
  }

  private static class ContentBindingTupleScheme extends TupleScheme<ContentBinding> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContentBinding struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.contentBindingId);
      BitSet optionals = new BitSet();
      if (struct.isSetSubType()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSubType()) {
        {
          oprot.writeI32(struct.subType.size());
          for (String _iter4 : struct.subType)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContentBinding struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.contentBindingId = iprot.readString();
      struct.setContentBindingIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.subType = new HashSet<String>(2*_set5.size);
          for (int _i6 = 0; _i6 < _set5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.subType.add(_elem7);
          }
        }
        struct.setSubTypeIsSet(true);
      }
    }
  }

}

