/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This message is used to establish a new subscription or manage an existing subscription
 * 
 */
public class ManageCollectionSubscriptionRequest implements org.apache.thrift.TBase<ManageCollectionSubscriptionRequest, ManageCollectionSubscriptionRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ManageCollectionSubscriptionRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ManageCollectionSubscriptionRequest");

  private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionParameter", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DELIVERY_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryParameter", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ManageCollectionSubscriptionRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ManageCollectionSubscriptionRequestTupleSchemeFactory());
  }

  /**
   *  This field identifies the name of the TAXII Data Collection to
   * which the action applies.
   * *
   */
  public String collectionName; // required
  /**
   * This field identifies the requested action to take
   * 
   * 
   * @see CollectionSubscriptionAction
   */
  public CollectionSubscriptionAction action; // required
  /**
   * * This field contains the ID of a previously created
   *   subscription. For messages where the Action field is
   *   UNSUBSCRIBE, PAUSE, or RESUME, this field MUST be
   *   present. For messages where the Action field is SUBSCRIBE,
   *   this field MUST be ignored. For messages where the Action
   *   field is STATUS, this field MAY be present.
   * *
   */
  public String subscriptionId; // optional
  /**
   *     * This field contains multiple subfields that indicate various
   *       aspects of the requested subscription. This field MUST be
   *       included if and only if the Action of this message is
   *       SUBSCRIBE and MUST be ignored for all other Action values.
   * 
   *       NOTE: Implementors must make this field required if and only if the
   *       value of the Action field is SUBSCRIBE
   * *
   */
  public SubscriptionParameter subscriptionParameter; // optional
  /**
   * * This field identifies the parameters used to push content to
   *   the Consumer in fulfillment of a subscription. This field is
   *   only meaningful if the Action field is equal to SUBSCRIBE and
   *   is ignored for all other Action values. Absence of this field
   *   for a SUBSCRIBE action indicates that the requester is not
   *   requesting pushed content and will instead poll for
   *   subscription content use a Poll Service. In this case, if the
   *   TAXII Data Collection cannot be polled, a Status Message
   *   with a status of 'Polling Not Supported' SHOULD be
   *   returned.
   * *
   */
  public DeliveryParameter deliveryParameter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     *  This field identifies the name of the TAXII Data Collection to
     * which the action applies.
     * *
     */
    COLLECTION_NAME((short)1, "collectionName"),
    /**
     * This field identifies the requested action to take
     * 
     * 
     * @see CollectionSubscriptionAction
     */
    ACTION((short)2, "action"),
    /**
     * * This field contains the ID of a previously created
     *   subscription. For messages where the Action field is
     *   UNSUBSCRIBE, PAUSE, or RESUME, this field MUST be
     *   present. For messages where the Action field is SUBSCRIBE,
     *   this field MUST be ignored. For messages where the Action
     *   field is STATUS, this field MAY be present.
     * *
     */
    SUBSCRIPTION_ID((short)3, "subscriptionId"),
    /**
     *     * This field contains multiple subfields that indicate various
     *       aspects of the requested subscription. This field MUST be
     *       included if and only if the Action of this message is
     *       SUBSCRIBE and MUST be ignored for all other Action values.
     * 
     *       NOTE: Implementors must make this field required if and only if the
     *       value of the Action field is SUBSCRIBE
     * *
     */
    SUBSCRIPTION_PARAMETER((short)4, "subscriptionParameter"),
    /**
     * * This field identifies the parameters used to push content to
     *   the Consumer in fulfillment of a subscription. This field is
     *   only meaningful if the Action field is equal to SUBSCRIBE and
     *   is ignored for all other Action values. Absence of this field
     *   for a SUBSCRIBE action indicates that the requester is not
     *   requesting pushed content and will instead poll for
     *   subscription content use a Poll Service. In this case, if the
     *   TAXII Data Collection cannot be polled, a Status Message
     *   with a status of 'Polling Not Supported' SHOULD be
     *   returned.
     * *
     */
    DELIVERY_PARAMETER((short)5, "deliveryParameter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION_NAME
          return COLLECTION_NAME;
        case 2: // ACTION
          return ACTION;
        case 3: // SUBSCRIPTION_ID
          return SUBSCRIPTION_ID;
        case 4: // SUBSCRIPTION_PARAMETER
          return SUBSCRIPTION_PARAMETER;
        case 5: // DELIVERY_PARAMETER
          return DELIVERY_PARAMETER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SUBSCRIPTION_ID,_Fields.SUBSCRIPTION_PARAMETER,_Fields.DELIVERY_PARAMETER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CollectionSubscriptionAction.class)));
    tmpMap.put(_Fields.SUBSCRIPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("subscriptionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIPTION_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("subscriptionParameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubscriptionParameter.class)));
    tmpMap.put(_Fields.DELIVERY_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("deliveryParameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeliveryParameter.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ManageCollectionSubscriptionRequest.class, metaDataMap);
  }

  public ManageCollectionSubscriptionRequest() {
  }

  public ManageCollectionSubscriptionRequest(
    String collectionName,
    CollectionSubscriptionAction action)
  {
    this();
    this.collectionName = collectionName;
    this.action = action;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ManageCollectionSubscriptionRequest(ManageCollectionSubscriptionRequest other) {
    if (other.isSetCollectionName()) {
      this.collectionName = other.collectionName;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetSubscriptionId()) {
      this.subscriptionId = other.subscriptionId;
    }
    if (other.isSetSubscriptionParameter()) {
      this.subscriptionParameter = new SubscriptionParameter(other.subscriptionParameter);
    }
    if (other.isSetDeliveryParameter()) {
      this.deliveryParameter = new DeliveryParameter(other.deliveryParameter);
    }
  }

  public ManageCollectionSubscriptionRequest deepCopy() {
    return new ManageCollectionSubscriptionRequest(this);
  }

  @Override
  public void clear() {
    this.collectionName = null;
    this.action = null;
    this.subscriptionId = null;
    this.subscriptionParameter = null;
    this.deliveryParameter = null;
  }

  /**
   *  This field identifies the name of the TAXII Data Collection to
   * which the action applies.
   * *
   */
  public String getCollectionName() {
    return this.collectionName;
  }

  /**
   *  This field identifies the name of the TAXII Data Collection to
   * which the action applies.
   * *
   */
  public ManageCollectionSubscriptionRequest setCollectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  public void unsetCollectionName() {
    this.collectionName = null;
  }

  /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionName() {
    return this.collectionName != null;
  }

  public void setCollectionNameIsSet(boolean value) {
    if (!value) {
      this.collectionName = null;
    }
  }

  /**
   * This field identifies the requested action to take
   * 
   * 
   * @see CollectionSubscriptionAction
   */
  public CollectionSubscriptionAction getAction() {
    return this.action;
  }

  /**
   * This field identifies the requested action to take
   * 
   * 
   * @see CollectionSubscriptionAction
   */
  public ManageCollectionSubscriptionRequest setAction(CollectionSubscriptionAction action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  /**
   * * This field contains the ID of a previously created
   *   subscription. For messages where the Action field is
   *   UNSUBSCRIBE, PAUSE, or RESUME, this field MUST be
   *   present. For messages where the Action field is SUBSCRIBE,
   *   this field MUST be ignored. For messages where the Action
   *   field is STATUS, this field MAY be present.
   * *
   */
  public String getSubscriptionId() {
    return this.subscriptionId;
  }

  /**
   * * This field contains the ID of a previously created
   *   subscription. For messages where the Action field is
   *   UNSUBSCRIBE, PAUSE, or RESUME, this field MUST be
   *   present. For messages where the Action field is SUBSCRIBE,
   *   this field MUST be ignored. For messages where the Action
   *   field is STATUS, this field MAY be present.
   * *
   */
  public ManageCollectionSubscriptionRequest setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  public void unsetSubscriptionId() {
    this.subscriptionId = null;
  }

  /** Returns true if field subscriptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionId() {
    return this.subscriptionId != null;
  }

  public void setSubscriptionIdIsSet(boolean value) {
    if (!value) {
      this.subscriptionId = null;
    }
  }

  /**
   *     * This field contains multiple subfields that indicate various
   *       aspects of the requested subscription. This field MUST be
   *       included if and only if the Action of this message is
   *       SUBSCRIBE and MUST be ignored for all other Action values.
   * 
   *       NOTE: Implementors must make this field required if and only if the
   *       value of the Action field is SUBSCRIBE
   * *
   */
  public SubscriptionParameter getSubscriptionParameter() {
    return this.subscriptionParameter;
  }

  /**
   *     * This field contains multiple subfields that indicate various
   *       aspects of the requested subscription. This field MUST be
   *       included if and only if the Action of this message is
   *       SUBSCRIBE and MUST be ignored for all other Action values.
   * 
   *       NOTE: Implementors must make this field required if and only if the
   *       value of the Action field is SUBSCRIBE
   * *
   */
  public ManageCollectionSubscriptionRequest setSubscriptionParameter(SubscriptionParameter subscriptionParameter) {
    this.subscriptionParameter = subscriptionParameter;
    return this;
  }

  public void unsetSubscriptionParameter() {
    this.subscriptionParameter = null;
  }

  /** Returns true if field subscriptionParameter is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionParameter() {
    return this.subscriptionParameter != null;
  }

  public void setSubscriptionParameterIsSet(boolean value) {
    if (!value) {
      this.subscriptionParameter = null;
    }
  }

  /**
   * * This field identifies the parameters used to push content to
   *   the Consumer in fulfillment of a subscription. This field is
   *   only meaningful if the Action field is equal to SUBSCRIBE and
   *   is ignored for all other Action values. Absence of this field
   *   for a SUBSCRIBE action indicates that the requester is not
   *   requesting pushed content and will instead poll for
   *   subscription content use a Poll Service. In this case, if the
   *   TAXII Data Collection cannot be polled, a Status Message
   *   with a status of 'Polling Not Supported' SHOULD be
   *   returned.
   * *
   */
  public DeliveryParameter getDeliveryParameter() {
    return this.deliveryParameter;
  }

  /**
   * * This field identifies the parameters used to push content to
   *   the Consumer in fulfillment of a subscription. This field is
   *   only meaningful if the Action field is equal to SUBSCRIBE and
   *   is ignored for all other Action values. Absence of this field
   *   for a SUBSCRIBE action indicates that the requester is not
   *   requesting pushed content and will instead poll for
   *   subscription content use a Poll Service. In this case, if the
   *   TAXII Data Collection cannot be polled, a Status Message
   *   with a status of 'Polling Not Supported' SHOULD be
   *   returned.
   * *
   */
  public ManageCollectionSubscriptionRequest setDeliveryParameter(DeliveryParameter deliveryParameter) {
    this.deliveryParameter = deliveryParameter;
    return this;
  }

  public void unsetDeliveryParameter() {
    this.deliveryParameter = null;
  }

  /** Returns true if field deliveryParameter is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryParameter() {
    return this.deliveryParameter != null;
  }

  public void setDeliveryParameterIsSet(boolean value) {
    if (!value) {
      this.deliveryParameter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTION_NAME:
      if (value == null) {
        unsetCollectionName();
      } else {
        setCollectionName((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((CollectionSubscriptionAction)value);
      }
      break;

    case SUBSCRIPTION_ID:
      if (value == null) {
        unsetSubscriptionId();
      } else {
        setSubscriptionId((String)value);
      }
      break;

    case SUBSCRIPTION_PARAMETER:
      if (value == null) {
        unsetSubscriptionParameter();
      } else {
        setSubscriptionParameter((SubscriptionParameter)value);
      }
      break;

    case DELIVERY_PARAMETER:
      if (value == null) {
        unsetDeliveryParameter();
      } else {
        setDeliveryParameter((DeliveryParameter)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION_NAME:
      return getCollectionName();

    case ACTION:
      return getAction();

    case SUBSCRIPTION_ID:
      return getSubscriptionId();

    case SUBSCRIPTION_PARAMETER:
      return getSubscriptionParameter();

    case DELIVERY_PARAMETER:
      return getDeliveryParameter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION_NAME:
      return isSetCollectionName();
    case ACTION:
      return isSetAction();
    case SUBSCRIPTION_ID:
      return isSetSubscriptionId();
    case SUBSCRIPTION_PARAMETER:
      return isSetSubscriptionParameter();
    case DELIVERY_PARAMETER:
      return isSetDeliveryParameter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ManageCollectionSubscriptionRequest)
      return this.equals((ManageCollectionSubscriptionRequest)that);
    return false;
  }

  public boolean equals(ManageCollectionSubscriptionRequest that) {
    if (that == null)
      return false;

    boolean this_present_collectionName = true && this.isSetCollectionName();
    boolean that_present_collectionName = true && that.isSetCollectionName();
    if (this_present_collectionName || that_present_collectionName) {
      if (!(this_present_collectionName && that_present_collectionName))
        return false;
      if (!this.collectionName.equals(that.collectionName))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_subscriptionId = true && this.isSetSubscriptionId();
    boolean that_present_subscriptionId = true && that.isSetSubscriptionId();
    if (this_present_subscriptionId || that_present_subscriptionId) {
      if (!(this_present_subscriptionId && that_present_subscriptionId))
        return false;
      if (!this.subscriptionId.equals(that.subscriptionId))
        return false;
    }

    boolean this_present_subscriptionParameter = true && this.isSetSubscriptionParameter();
    boolean that_present_subscriptionParameter = true && that.isSetSubscriptionParameter();
    if (this_present_subscriptionParameter || that_present_subscriptionParameter) {
      if (!(this_present_subscriptionParameter && that_present_subscriptionParameter))
        return false;
      if (!this.subscriptionParameter.equals(that.subscriptionParameter))
        return false;
    }

    boolean this_present_deliveryParameter = true && this.isSetDeliveryParameter();
    boolean that_present_deliveryParameter = true && that.isSetDeliveryParameter();
    if (this_present_deliveryParameter || that_present_deliveryParameter) {
      if (!(this_present_deliveryParameter && that_present_deliveryParameter))
        return false;
      if (!this.deliveryParameter.equals(that.deliveryParameter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ManageCollectionSubscriptionRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionId()).compareTo(other.isSetSubscriptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionId, other.subscriptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionParameter()).compareTo(other.isSetSubscriptionParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionParameter, other.subscriptionParameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryParameter()).compareTo(other.isSetDeliveryParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryParameter, other.deliveryParameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ManageCollectionSubscriptionRequest(");
    boolean first = true;

    sb.append("collectionName:");
    if (this.collectionName == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (isSetSubscriptionId()) {
      if (!first) sb.append(", ");
      sb.append("subscriptionId:");
      if (this.subscriptionId == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriptionId);
      }
      first = false;
    }
    if (isSetSubscriptionParameter()) {
      if (!first) sb.append(", ");
      sb.append("subscriptionParameter:");
      if (this.subscriptionParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriptionParameter);
      }
      first = false;
    }
    if (isSetDeliveryParameter()) {
      if (!first) sb.append(", ");
      sb.append("deliveryParameter:");
      if (this.deliveryParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryParameter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (collectionName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'collectionName' was not present! Struct: " + toString());
    }
    if (action == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'action' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (subscriptionParameter != null) {
      subscriptionParameter.validate();
    }
    if (deliveryParameter != null) {
      deliveryParameter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ManageCollectionSubscriptionRequestStandardSchemeFactory implements SchemeFactory {
    public ManageCollectionSubscriptionRequestStandardScheme getScheme() {
      return new ManageCollectionSubscriptionRequestStandardScheme();
    }
  }

  private static class ManageCollectionSubscriptionRequestStandardScheme extends StandardScheme<ManageCollectionSubscriptionRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ManageCollectionSubscriptionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionName = iprot.readString();
              struct.setCollectionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action = CollectionSubscriptionAction.findByValue(iprot.readI32());
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUBSCRIPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subscriptionId = iprot.readString();
              struct.setSubscriptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBSCRIPTION_PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.subscriptionParameter = new SubscriptionParameter();
              struct.subscriptionParameter.read(iprot);
              struct.setSubscriptionParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DELIVERY_PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deliveryParameter = new DeliveryParameter();
              struct.deliveryParameter.read(iprot);
              struct.setDeliveryParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ManageCollectionSubscriptionRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collectionName != null) {
        oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
        oprot.writeString(struct.collectionName);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeI32(struct.action.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.subscriptionId != null) {
        if (struct.isSetSubscriptionId()) {
          oprot.writeFieldBegin(SUBSCRIPTION_ID_FIELD_DESC);
          oprot.writeString(struct.subscriptionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscriptionParameter != null) {
        if (struct.isSetSubscriptionParameter()) {
          oprot.writeFieldBegin(SUBSCRIPTION_PARAMETER_FIELD_DESC);
          struct.subscriptionParameter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliveryParameter != null) {
        if (struct.isSetDeliveryParameter()) {
          oprot.writeFieldBegin(DELIVERY_PARAMETER_FIELD_DESC);
          struct.deliveryParameter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ManageCollectionSubscriptionRequestTupleSchemeFactory implements SchemeFactory {
    public ManageCollectionSubscriptionRequestTupleScheme getScheme() {
      return new ManageCollectionSubscriptionRequestTupleScheme();
    }
  }

  private static class ManageCollectionSubscriptionRequestTupleScheme extends TupleScheme<ManageCollectionSubscriptionRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ManageCollectionSubscriptionRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.collectionName);
      oprot.writeI32(struct.action.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetSubscriptionId()) {
        optionals.set(0);
      }
      if (struct.isSetSubscriptionParameter()) {
        optionals.set(1);
      }
      if (struct.isSetDeliveryParameter()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSubscriptionId()) {
        oprot.writeString(struct.subscriptionId);
      }
      if (struct.isSetSubscriptionParameter()) {
        struct.subscriptionParameter.write(oprot);
      }
      if (struct.isSetDeliveryParameter()) {
        struct.deliveryParameter.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ManageCollectionSubscriptionRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.collectionName = iprot.readString();
      struct.setCollectionNameIsSet(true);
      struct.action = CollectionSubscriptionAction.findByValue(iprot.readI32());
      struct.setActionIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.subscriptionId = iprot.readString();
        struct.setSubscriptionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subscriptionParameter = new SubscriptionParameter();
        struct.subscriptionParameter.read(iprot);
        struct.setSubscriptionParameterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deliveryParameter = new DeliveryParameter();
        struct.deliveryParameter.read(iprot);
        struct.setDeliveryParameterIsSet(true);
      }
    }
  }

}

