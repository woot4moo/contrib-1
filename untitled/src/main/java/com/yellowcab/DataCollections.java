/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataCollections implements org.apache.thrift.TBase<DataCollections, DataCollections._Fields>, java.io.Serializable, Cloneable, Comparable<DataCollections> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataCollections");

  private static final org.apache.thrift.protocol.TField FEED_INFORMATION_FIELD_DESC = new org.apache.thrift.protocol.TField("feedInformation", org.apache.thrift.protocol.TType.SET, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataCollectionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataCollectionsTupleSchemeFactory());
  }

  public Set<CollectionInformation> feedInformation; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FEED_INFORMATION((short)1, "feedInformation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FEED_INFORMATION
          return FEED_INFORMATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FEED_INFORMATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FEED_INFORMATION, new org.apache.thrift.meta_data.FieldMetaData("feedInformation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionInformation.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataCollections.class, metaDataMap);
  }

  public DataCollections() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataCollections(DataCollections other) {
    if (other.isSetFeedInformation()) {
      Set<CollectionInformation> __this__feedInformation = new HashSet<CollectionInformation>(other.feedInformation.size());
      for (CollectionInformation other_element : other.feedInformation) {
        __this__feedInformation.add(new CollectionInformation(other_element));
      }
      this.feedInformation = __this__feedInformation;
    }
  }

  public DataCollections deepCopy() {
    return new DataCollections(this);
  }

  @Override
  public void clear() {
    this.feedInformation = null;
  }

  public int getFeedInformationSize() {
    return (this.feedInformation == null) ? 0 : this.feedInformation.size();
  }

  public java.util.Iterator<CollectionInformation> getFeedInformationIterator() {
    return (this.feedInformation == null) ? null : this.feedInformation.iterator();
  }

  public void addToFeedInformation(CollectionInformation elem) {
    if (this.feedInformation == null) {
      this.feedInformation = new HashSet<CollectionInformation>();
    }
    this.feedInformation.add(elem);
  }

  public Set<CollectionInformation> getFeedInformation() {
    return this.feedInformation;
  }

  public DataCollections setFeedInformation(Set<CollectionInformation> feedInformation) {
    this.feedInformation = feedInformation;
    return this;
  }

  public void unsetFeedInformation() {
    this.feedInformation = null;
  }

  /** Returns true if field feedInformation is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedInformation() {
    return this.feedInformation != null;
  }

  public void setFeedInformationIsSet(boolean value) {
    if (!value) {
      this.feedInformation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FEED_INFORMATION:
      if (value == null) {
        unsetFeedInformation();
      } else {
        setFeedInformation((Set<CollectionInformation>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FEED_INFORMATION:
      return getFeedInformation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FEED_INFORMATION:
      return isSetFeedInformation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataCollections)
      return this.equals((DataCollections)that);
    return false;
  }

  public boolean equals(DataCollections that) {
    if (that == null)
      return false;

    boolean this_present_feedInformation = true && this.isSetFeedInformation();
    boolean that_present_feedInformation = true && that.isSetFeedInformation();
    if (this_present_feedInformation || that_present_feedInformation) {
      if (!(this_present_feedInformation && that_present_feedInformation))
        return false;
      if (!this.feedInformation.equals(that.feedInformation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DataCollections other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFeedInformation()).compareTo(other.isSetFeedInformation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedInformation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedInformation, other.feedInformation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataCollections(");
    boolean first = true;

    if (isSetFeedInformation()) {
      sb.append("feedInformation:");
      if (this.feedInformation == null) {
        sb.append("null");
      } else {
        sb.append(this.feedInformation);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataCollectionsStandardSchemeFactory implements SchemeFactory {
    public DataCollectionsStandardScheme getScheme() {
      return new DataCollectionsStandardScheme();
    }
  }

  private static class DataCollectionsStandardScheme extends StandardScheme<DataCollections> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataCollections struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FEED_INFORMATION
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set160 = iprot.readSetBegin();
                struct.feedInformation = new HashSet<CollectionInformation>(2*_set160.size);
                for (int _i161 = 0; _i161 < _set160.size; ++_i161)
                {
                  CollectionInformation _elem162;
                  _elem162 = new CollectionInformation();
                  _elem162.read(iprot);
                  struct.feedInformation.add(_elem162);
                }
                iprot.readSetEnd();
              }
              struct.setFeedInformationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataCollections struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.feedInformation != null) {
        if (struct.isSetFeedInformation()) {
          oprot.writeFieldBegin(FEED_INFORMATION_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.feedInformation.size()));
            for (CollectionInformation _iter163 : struct.feedInformation)
            {
              _iter163.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataCollectionsTupleSchemeFactory implements SchemeFactory {
    public DataCollectionsTupleScheme getScheme() {
      return new DataCollectionsTupleScheme();
    }
  }

  private static class DataCollectionsTupleScheme extends TupleScheme<DataCollections> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataCollections struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFeedInformation()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetFeedInformation()) {
        {
          oprot.writeI32(struct.feedInformation.size());
          for (CollectionInformation _iter164 : struct.feedInformation)
          {
            _iter164.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataCollections struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set165 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.feedInformation = new HashSet<CollectionInformation>(2*_set165.size);
          for (int _i166 = 0; _i166 < _set165.size; ++_i166)
          {
            CollectionInformation _elem167;
            _elem167 = new CollectionInformation();
            _elem167.read(iprot);
            struct.feedInformation.add(_elem167);
          }
        }
        struct.setFeedInformationIsSet(true);
      }
    }
  }

}

