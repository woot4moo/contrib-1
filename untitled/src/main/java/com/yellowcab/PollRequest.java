/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * * This message is sent from a Consumer to a TAXII Poll Service to request that data from the TAXII Data
 *   Collection be returned to the Consumer. Poll Requests are always made against a specific TAXII Data
 *   Collection. Whether or not the Consumer needs an established subscription to that TAXII Data Collection
 *   in order to receive content is left to the Producer and can vary across Data Collections.
 * 
 *   NOTE:  Exactly one of Subscription ID or Poll Parameters MUST be  present
 * *
 */
public class PollRequest implements org.apache.thrift.TBase<PollRequest, PollRequest._Fields>, java.io.Serializable, Cloneable, Comparable<PollRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PollRequest");

  private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("exclusiveBeginTimestampLabel", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INCLUSIVE_END_TIMESTAMP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("inclusiveEndTimestampLabel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POLL_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("pollParameter", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PollRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PollRequestTupleSchemeFactory());
  }

  /**
   * * This field identifies the name of the TAXII Data Collection
   *   that is being polled.
   * 
   * *
   */
  public String collectionName; // required
  /**
   * * This field contains a Timestamp Label indicating the
   *   beginning of the range of TAXII Data Feed (i.e., ordered
   *   TAXII Data Collection) content the requester wishes to
   *   receive. The receiving TAXII Poll Service MUST ignore this
   *   field if the named TAXII Data Collection is a Data Set (i.e.,
   *   an unordered TAXII Data Collection). This field is exclusive
   *   (e.g., the requester is asking for content where the
   *   content's Timestamp Label is greater than this field value).
   *   Absence of this field when polling a Data Feed indicates
   *   that the requested range has no lower bound.
   * 
   * *
   */
  public String exclusiveBeginTimestampLabel; // optional
  /**
   * * This field contains a Timestamp Label indicating the end of
   *   the range of TAXII Data Feed content the requester wishes
   *   to receive. The receiving TAXII Poll Service MUST ignore
   *   this field if the named TAXII Data Collection is a Data Set.
   *   This range is inclusive (e.g., the requester is asking for
   *   content where the content's Timestamp Label is less than
   *   or equal to this field value). Absence of this field when
   *   polling a Data Feed indicates that the requested range has
   *   no upper bound.
   * 
   * *
   */
  public String inclusiveEndTimestampLabel; // optional
  /**
   * * This field identifies the existing subscription the Consumer
   *   wishes to poll. If the Poll Service requires established
   *   subscriptions for polling and this field is not present, the
   *   Poll Service SHOULD respond with a TAXII Status Message
   *   with a status of "Denied".
   * 
   * *
   */
  public String subscriptionId; // optional
  /**
   * * This field contains multiple subfields that indicate the
   *   content to return in the Poll Response. This field MUST
   *   NOT be present if a Subscription ID is provided; if a
   *   Subscription ID is provided, the corresponding information
   *   from the subscription is used instead.
   * *
   */
  public PollParameter pollParameter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field identifies the name of the TAXII Data Collection
     *   that is being polled.
     * 
     * *
     */
    COLLECTION_NAME((short)1, "collectionName"),
    /**
     * * This field contains a Timestamp Label indicating the
     *   beginning of the range of TAXII Data Feed (i.e., ordered
     *   TAXII Data Collection) content the requester wishes to
     *   receive. The receiving TAXII Poll Service MUST ignore this
     *   field if the named TAXII Data Collection is a Data Set (i.e.,
     *   an unordered TAXII Data Collection). This field is exclusive
     *   (e.g., the requester is asking for content where the
     *   content's Timestamp Label is greater than this field value).
     *   Absence of this field when polling a Data Feed indicates
     *   that the requested range has no lower bound.
     * 
     * *
     */
    EXCLUSIVE_BEGIN_TIMESTAMP_LABEL((short)2, "exclusiveBeginTimestampLabel"),
    /**
     * * This field contains a Timestamp Label indicating the end of
     *   the range of TAXII Data Feed content the requester wishes
     *   to receive. The receiving TAXII Poll Service MUST ignore
     *   this field if the named TAXII Data Collection is a Data Set.
     *   This range is inclusive (e.g., the requester is asking for
     *   content where the content's Timestamp Label is less than
     *   or equal to this field value). Absence of this field when
     *   polling a Data Feed indicates that the requested range has
     *   no upper bound.
     * 
     * *
     */
    INCLUSIVE_END_TIMESTAMP_LABEL((short)3, "inclusiveEndTimestampLabel"),
    /**
     * * This field identifies the existing subscription the Consumer
     *   wishes to poll. If the Poll Service requires established
     *   subscriptions for polling and this field is not present, the
     *   Poll Service SHOULD respond with a TAXII Status Message
     *   with a status of "Denied".
     * 
     * *
     */
    SUBSCRIPTION_ID((short)4, "subscriptionId"),
    /**
     * * This field contains multiple subfields that indicate the
     *   content to return in the Poll Response. This field MUST
     *   NOT be present if a Subscription ID is provided; if a
     *   Subscription ID is provided, the corresponding information
     *   from the subscription is used instead.
     * *
     */
    POLL_PARAMETER((short)5, "pollParameter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION_NAME
          return COLLECTION_NAME;
        case 2: // EXCLUSIVE_BEGIN_TIMESTAMP_LABEL
          return EXCLUSIVE_BEGIN_TIMESTAMP_LABEL;
        case 3: // INCLUSIVE_END_TIMESTAMP_LABEL
          return INCLUSIVE_END_TIMESTAMP_LABEL;
        case 4: // SUBSCRIPTION_ID
          return SUBSCRIPTION_ID;
        case 5: // POLL_PARAMETER
          return POLL_PARAMETER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.EXCLUSIVE_BEGIN_TIMESTAMP_LABEL,_Fields.INCLUSIVE_END_TIMESTAMP_LABEL,_Fields.SUBSCRIPTION_ID,_Fields.POLL_PARAMETER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCLUSIVE_BEGIN_TIMESTAMP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("exclusiveBeginTimestampLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TimestampLabel")));
    tmpMap.put(_Fields.INCLUSIVE_END_TIMESTAMP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("inclusiveEndTimestampLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TimestampLabel")));
    tmpMap.put(_Fields.SUBSCRIPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("subscriptionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLL_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("pollParameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PollParameter.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PollRequest.class, metaDataMap);
  }

  public PollRequest() {
  }

  public PollRequest(
    String collectionName)
  {
    this();
    this.collectionName = collectionName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PollRequest(PollRequest other) {
    if (other.isSetCollectionName()) {
      this.collectionName = other.collectionName;
    }
    if (other.isSetExclusiveBeginTimestampLabel()) {
      this.exclusiveBeginTimestampLabel = other.exclusiveBeginTimestampLabel;
    }
    if (other.isSetInclusiveEndTimestampLabel()) {
      this.inclusiveEndTimestampLabel = other.inclusiveEndTimestampLabel;
    }
    if (other.isSetSubscriptionId()) {
      this.subscriptionId = other.subscriptionId;
    }
    if (other.isSetPollParameter()) {
      this.pollParameter = new PollParameter(other.pollParameter);
    }
  }

  public PollRequest deepCopy() {
    return new PollRequest(this);
  }

  @Override
  public void clear() {
    this.collectionName = null;
    this.exclusiveBeginTimestampLabel = null;
    this.inclusiveEndTimestampLabel = null;
    this.subscriptionId = null;
    this.pollParameter = null;
  }

  /**
   * * This field identifies the name of the TAXII Data Collection
   *   that is being polled.
   * 
   * *
   */
  public String getCollectionName() {
    return this.collectionName;
  }

  /**
   * * This field identifies the name of the TAXII Data Collection
   *   that is being polled.
   * 
   * *
   */
  public PollRequest setCollectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  public void unsetCollectionName() {
    this.collectionName = null;
  }

  /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionName() {
    return this.collectionName != null;
  }

  public void setCollectionNameIsSet(boolean value) {
    if (!value) {
      this.collectionName = null;
    }
  }

  /**
   * * This field contains a Timestamp Label indicating the
   *   beginning of the range of TAXII Data Feed (i.e., ordered
   *   TAXII Data Collection) content the requester wishes to
   *   receive. The receiving TAXII Poll Service MUST ignore this
   *   field if the named TAXII Data Collection is a Data Set (i.e.,
   *   an unordered TAXII Data Collection). This field is exclusive
   *   (e.g., the requester is asking for content where the
   *   content's Timestamp Label is greater than this field value).
   *   Absence of this field when polling a Data Feed indicates
   *   that the requested range has no lower bound.
   * 
   * *
   */
  public String getExclusiveBeginTimestampLabel() {
    return this.exclusiveBeginTimestampLabel;
  }

  /**
   * * This field contains a Timestamp Label indicating the
   *   beginning of the range of TAXII Data Feed (i.e., ordered
   *   TAXII Data Collection) content the requester wishes to
   *   receive. The receiving TAXII Poll Service MUST ignore this
   *   field if the named TAXII Data Collection is a Data Set (i.e.,
   *   an unordered TAXII Data Collection). This field is exclusive
   *   (e.g., the requester is asking for content where the
   *   content's Timestamp Label is greater than this field value).
   *   Absence of this field when polling a Data Feed indicates
   *   that the requested range has no lower bound.
   * 
   * *
   */
  public PollRequest setExclusiveBeginTimestampLabel(String exclusiveBeginTimestampLabel) {
    this.exclusiveBeginTimestampLabel = exclusiveBeginTimestampLabel;
    return this;
  }

  public void unsetExclusiveBeginTimestampLabel() {
    this.exclusiveBeginTimestampLabel = null;
  }

  /** Returns true if field exclusiveBeginTimestampLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetExclusiveBeginTimestampLabel() {
    return this.exclusiveBeginTimestampLabel != null;
  }

  public void setExclusiveBeginTimestampLabelIsSet(boolean value) {
    if (!value) {
      this.exclusiveBeginTimestampLabel = null;
    }
  }

  /**
   * * This field contains a Timestamp Label indicating the end of
   *   the range of TAXII Data Feed content the requester wishes
   *   to receive. The receiving TAXII Poll Service MUST ignore
   *   this field if the named TAXII Data Collection is a Data Set.
   *   This range is inclusive (e.g., the requester is asking for
   *   content where the content's Timestamp Label is less than
   *   or equal to this field value). Absence of this field when
   *   polling a Data Feed indicates that the requested range has
   *   no upper bound.
   * 
   * *
   */
  public String getInclusiveEndTimestampLabel() {
    return this.inclusiveEndTimestampLabel;
  }

  /**
   * * This field contains a Timestamp Label indicating the end of
   *   the range of TAXII Data Feed content the requester wishes
   *   to receive. The receiving TAXII Poll Service MUST ignore
   *   this field if the named TAXII Data Collection is a Data Set.
   *   This range is inclusive (e.g., the requester is asking for
   *   content where the content's Timestamp Label is less than
   *   or equal to this field value). Absence of this field when
   *   polling a Data Feed indicates that the requested range has
   *   no upper bound.
   * 
   * *
   */
  public PollRequest setInclusiveEndTimestampLabel(String inclusiveEndTimestampLabel) {
    this.inclusiveEndTimestampLabel = inclusiveEndTimestampLabel;
    return this;
  }

  public void unsetInclusiveEndTimestampLabel() {
    this.inclusiveEndTimestampLabel = null;
  }

  /** Returns true if field inclusiveEndTimestampLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetInclusiveEndTimestampLabel() {
    return this.inclusiveEndTimestampLabel != null;
  }

  public void setInclusiveEndTimestampLabelIsSet(boolean value) {
    if (!value) {
      this.inclusiveEndTimestampLabel = null;
    }
  }

  /**
   * * This field identifies the existing subscription the Consumer
   *   wishes to poll. If the Poll Service requires established
   *   subscriptions for polling and this field is not present, the
   *   Poll Service SHOULD respond with a TAXII Status Message
   *   with a status of "Denied".
   * 
   * *
   */
  public String getSubscriptionId() {
    return this.subscriptionId;
  }

  /**
   * * This field identifies the existing subscription the Consumer
   *   wishes to poll. If the Poll Service requires established
   *   subscriptions for polling and this field is not present, the
   *   Poll Service SHOULD respond with a TAXII Status Message
   *   with a status of "Denied".
   * 
   * *
   */
  public PollRequest setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  public void unsetSubscriptionId() {
    this.subscriptionId = null;
  }

  /** Returns true if field subscriptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionId() {
    return this.subscriptionId != null;
  }

  public void setSubscriptionIdIsSet(boolean value) {
    if (!value) {
      this.subscriptionId = null;
    }
  }

  /**
   * * This field contains multiple subfields that indicate the
   *   content to return in the Poll Response. This field MUST
   *   NOT be present if a Subscription ID is provided; if a
   *   Subscription ID is provided, the corresponding information
   *   from the subscription is used instead.
   * *
   */
  public PollParameter getPollParameter() {
    return this.pollParameter;
  }

  /**
   * * This field contains multiple subfields that indicate the
   *   content to return in the Poll Response. This field MUST
   *   NOT be present if a Subscription ID is provided; if a
   *   Subscription ID is provided, the corresponding information
   *   from the subscription is used instead.
   * *
   */
  public PollRequest setPollParameter(PollParameter pollParameter) {
    this.pollParameter = pollParameter;
    return this;
  }

  public void unsetPollParameter() {
    this.pollParameter = null;
  }

  /** Returns true if field pollParameter is set (has been assigned a value) and false otherwise */
  public boolean isSetPollParameter() {
    return this.pollParameter != null;
  }

  public void setPollParameterIsSet(boolean value) {
    if (!value) {
      this.pollParameter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTION_NAME:
      if (value == null) {
        unsetCollectionName();
      } else {
        setCollectionName((String)value);
      }
      break;

    case EXCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      if (value == null) {
        unsetExclusiveBeginTimestampLabel();
      } else {
        setExclusiveBeginTimestampLabel((String)value);
      }
      break;

    case INCLUSIVE_END_TIMESTAMP_LABEL:
      if (value == null) {
        unsetInclusiveEndTimestampLabel();
      } else {
        setInclusiveEndTimestampLabel((String)value);
      }
      break;

    case SUBSCRIPTION_ID:
      if (value == null) {
        unsetSubscriptionId();
      } else {
        setSubscriptionId((String)value);
      }
      break;

    case POLL_PARAMETER:
      if (value == null) {
        unsetPollParameter();
      } else {
        setPollParameter((PollParameter)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION_NAME:
      return getCollectionName();

    case EXCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return getExclusiveBeginTimestampLabel();

    case INCLUSIVE_END_TIMESTAMP_LABEL:
      return getInclusiveEndTimestampLabel();

    case SUBSCRIPTION_ID:
      return getSubscriptionId();

    case POLL_PARAMETER:
      return getPollParameter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION_NAME:
      return isSetCollectionName();
    case EXCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return isSetExclusiveBeginTimestampLabel();
    case INCLUSIVE_END_TIMESTAMP_LABEL:
      return isSetInclusiveEndTimestampLabel();
    case SUBSCRIPTION_ID:
      return isSetSubscriptionId();
    case POLL_PARAMETER:
      return isSetPollParameter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PollRequest)
      return this.equals((PollRequest)that);
    return false;
  }

  public boolean equals(PollRequest that) {
    if (that == null)
      return false;

    boolean this_present_collectionName = true && this.isSetCollectionName();
    boolean that_present_collectionName = true && that.isSetCollectionName();
    if (this_present_collectionName || that_present_collectionName) {
      if (!(this_present_collectionName && that_present_collectionName))
        return false;
      if (!this.collectionName.equals(that.collectionName))
        return false;
    }

    boolean this_present_exclusiveBeginTimestampLabel = true && this.isSetExclusiveBeginTimestampLabel();
    boolean that_present_exclusiveBeginTimestampLabel = true && that.isSetExclusiveBeginTimestampLabel();
    if (this_present_exclusiveBeginTimestampLabel || that_present_exclusiveBeginTimestampLabel) {
      if (!(this_present_exclusiveBeginTimestampLabel && that_present_exclusiveBeginTimestampLabel))
        return false;
      if (!this.exclusiveBeginTimestampLabel.equals(that.exclusiveBeginTimestampLabel))
        return false;
    }

    boolean this_present_inclusiveEndTimestampLabel = true && this.isSetInclusiveEndTimestampLabel();
    boolean that_present_inclusiveEndTimestampLabel = true && that.isSetInclusiveEndTimestampLabel();
    if (this_present_inclusiveEndTimestampLabel || that_present_inclusiveEndTimestampLabel) {
      if (!(this_present_inclusiveEndTimestampLabel && that_present_inclusiveEndTimestampLabel))
        return false;
      if (!this.inclusiveEndTimestampLabel.equals(that.inclusiveEndTimestampLabel))
        return false;
    }

    boolean this_present_subscriptionId = true && this.isSetSubscriptionId();
    boolean that_present_subscriptionId = true && that.isSetSubscriptionId();
    if (this_present_subscriptionId || that_present_subscriptionId) {
      if (!(this_present_subscriptionId && that_present_subscriptionId))
        return false;
      if (!this.subscriptionId.equals(that.subscriptionId))
        return false;
    }

    boolean this_present_pollParameter = true && this.isSetPollParameter();
    boolean that_present_pollParameter = true && that.isSetPollParameter();
    if (this_present_pollParameter || that_present_pollParameter) {
      if (!(this_present_pollParameter && that_present_pollParameter))
        return false;
      if (!this.pollParameter.equals(that.pollParameter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PollRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExclusiveBeginTimestampLabel()).compareTo(other.isSetExclusiveBeginTimestampLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExclusiveBeginTimestampLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exclusiveBeginTimestampLabel, other.exclusiveBeginTimestampLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInclusiveEndTimestampLabel()).compareTo(other.isSetInclusiveEndTimestampLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInclusiveEndTimestampLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inclusiveEndTimestampLabel, other.inclusiveEndTimestampLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionId()).compareTo(other.isSetSubscriptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionId, other.subscriptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPollParameter()).compareTo(other.isSetPollParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollParameter, other.pollParameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PollRequest(");
    boolean first = true;

    sb.append("collectionName:");
    if (this.collectionName == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionName);
    }
    first = false;
    if (isSetExclusiveBeginTimestampLabel()) {
      if (!first) sb.append(", ");
      sb.append("exclusiveBeginTimestampLabel:");
      if (this.exclusiveBeginTimestampLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.exclusiveBeginTimestampLabel);
      }
      first = false;
    }
    if (isSetInclusiveEndTimestampLabel()) {
      if (!first) sb.append(", ");
      sb.append("inclusiveEndTimestampLabel:");
      if (this.inclusiveEndTimestampLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.inclusiveEndTimestampLabel);
      }
      first = false;
    }
    if (isSetSubscriptionId()) {
      if (!first) sb.append(", ");
      sb.append("subscriptionId:");
      if (this.subscriptionId == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriptionId);
      }
      first = false;
    }
    if (isSetPollParameter()) {
      if (!first) sb.append(", ");
      sb.append("pollParameter:");
      if (this.pollParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.pollParameter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (collectionName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'collectionName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (pollParameter != null) {
      pollParameter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PollRequestStandardSchemeFactory implements SchemeFactory {
    public PollRequestStandardScheme getScheme() {
      return new PollRequestStandardScheme();
    }
  }

  private static class PollRequestStandardScheme extends StandardScheme<PollRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PollRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionName = iprot.readString();
              struct.setCollectionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCLUSIVE_BEGIN_TIMESTAMP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exclusiveBeginTimestampLabel = iprot.readString();
              struct.setExclusiveBeginTimestampLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INCLUSIVE_END_TIMESTAMP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inclusiveEndTimestampLabel = iprot.readString();
              struct.setInclusiveEndTimestampLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBSCRIPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subscriptionId = iprot.readString();
              struct.setSubscriptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POLL_PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pollParameter = new PollParameter();
              struct.pollParameter.read(iprot);
              struct.setPollParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PollRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collectionName != null) {
        oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
        oprot.writeString(struct.collectionName);
        oprot.writeFieldEnd();
      }
      if (struct.exclusiveBeginTimestampLabel != null) {
        if (struct.isSetExclusiveBeginTimestampLabel()) {
          oprot.writeFieldBegin(EXCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC);
          oprot.writeString(struct.exclusiveBeginTimestampLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inclusiveEndTimestampLabel != null) {
        if (struct.isSetInclusiveEndTimestampLabel()) {
          oprot.writeFieldBegin(INCLUSIVE_END_TIMESTAMP_LABEL_FIELD_DESC);
          oprot.writeString(struct.inclusiveEndTimestampLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscriptionId != null) {
        if (struct.isSetSubscriptionId()) {
          oprot.writeFieldBegin(SUBSCRIPTION_ID_FIELD_DESC);
          oprot.writeString(struct.subscriptionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pollParameter != null) {
        if (struct.isSetPollParameter()) {
          oprot.writeFieldBegin(POLL_PARAMETER_FIELD_DESC);
          struct.pollParameter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PollRequestTupleSchemeFactory implements SchemeFactory {
    public PollRequestTupleScheme getScheme() {
      return new PollRequestTupleScheme();
    }
  }

  private static class PollRequestTupleScheme extends TupleScheme<PollRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PollRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.collectionName);
      BitSet optionals = new BitSet();
      if (struct.isSetExclusiveBeginTimestampLabel()) {
        optionals.set(0);
      }
      if (struct.isSetInclusiveEndTimestampLabel()) {
        optionals.set(1);
      }
      if (struct.isSetSubscriptionId()) {
        optionals.set(2);
      }
      if (struct.isSetPollParameter()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetExclusiveBeginTimestampLabel()) {
        oprot.writeString(struct.exclusiveBeginTimestampLabel);
      }
      if (struct.isSetInclusiveEndTimestampLabel()) {
        oprot.writeString(struct.inclusiveEndTimestampLabel);
      }
      if (struct.isSetSubscriptionId()) {
        oprot.writeString(struct.subscriptionId);
      }
      if (struct.isSetPollParameter()) {
        struct.pollParameter.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PollRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.collectionName = iprot.readString();
      struct.setCollectionNameIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.exclusiveBeginTimestampLabel = iprot.readString();
        struct.setExclusiveBeginTimestampLabelIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inclusiveEndTimestampLabel = iprot.readString();
        struct.setInclusiveEndTimestampLabelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subscriptionId = iprot.readString();
        struct.setSubscriptionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pollParameter = new PollParameter();
        struct.pollParameter.read(iprot);
        struct.setPollParameterIsSet(true);
      }
    }
  }

}

