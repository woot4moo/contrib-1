/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Represents a polling instance.
 * 
 */
public class PollingInstance implements org.apache.thrift.TBase<PollingInstance, PollingInstance._Fields>, java.io.Serializable, Cloneable, Comparable<PollingInstance> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PollingInstance");

  private static final org.apache.thrift.protocol.TField POLL_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("pollProtocol", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField POLL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("pollAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField POLL_MESSAGE_BINDINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("pollMessageBindings", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PollingInstanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PollingInstanceTupleSchemeFactory());
  }

  /**
   * * This field identifies the protocol binding supported by
   *   this Poll Service instance. This MUST be a TAXII
   *   Protocol Binding Version ID as defined in a TAXII
   *   Protocol Binding Specification or by a third party.
   * *
   */
  public String pollProtocol; // required
  /**
   * * This field identifies the address that can be used to
   *   contact the TAXII Daemon hosting this Poll Service
   *   instance. This field MUST use a format appropriate to
   *   the Poll Protocol field value.
   * *
   */
  public String pollAddress; // required
  /**
   * * This field identifies the message bindings supported
   *   by this Poll Service instance. Each message binding
   *   MUST be a TAXII Message Binding Version ID as
   *   defined in a TAXII Message Binding Specification or by
   *   a third party.
   * *
   */
  public Set<String> pollMessageBindings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field identifies the protocol binding supported by
     *   this Poll Service instance. This MUST be a TAXII
     *   Protocol Binding Version ID as defined in a TAXII
     *   Protocol Binding Specification or by a third party.
     * *
     */
    POLL_PROTOCOL((short)1, "pollProtocol"),
    /**
     * * This field identifies the address that can be used to
     *   contact the TAXII Daemon hosting this Poll Service
     *   instance. This field MUST use a format appropriate to
     *   the Poll Protocol field value.
     * *
     */
    POLL_ADDRESS((short)2, "pollAddress"),
    /**
     * * This field identifies the message bindings supported
     *   by this Poll Service instance. Each message binding
     *   MUST be a TAXII Message Binding Version ID as
     *   defined in a TAXII Message Binding Specification or by
     *   a third party.
     * *
     */
    POLL_MESSAGE_BINDINGS((short)3, "pollMessageBindings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POLL_PROTOCOL
          return POLL_PROTOCOL;
        case 2: // POLL_ADDRESS
          return POLL_ADDRESS;
        case 3: // POLL_MESSAGE_BINDINGS
          return POLL_MESSAGE_BINDINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POLL_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("pollProtocol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("pollAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLL_MESSAGE_BINDINGS, new org.apache.thrift.meta_data.FieldMetaData("pollMessageBindings", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PollingInstance.class, metaDataMap);
  }

  public PollingInstance() {
  }

  public PollingInstance(
    String pollProtocol,
    String pollAddress,
    Set<String> pollMessageBindings)
  {
    this();
    this.pollProtocol = pollProtocol;
    this.pollAddress = pollAddress;
    this.pollMessageBindings = pollMessageBindings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PollingInstance(PollingInstance other) {
    if (other.isSetPollProtocol()) {
      this.pollProtocol = other.pollProtocol;
    }
    if (other.isSetPollAddress()) {
      this.pollAddress = other.pollAddress;
    }
    if (other.isSetPollMessageBindings()) {
      Set<String> __this__pollMessageBindings = new HashSet<String>(other.pollMessageBindings);
      this.pollMessageBindings = __this__pollMessageBindings;
    }
  }

  public PollingInstance deepCopy() {
    return new PollingInstance(this);
  }

  @Override
  public void clear() {
    this.pollProtocol = null;
    this.pollAddress = null;
    this.pollMessageBindings = null;
  }

  /**
   * * This field identifies the protocol binding supported by
   *   this Poll Service instance. This MUST be a TAXII
   *   Protocol Binding Version ID as defined in a TAXII
   *   Protocol Binding Specification or by a third party.
   * *
   */
  public String getPollProtocol() {
    return this.pollProtocol;
  }

  /**
   * * This field identifies the protocol binding supported by
   *   this Poll Service instance. This MUST be a TAXII
   *   Protocol Binding Version ID as defined in a TAXII
   *   Protocol Binding Specification or by a third party.
   * *
   */
  public PollingInstance setPollProtocol(String pollProtocol) {
    this.pollProtocol = pollProtocol;
    return this;
  }

  public void unsetPollProtocol() {
    this.pollProtocol = null;
  }

  /** Returns true if field pollProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetPollProtocol() {
    return this.pollProtocol != null;
  }

  public void setPollProtocolIsSet(boolean value) {
    if (!value) {
      this.pollProtocol = null;
    }
  }

  /**
   * * This field identifies the address that can be used to
   *   contact the TAXII Daemon hosting this Poll Service
   *   instance. This field MUST use a format appropriate to
   *   the Poll Protocol field value.
   * *
   */
  public String getPollAddress() {
    return this.pollAddress;
  }

  /**
   * * This field identifies the address that can be used to
   *   contact the TAXII Daemon hosting this Poll Service
   *   instance. This field MUST use a format appropriate to
   *   the Poll Protocol field value.
   * *
   */
  public PollingInstance setPollAddress(String pollAddress) {
    this.pollAddress = pollAddress;
    return this;
  }

  public void unsetPollAddress() {
    this.pollAddress = null;
  }

  /** Returns true if field pollAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetPollAddress() {
    return this.pollAddress != null;
  }

  public void setPollAddressIsSet(boolean value) {
    if (!value) {
      this.pollAddress = null;
    }
  }

  public int getPollMessageBindingsSize() {
    return (this.pollMessageBindings == null) ? 0 : this.pollMessageBindings.size();
  }

  public java.util.Iterator<String> getPollMessageBindingsIterator() {
    return (this.pollMessageBindings == null) ? null : this.pollMessageBindings.iterator();
  }

  public void addToPollMessageBindings(String elem) {
    if (this.pollMessageBindings == null) {
      this.pollMessageBindings = new HashSet<String>();
    }
    this.pollMessageBindings.add(elem);
  }

  /**
   * * This field identifies the message bindings supported
   *   by this Poll Service instance. Each message binding
   *   MUST be a TAXII Message Binding Version ID as
   *   defined in a TAXII Message Binding Specification or by
   *   a third party.
   * *
   */
  public Set<String> getPollMessageBindings() {
    return this.pollMessageBindings;
  }

  /**
   * * This field identifies the message bindings supported
   *   by this Poll Service instance. Each message binding
   *   MUST be a TAXII Message Binding Version ID as
   *   defined in a TAXII Message Binding Specification or by
   *   a third party.
   * *
   */
  public PollingInstance setPollMessageBindings(Set<String> pollMessageBindings) {
    this.pollMessageBindings = pollMessageBindings;
    return this;
  }

  public void unsetPollMessageBindings() {
    this.pollMessageBindings = null;
  }

  /** Returns true if field pollMessageBindings is set (has been assigned a value) and false otherwise */
  public boolean isSetPollMessageBindings() {
    return this.pollMessageBindings != null;
  }

  public void setPollMessageBindingsIsSet(boolean value) {
    if (!value) {
      this.pollMessageBindings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POLL_PROTOCOL:
      if (value == null) {
        unsetPollProtocol();
      } else {
        setPollProtocol((String)value);
      }
      break;

    case POLL_ADDRESS:
      if (value == null) {
        unsetPollAddress();
      } else {
        setPollAddress((String)value);
      }
      break;

    case POLL_MESSAGE_BINDINGS:
      if (value == null) {
        unsetPollMessageBindings();
      } else {
        setPollMessageBindings((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POLL_PROTOCOL:
      return getPollProtocol();

    case POLL_ADDRESS:
      return getPollAddress();

    case POLL_MESSAGE_BINDINGS:
      return getPollMessageBindings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POLL_PROTOCOL:
      return isSetPollProtocol();
    case POLL_ADDRESS:
      return isSetPollAddress();
    case POLL_MESSAGE_BINDINGS:
      return isSetPollMessageBindings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PollingInstance)
      return this.equals((PollingInstance)that);
    return false;
  }

  public boolean equals(PollingInstance that) {
    if (that == null)
      return false;

    boolean this_present_pollProtocol = true && this.isSetPollProtocol();
    boolean that_present_pollProtocol = true && that.isSetPollProtocol();
    if (this_present_pollProtocol || that_present_pollProtocol) {
      if (!(this_present_pollProtocol && that_present_pollProtocol))
        return false;
      if (!this.pollProtocol.equals(that.pollProtocol))
        return false;
    }

    boolean this_present_pollAddress = true && this.isSetPollAddress();
    boolean that_present_pollAddress = true && that.isSetPollAddress();
    if (this_present_pollAddress || that_present_pollAddress) {
      if (!(this_present_pollAddress && that_present_pollAddress))
        return false;
      if (!this.pollAddress.equals(that.pollAddress))
        return false;
    }

    boolean this_present_pollMessageBindings = true && this.isSetPollMessageBindings();
    boolean that_present_pollMessageBindings = true && that.isSetPollMessageBindings();
    if (this_present_pollMessageBindings || that_present_pollMessageBindings) {
      if (!(this_present_pollMessageBindings && that_present_pollMessageBindings))
        return false;
      if (!this.pollMessageBindings.equals(that.pollMessageBindings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PollingInstance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPollProtocol()).compareTo(other.isSetPollProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollProtocol, other.pollProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPollAddress()).compareTo(other.isSetPollAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollAddress, other.pollAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPollMessageBindings()).compareTo(other.isSetPollMessageBindings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollMessageBindings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollMessageBindings, other.pollMessageBindings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PollingInstance(");
    boolean first = true;

    sb.append("pollProtocol:");
    if (this.pollProtocol == null) {
      sb.append("null");
    } else {
      sb.append(this.pollProtocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pollAddress:");
    if (this.pollAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.pollAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pollMessageBindings:");
    if (this.pollMessageBindings == null) {
      sb.append("null");
    } else {
      sb.append(this.pollMessageBindings);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (pollProtocol == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pollProtocol' was not present! Struct: " + toString());
    }
    if (pollAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pollAddress' was not present! Struct: " + toString());
    }
    if (pollMessageBindings == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pollMessageBindings' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PollingInstanceStandardSchemeFactory implements SchemeFactory {
    public PollingInstanceStandardScheme getScheme() {
      return new PollingInstanceStandardScheme();
    }
  }

  private static class PollingInstanceStandardScheme extends StandardScheme<PollingInstance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PollingInstance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POLL_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pollProtocol = iprot.readString();
              struct.setPollProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POLL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pollAddress = iprot.readString();
              struct.setPollAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POLL_MESSAGE_BINDINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set88 = iprot.readSetBegin();
                struct.pollMessageBindings = new HashSet<String>(2*_set88.size);
                for (int _i89 = 0; _i89 < _set88.size; ++_i89)
                {
                  String _elem90;
                  _elem90 = iprot.readString();
                  struct.pollMessageBindings.add(_elem90);
                }
                iprot.readSetEnd();
              }
              struct.setPollMessageBindingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PollingInstance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pollProtocol != null) {
        oprot.writeFieldBegin(POLL_PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.pollProtocol);
        oprot.writeFieldEnd();
      }
      if (struct.pollAddress != null) {
        oprot.writeFieldBegin(POLL_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.pollAddress);
        oprot.writeFieldEnd();
      }
      if (struct.pollMessageBindings != null) {
        oprot.writeFieldBegin(POLL_MESSAGE_BINDINGS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.pollMessageBindings.size()));
          for (String _iter91 : struct.pollMessageBindings)
          {
            oprot.writeString(_iter91);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PollingInstanceTupleSchemeFactory implements SchemeFactory {
    public PollingInstanceTupleScheme getScheme() {
      return new PollingInstanceTupleScheme();
    }
  }

  private static class PollingInstanceTupleScheme extends TupleScheme<PollingInstance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PollingInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.pollProtocol);
      oprot.writeString(struct.pollAddress);
      {
        oprot.writeI32(struct.pollMessageBindings.size());
        for (String _iter92 : struct.pollMessageBindings)
        {
          oprot.writeString(_iter92);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PollingInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.pollProtocol = iprot.readString();
      struct.setPollProtocolIsSet(true);
      struct.pollAddress = iprot.readString();
      struct.setPollAddressIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set93 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.pollMessageBindings = new HashSet<String>(2*_set93.size);
        for (int _i94 = 0; _i94 < _set93.size; ++_i94)
        {
          String _elem95;
          _elem95 = iprot.readString();
          struct.pollMessageBindings.add(_elem95);
        }
      }
      struct.setPollMessageBindingsIsSet(true);
    }
  }

}

