/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Represents a subscription.
 * 
 */
public class SubscriptionMethod implements org.apache.thrift.TBase<SubscriptionMethod, SubscriptionMethod._Fields>, java.io.Serializable, Cloneable, Comparable<SubscriptionMethod> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubscriptionMethod");

  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionProtocol", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_MESSAGE_BINDINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionMessageBindings", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubscriptionMethodStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubscriptionMethodTupleSchemeFactory());
  }

  /**
   * This field identifies the protocol binding supported by
   * this Collection Management Service instance. This
   * MUST be a TAXII Protocol Binding Version ID as
   * defined in a TAXII Protocol Binding Specification or by
   * a third party
   */
  public String subscriptionProtocol; // required
  /**
   * * This field identifies the address that can be used to
   *   contact the TAXII Daemon hosting this Collection
   *   Management Service instance. This field MUST use a
   *   format appropriate to the Subscription Protocol field
   *   value.
   * *
   */
  public String subscriptionAddress; // required
  /**
   * * This field identifies the message bindings supported
   *   by this Collection Management Service Instance. Each
   *   message binding MUST be a TAXII Message Binding
   *   Version ID as defined in a TAXII Message Binding
   *   Specification or by a third party.
   * 
   * *
   */
  public Set<String> subscriptionMessageBindings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * This field identifies the protocol binding supported by
     * this Collection Management Service instance. This
     * MUST be a TAXII Protocol Binding Version ID as
     * defined in a TAXII Protocol Binding Specification or by
     * a third party
     */
    SUBSCRIPTION_PROTOCOL((short)1, "subscriptionProtocol"),
    /**
     * * This field identifies the address that can be used to
     *   contact the TAXII Daemon hosting this Collection
     *   Management Service instance. This field MUST use a
     *   format appropriate to the Subscription Protocol field
     *   value.
     * *
     */
    SUBSCRIPTION_ADDRESS((short)2, "subscriptionAddress"),
    /**
     * * This field identifies the message bindings supported
     *   by this Collection Management Service Instance. Each
     *   message binding MUST be a TAXII Message Binding
     *   Version ID as defined in a TAXII Message Binding
     *   Specification or by a third party.
     * 
     * *
     */
    SUBSCRIPTION_MESSAGE_BINDINGS((short)3, "subscriptionMessageBindings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBSCRIPTION_PROTOCOL
          return SUBSCRIPTION_PROTOCOL;
        case 2: // SUBSCRIPTION_ADDRESS
          return SUBSCRIPTION_ADDRESS;
        case 3: // SUBSCRIPTION_MESSAGE_BINDINGS
          return SUBSCRIPTION_MESSAGE_BINDINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBSCRIPTION_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("subscriptionProtocol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIPTION_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("subscriptionAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIPTION_MESSAGE_BINDINGS, new org.apache.thrift.meta_data.FieldMetaData("subscriptionMessageBindings", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubscriptionMethod.class, metaDataMap);
  }

  public SubscriptionMethod() {
  }

  public SubscriptionMethod(
    String subscriptionProtocol,
    String subscriptionAddress,
    Set<String> subscriptionMessageBindings)
  {
    this();
    this.subscriptionProtocol = subscriptionProtocol;
    this.subscriptionAddress = subscriptionAddress;
    this.subscriptionMessageBindings = subscriptionMessageBindings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubscriptionMethod(SubscriptionMethod other) {
    if (other.isSetSubscriptionProtocol()) {
      this.subscriptionProtocol = other.subscriptionProtocol;
    }
    if (other.isSetSubscriptionAddress()) {
      this.subscriptionAddress = other.subscriptionAddress;
    }
    if (other.isSetSubscriptionMessageBindings()) {
      Set<String> __this__subscriptionMessageBindings = new HashSet<String>(other.subscriptionMessageBindings);
      this.subscriptionMessageBindings = __this__subscriptionMessageBindings;
    }
  }

  public SubscriptionMethod deepCopy() {
    return new SubscriptionMethod(this);
  }

  @Override
  public void clear() {
    this.subscriptionProtocol = null;
    this.subscriptionAddress = null;
    this.subscriptionMessageBindings = null;
  }

  /**
   * This field identifies the protocol binding supported by
   * this Collection Management Service instance. This
   * MUST be a TAXII Protocol Binding Version ID as
   * defined in a TAXII Protocol Binding Specification or by
   * a third party
   */
  public String getSubscriptionProtocol() {
    return this.subscriptionProtocol;
  }

  /**
   * This field identifies the protocol binding supported by
   * this Collection Management Service instance. This
   * MUST be a TAXII Protocol Binding Version ID as
   * defined in a TAXII Protocol Binding Specification or by
   * a third party
   */
  public SubscriptionMethod setSubscriptionProtocol(String subscriptionProtocol) {
    this.subscriptionProtocol = subscriptionProtocol;
    return this;
  }

  public void unsetSubscriptionProtocol() {
    this.subscriptionProtocol = null;
  }

  /** Returns true if field subscriptionProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionProtocol() {
    return this.subscriptionProtocol != null;
  }

  public void setSubscriptionProtocolIsSet(boolean value) {
    if (!value) {
      this.subscriptionProtocol = null;
    }
  }

  /**
   * * This field identifies the address that can be used to
   *   contact the TAXII Daemon hosting this Collection
   *   Management Service instance. This field MUST use a
   *   format appropriate to the Subscription Protocol field
   *   value.
   * *
   */
  public String getSubscriptionAddress() {
    return this.subscriptionAddress;
  }

  /**
   * * This field identifies the address that can be used to
   *   contact the TAXII Daemon hosting this Collection
   *   Management Service instance. This field MUST use a
   *   format appropriate to the Subscription Protocol field
   *   value.
   * *
   */
  public SubscriptionMethod setSubscriptionAddress(String subscriptionAddress) {
    this.subscriptionAddress = subscriptionAddress;
    return this;
  }

  public void unsetSubscriptionAddress() {
    this.subscriptionAddress = null;
  }

  /** Returns true if field subscriptionAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionAddress() {
    return this.subscriptionAddress != null;
  }

  public void setSubscriptionAddressIsSet(boolean value) {
    if (!value) {
      this.subscriptionAddress = null;
    }
  }

  public int getSubscriptionMessageBindingsSize() {
    return (this.subscriptionMessageBindings == null) ? 0 : this.subscriptionMessageBindings.size();
  }

  public java.util.Iterator<String> getSubscriptionMessageBindingsIterator() {
    return (this.subscriptionMessageBindings == null) ? null : this.subscriptionMessageBindings.iterator();
  }

  public void addToSubscriptionMessageBindings(String elem) {
    if (this.subscriptionMessageBindings == null) {
      this.subscriptionMessageBindings = new HashSet<String>();
    }
    this.subscriptionMessageBindings.add(elem);
  }

  /**
   * * This field identifies the message bindings supported
   *   by this Collection Management Service Instance. Each
   *   message binding MUST be a TAXII Message Binding
   *   Version ID as defined in a TAXII Message Binding
   *   Specification or by a third party.
   * 
   * *
   */
  public Set<String> getSubscriptionMessageBindings() {
    return this.subscriptionMessageBindings;
  }

  /**
   * * This field identifies the message bindings supported
   *   by this Collection Management Service Instance. Each
   *   message binding MUST be a TAXII Message Binding
   *   Version ID as defined in a TAXII Message Binding
   *   Specification or by a third party.
   * 
   * *
   */
  public SubscriptionMethod setSubscriptionMessageBindings(Set<String> subscriptionMessageBindings) {
    this.subscriptionMessageBindings = subscriptionMessageBindings;
    return this;
  }

  public void unsetSubscriptionMessageBindings() {
    this.subscriptionMessageBindings = null;
  }

  /** Returns true if field subscriptionMessageBindings is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionMessageBindings() {
    return this.subscriptionMessageBindings != null;
  }

  public void setSubscriptionMessageBindingsIsSet(boolean value) {
    if (!value) {
      this.subscriptionMessageBindings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUBSCRIPTION_PROTOCOL:
      if (value == null) {
        unsetSubscriptionProtocol();
      } else {
        setSubscriptionProtocol((String)value);
      }
      break;

    case SUBSCRIPTION_ADDRESS:
      if (value == null) {
        unsetSubscriptionAddress();
      } else {
        setSubscriptionAddress((String)value);
      }
      break;

    case SUBSCRIPTION_MESSAGE_BINDINGS:
      if (value == null) {
        unsetSubscriptionMessageBindings();
      } else {
        setSubscriptionMessageBindings((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBSCRIPTION_PROTOCOL:
      return getSubscriptionProtocol();

    case SUBSCRIPTION_ADDRESS:
      return getSubscriptionAddress();

    case SUBSCRIPTION_MESSAGE_BINDINGS:
      return getSubscriptionMessageBindings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUBSCRIPTION_PROTOCOL:
      return isSetSubscriptionProtocol();
    case SUBSCRIPTION_ADDRESS:
      return isSetSubscriptionAddress();
    case SUBSCRIPTION_MESSAGE_BINDINGS:
      return isSetSubscriptionMessageBindings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubscriptionMethod)
      return this.equals((SubscriptionMethod)that);
    return false;
  }

  public boolean equals(SubscriptionMethod that) {
    if (that == null)
      return false;

    boolean this_present_subscriptionProtocol = true && this.isSetSubscriptionProtocol();
    boolean that_present_subscriptionProtocol = true && that.isSetSubscriptionProtocol();
    if (this_present_subscriptionProtocol || that_present_subscriptionProtocol) {
      if (!(this_present_subscriptionProtocol && that_present_subscriptionProtocol))
        return false;
      if (!this.subscriptionProtocol.equals(that.subscriptionProtocol))
        return false;
    }

    boolean this_present_subscriptionAddress = true && this.isSetSubscriptionAddress();
    boolean that_present_subscriptionAddress = true && that.isSetSubscriptionAddress();
    if (this_present_subscriptionAddress || that_present_subscriptionAddress) {
      if (!(this_present_subscriptionAddress && that_present_subscriptionAddress))
        return false;
      if (!this.subscriptionAddress.equals(that.subscriptionAddress))
        return false;
    }

    boolean this_present_subscriptionMessageBindings = true && this.isSetSubscriptionMessageBindings();
    boolean that_present_subscriptionMessageBindings = true && that.isSetSubscriptionMessageBindings();
    if (this_present_subscriptionMessageBindings || that_present_subscriptionMessageBindings) {
      if (!(this_present_subscriptionMessageBindings && that_present_subscriptionMessageBindings))
        return false;
      if (!this.subscriptionMessageBindings.equals(that.subscriptionMessageBindings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubscriptionMethod other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubscriptionProtocol()).compareTo(other.isSetSubscriptionProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionProtocol, other.subscriptionProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionAddress()).compareTo(other.isSetSubscriptionAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionAddress, other.subscriptionAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionMessageBindings()).compareTo(other.isSetSubscriptionMessageBindings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionMessageBindings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionMessageBindings, other.subscriptionMessageBindings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubscriptionMethod(");
    boolean first = true;

    sb.append("subscriptionProtocol:");
    if (this.subscriptionProtocol == null) {
      sb.append("null");
    } else {
      sb.append(this.subscriptionProtocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subscriptionAddress:");
    if (this.subscriptionAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.subscriptionAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subscriptionMessageBindings:");
    if (this.subscriptionMessageBindings == null) {
      sb.append("null");
    } else {
      sb.append(this.subscriptionMessageBindings);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (subscriptionProtocol == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subscriptionProtocol' was not present! Struct: " + toString());
    }
    if (subscriptionAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subscriptionAddress' was not present! Struct: " + toString());
    }
    if (subscriptionMessageBindings == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subscriptionMessageBindings' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubscriptionMethodStandardSchemeFactory implements SchemeFactory {
    public SubscriptionMethodStandardScheme getScheme() {
      return new SubscriptionMethodStandardScheme();
    }
  }

  private static class SubscriptionMethodStandardScheme extends StandardScheme<SubscriptionMethod> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubscriptionMethod struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBSCRIPTION_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subscriptionProtocol = iprot.readString();
              struct.setSubscriptionProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBSCRIPTION_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subscriptionAddress = iprot.readString();
              struct.setSubscriptionAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUBSCRIPTION_MESSAGE_BINDINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set96 = iprot.readSetBegin();
                struct.subscriptionMessageBindings = new HashSet<String>(2*_set96.size);
                for (int _i97 = 0; _i97 < _set96.size; ++_i97)
                {
                  String _elem98;
                  _elem98 = iprot.readString();
                  struct.subscriptionMessageBindings.add(_elem98);
                }
                iprot.readSetEnd();
              }
              struct.setSubscriptionMessageBindingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubscriptionMethod struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subscriptionProtocol != null) {
        oprot.writeFieldBegin(SUBSCRIPTION_PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.subscriptionProtocol);
        oprot.writeFieldEnd();
      }
      if (struct.subscriptionAddress != null) {
        oprot.writeFieldBegin(SUBSCRIPTION_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.subscriptionAddress);
        oprot.writeFieldEnd();
      }
      if (struct.subscriptionMessageBindings != null) {
        oprot.writeFieldBegin(SUBSCRIPTION_MESSAGE_BINDINGS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.subscriptionMessageBindings.size()));
          for (String _iter99 : struct.subscriptionMessageBindings)
          {
            oprot.writeString(_iter99);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubscriptionMethodTupleSchemeFactory implements SchemeFactory {
    public SubscriptionMethodTupleScheme getScheme() {
      return new SubscriptionMethodTupleScheme();
    }
  }

  private static class SubscriptionMethodTupleScheme extends TupleScheme<SubscriptionMethod> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubscriptionMethod struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.subscriptionProtocol);
      oprot.writeString(struct.subscriptionAddress);
      {
        oprot.writeI32(struct.subscriptionMessageBindings.size());
        for (String _iter100 : struct.subscriptionMessageBindings)
        {
          oprot.writeString(_iter100);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubscriptionMethod struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.subscriptionProtocol = iprot.readString();
      struct.setSubscriptionProtocolIsSet(true);
      struct.subscriptionAddress = iprot.readString();
      struct.setSubscriptionAddressIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set101 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.subscriptionMessageBindings = new HashSet<String>(2*_set101.size);
        for (int _i102 = 0; _i102 < _set101.size; ++_i102)
        {
          String _elem103;
          _elem103 = iprot.readString();
          struct.subscriptionMessageBindings.add(_elem103);
        }
      }
      struct.setSubscriptionMessageBindingsIsSet(true);
    }
  }

}

