/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Provides information about record counts
 * 
 */
public class RecordCount implements org.apache.thrift.TBase<RecordCount, RecordCount._Fields>, java.io.Serializable, Cloneable, Comparable<RecordCount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecordCount");

  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARTIAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("partialCount", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecordCountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecordCountTupleSchemeFactory());
  }

  public long count; // optional
  /**
   * This field indicates whether the provided Record Count is
   * the exact number of applicable records, or if the provided
   * number is a lower bound and there may be more records
   * than stated. The field contains a boolean value. A value of
   * TRUE indicates that the actual number of matching records
   * may be greater than the value that appears in the Record
   * Count field. A value of FALSE indicates that the Record
   * Count is an exact count of applicable records. If this field is
   * absent, treat the field as having a value of FALSE.
   */
  public boolean partialCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNT((short)1, "count"),
    /**
     * This field indicates whether the provided Record Count is
     * the exact number of applicable records, or if the provided
     * number is a lower bound and there may be more records
     * than stated. The field contains a boolean value. A value of
     * TRUE indicates that the actual number of matching records
     * may be greater than the value that appears in the Record
     * Count field. A value of FALSE indicates that the Record
     * Count is an exact count of applicable records. If this field is
     * absent, treat the field as having a value of FALSE.
     */
    PARTIAL_COUNT((short)2, "partialCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNT
          return COUNT;
        case 2: // PARTIAL_COUNT
          return PARTIAL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNT_ISSET_ID = 0;
  private static final int __PARTIALCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COUNT,_Fields.PARTIAL_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTIAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("partialCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecordCount.class, metaDataMap);
  }

  public RecordCount() {
    this.count = 0L;

    this.partialCount = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecordCount(RecordCount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.count = other.count;
    this.partialCount = other.partialCount;
  }

  public RecordCount deepCopy() {
    return new RecordCount(this);
  }

  @Override
  public void clear() {
    this.count = 0L;

    this.partialCount = false;

  }

  public long getCount() {
    return this.count;
  }

  public RecordCount setCount(long count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  /**
   * This field indicates whether the provided Record Count is
   * the exact number of applicable records, or if the provided
   * number is a lower bound and there may be more records
   * than stated. The field contains a boolean value. A value of
   * TRUE indicates that the actual number of matching records
   * may be greater than the value that appears in the Record
   * Count field. A value of FALSE indicates that the Record
   * Count is an exact count of applicable records. If this field is
   * absent, treat the field as having a value of FALSE.
   */
  public boolean isPartialCount() {
    return this.partialCount;
  }

  /**
   * This field indicates whether the provided Record Count is
   * the exact number of applicable records, or if the provided
   * number is a lower bound and there may be more records
   * than stated. The field contains a boolean value. A value of
   * TRUE indicates that the actual number of matching records
   * may be greater than the value that appears in the Record
   * Count field. A value of FALSE indicates that the Record
   * Count is an exact count of applicable records. If this field is
   * absent, treat the field as having a value of FALSE.
   */
  public RecordCount setPartialCount(boolean partialCount) {
    this.partialCount = partialCount;
    setPartialCountIsSet(true);
    return this;
  }

  public void unsetPartialCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTIALCOUNT_ISSET_ID);
  }

  /** Returns true if field partialCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPartialCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTIALCOUNT_ISSET_ID);
  }

  public void setPartialCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTIALCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Long)value);
      }
      break;

    case PARTIAL_COUNT:
      if (value == null) {
        unsetPartialCount();
      } else {
        setPartialCount((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNT:
      return Long.valueOf(getCount());

    case PARTIAL_COUNT:
      return Boolean.valueOf(isPartialCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNT:
      return isSetCount();
    case PARTIAL_COUNT:
      return isSetPartialCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecordCount)
      return this.equals((RecordCount)that);
    return false;
  }

  public boolean equals(RecordCount that) {
    if (that == null)
      return false;

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_partialCount = true && this.isSetPartialCount();
    boolean that_present_partialCount = true && that.isSetPartialCount();
    if (this_present_partialCount || that_present_partialCount) {
      if (!(this_present_partialCount && that_present_partialCount))
        return false;
      if (this.partialCount != that.partialCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RecordCount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartialCount()).compareTo(other.isSetPartialCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartialCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partialCount, other.partialCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecordCount(");
    boolean first = true;

    if (isSetCount()) {
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetPartialCount()) {
      if (!first) sb.append(", ");
      sb.append("partialCount:");
      sb.append(this.partialCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecordCountStandardSchemeFactory implements SchemeFactory {
    public RecordCountStandardScheme getScheme() {
      return new RecordCountStandardScheme();
    }
  }

  private static class RecordCountStandardScheme extends StandardScheme<RecordCount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecordCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count = iprot.readI64();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTIAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.partialCount = iprot.readBool();
              struct.setPartialCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecordCount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI64(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartialCount()) {
        oprot.writeFieldBegin(PARTIAL_COUNT_FIELD_DESC);
        oprot.writeBool(struct.partialCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecordCountTupleSchemeFactory implements SchemeFactory {
    public RecordCountTupleScheme getScheme() {
      return new RecordCountTupleScheme();
    }
  }

  private static class RecordCountTupleScheme extends TupleScheme<RecordCount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecordCount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCount()) {
        optionals.set(0);
      }
      if (struct.isSetPartialCount()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCount()) {
        oprot.writeI64(struct.count);
      }
      if (struct.isSetPartialCount()) {
        oprot.writeBool(struct.partialCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecordCount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.count = iprot.readI64();
        struct.setCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partialCount = iprot.readBool();
        struct.setPartialCountIsSet(true);
      }
    }
  }

}

