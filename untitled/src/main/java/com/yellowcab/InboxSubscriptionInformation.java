/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * * Used for details about a subscription
 * *
 * * NOTE:  In regards to Exclusive Begin and Inclusive Begin
 * * At most one of these fields may appear
 * * These fields serve the same purpose. Use of the Inclusive
 *   Begin Timestamp Label field is deprecated but retained for
 *   backwards compatibility with TAXII 1.0. Both fields MUST
 *   NOT appear together in the same message.
 * 
 *   Either field contains a Timestamp Label indicating the
 *   beginning of the time range this Inbox Message covers.
 *   (One field provides an exclusive value; the other provides
 *   an inclusive value.) Absence of either field indicates that
 *   the Inbox Message covers the earliest time for this TAXII
 *   Data Feed. The fields MUST NOT be included if the named
 *   TAXII Data Collection is a Data Set.
 * *
 */
public class InboxSubscriptionInformation implements org.apache.thrift.TBase<InboxSubscriptionInformation, InboxSubscriptionInformation._Fields>, java.io.Serializable, Cloneable, Comparable<InboxSubscriptionInformation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InboxSubscriptionInformation");

  private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("exclusiveBeginTimestampLabel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("inclusiveBeginTimestampLabel", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INCLUSIVE_END_TIMESTAMP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("inclusiveEndTimestampLabel", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InboxSubscriptionInformationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InboxSubscriptionInformationTupleSchemeFactory());
  }

  /**
   * * This field indicates the name of the TAXII Data Collection
   *   from which this content is being provided.
   * 
   * *
   */
  public String collectionName; // required
  /**
   * * This field contains the Subscription ID for the subscription
   *   of which this content is being provided.
   * 
   * *
   */
  public String subscriptionId; // required
  public String exclusiveBeginTimestampLabel; // optional
  public String inclusiveBeginTimestampLabel; // optional
  /**
   * * This field contains a Timestamp Label indicating the end of
   *   the time range this Inbox Message covers. This field is
   *   inclusive. This field MUST be present if the named Data
   *   Collection is a Data Feed. This field MUST NOT be present
   *   if the named Data Collection is a Data Set.
   * 
   * NOTE: Required if for a Feed; prohibited otherwise
   * 
   * *
   */
  public String inclusiveEndTimestampLabel; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field indicates the name of the TAXII Data Collection
     *   from which this content is being provided.
     * 
     * *
     */
    COLLECTION_NAME((short)1, "collectionName"),
    /**
     * * This field contains the Subscription ID for the subscription
     *   of which this content is being provided.
     * 
     * *
     */
    SUBSCRIPTION_ID((short)2, "subscriptionId"),
    EXCLUSIVE_BEGIN_TIMESTAMP_LABEL((short)3, "exclusiveBeginTimestampLabel"),
    INCLUSIVE_BEGIN_TIMESTAMP_LABEL((short)4, "inclusiveBeginTimestampLabel"),
    /**
     * * This field contains a Timestamp Label indicating the end of
     *   the time range this Inbox Message covers. This field is
     *   inclusive. This field MUST be present if the named Data
     *   Collection is a Data Feed. This field MUST NOT be present
     *   if the named Data Collection is a Data Set.
     * 
     * NOTE: Required if for a Feed; prohibited otherwise
     * 
     * *
     */
    INCLUSIVE_END_TIMESTAMP_LABEL((short)5, "inclusiveEndTimestampLabel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION_NAME
          return COLLECTION_NAME;
        case 2: // SUBSCRIPTION_ID
          return SUBSCRIPTION_ID;
        case 3: // EXCLUSIVE_BEGIN_TIMESTAMP_LABEL
          return EXCLUSIVE_BEGIN_TIMESTAMP_LABEL;
        case 4: // INCLUSIVE_BEGIN_TIMESTAMP_LABEL
          return INCLUSIVE_BEGIN_TIMESTAMP_LABEL;
        case 5: // INCLUSIVE_END_TIMESTAMP_LABEL
          return INCLUSIVE_END_TIMESTAMP_LABEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.EXCLUSIVE_BEGIN_TIMESTAMP_LABEL,_Fields.INCLUSIVE_BEGIN_TIMESTAMP_LABEL,_Fields.INCLUSIVE_END_TIMESTAMP_LABEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("subscriptionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCLUSIVE_BEGIN_TIMESTAMP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("exclusiveBeginTimestampLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TimestampLabel")));
    tmpMap.put(_Fields.INCLUSIVE_BEGIN_TIMESTAMP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("inclusiveBeginTimestampLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TimestampLabel")));
    tmpMap.put(_Fields.INCLUSIVE_END_TIMESTAMP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("inclusiveEndTimestampLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TimestampLabel")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InboxSubscriptionInformation.class, metaDataMap);
  }

  public InboxSubscriptionInformation() {
  }

  public InboxSubscriptionInformation(
    String collectionName,
    String subscriptionId)
  {
    this();
    this.collectionName = collectionName;
    this.subscriptionId = subscriptionId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InboxSubscriptionInformation(InboxSubscriptionInformation other) {
    if (other.isSetCollectionName()) {
      this.collectionName = other.collectionName;
    }
    if (other.isSetSubscriptionId()) {
      this.subscriptionId = other.subscriptionId;
    }
    if (other.isSetExclusiveBeginTimestampLabel()) {
      this.exclusiveBeginTimestampLabel = other.exclusiveBeginTimestampLabel;
    }
    if (other.isSetInclusiveBeginTimestampLabel()) {
      this.inclusiveBeginTimestampLabel = other.inclusiveBeginTimestampLabel;
    }
    if (other.isSetInclusiveEndTimestampLabel()) {
      this.inclusiveEndTimestampLabel = other.inclusiveEndTimestampLabel;
    }
  }

  public InboxSubscriptionInformation deepCopy() {
    return new InboxSubscriptionInformation(this);
  }

  @Override
  public void clear() {
    this.collectionName = null;
    this.subscriptionId = null;
    this.exclusiveBeginTimestampLabel = null;
    this.inclusiveBeginTimestampLabel = null;
    this.inclusiveEndTimestampLabel = null;
  }

  /**
   * * This field indicates the name of the TAXII Data Collection
   *   from which this content is being provided.
   * 
   * *
   */
  public String getCollectionName() {
    return this.collectionName;
  }

  /**
   * * This field indicates the name of the TAXII Data Collection
   *   from which this content is being provided.
   * 
   * *
   */
  public InboxSubscriptionInformation setCollectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  public void unsetCollectionName() {
    this.collectionName = null;
  }

  /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionName() {
    return this.collectionName != null;
  }

  public void setCollectionNameIsSet(boolean value) {
    if (!value) {
      this.collectionName = null;
    }
  }

  /**
   * * This field contains the Subscription ID for the subscription
   *   of which this content is being provided.
   * 
   * *
   */
  public String getSubscriptionId() {
    return this.subscriptionId;
  }

  /**
   * * This field contains the Subscription ID for the subscription
   *   of which this content is being provided.
   * 
   * *
   */
  public InboxSubscriptionInformation setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  public void unsetSubscriptionId() {
    this.subscriptionId = null;
  }

  /** Returns true if field subscriptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionId() {
    return this.subscriptionId != null;
  }

  public void setSubscriptionIdIsSet(boolean value) {
    if (!value) {
      this.subscriptionId = null;
    }
  }

  public String getExclusiveBeginTimestampLabel() {
    return this.exclusiveBeginTimestampLabel;
  }

  public InboxSubscriptionInformation setExclusiveBeginTimestampLabel(String exclusiveBeginTimestampLabel) {
    this.exclusiveBeginTimestampLabel = exclusiveBeginTimestampLabel;
    return this;
  }

  public void unsetExclusiveBeginTimestampLabel() {
    this.exclusiveBeginTimestampLabel = null;
  }

  /** Returns true if field exclusiveBeginTimestampLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetExclusiveBeginTimestampLabel() {
    return this.exclusiveBeginTimestampLabel != null;
  }

  public void setExclusiveBeginTimestampLabelIsSet(boolean value) {
    if (!value) {
      this.exclusiveBeginTimestampLabel = null;
    }
  }

  public String getInclusiveBeginTimestampLabel() {
    return this.inclusiveBeginTimestampLabel;
  }

  public InboxSubscriptionInformation setInclusiveBeginTimestampLabel(String inclusiveBeginTimestampLabel) {
    this.inclusiveBeginTimestampLabel = inclusiveBeginTimestampLabel;
    return this;
  }

  public void unsetInclusiveBeginTimestampLabel() {
    this.inclusiveBeginTimestampLabel = null;
  }

  /** Returns true if field inclusiveBeginTimestampLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetInclusiveBeginTimestampLabel() {
    return this.inclusiveBeginTimestampLabel != null;
  }

  public void setInclusiveBeginTimestampLabelIsSet(boolean value) {
    if (!value) {
      this.inclusiveBeginTimestampLabel = null;
    }
  }

  /**
   * * This field contains a Timestamp Label indicating the end of
   *   the time range this Inbox Message covers. This field is
   *   inclusive. This field MUST be present if the named Data
   *   Collection is a Data Feed. This field MUST NOT be present
   *   if the named Data Collection is a Data Set.
   * 
   * NOTE: Required if for a Feed; prohibited otherwise
   * 
   * *
   */
  public String getInclusiveEndTimestampLabel() {
    return this.inclusiveEndTimestampLabel;
  }

  /**
   * * This field contains a Timestamp Label indicating the end of
   *   the time range this Inbox Message covers. This field is
   *   inclusive. This field MUST be present if the named Data
   *   Collection is a Data Feed. This field MUST NOT be present
   *   if the named Data Collection is a Data Set.
   * 
   * NOTE: Required if for a Feed; prohibited otherwise
   * 
   * *
   */
  public InboxSubscriptionInformation setInclusiveEndTimestampLabel(String inclusiveEndTimestampLabel) {
    this.inclusiveEndTimestampLabel = inclusiveEndTimestampLabel;
    return this;
  }

  public void unsetInclusiveEndTimestampLabel() {
    this.inclusiveEndTimestampLabel = null;
  }

  /** Returns true if field inclusiveEndTimestampLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetInclusiveEndTimestampLabel() {
    return this.inclusiveEndTimestampLabel != null;
  }

  public void setInclusiveEndTimestampLabelIsSet(boolean value) {
    if (!value) {
      this.inclusiveEndTimestampLabel = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTION_NAME:
      if (value == null) {
        unsetCollectionName();
      } else {
        setCollectionName((String)value);
      }
      break;

    case SUBSCRIPTION_ID:
      if (value == null) {
        unsetSubscriptionId();
      } else {
        setSubscriptionId((String)value);
      }
      break;

    case EXCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      if (value == null) {
        unsetExclusiveBeginTimestampLabel();
      } else {
        setExclusiveBeginTimestampLabel((String)value);
      }
      break;

    case INCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      if (value == null) {
        unsetInclusiveBeginTimestampLabel();
      } else {
        setInclusiveBeginTimestampLabel((String)value);
      }
      break;

    case INCLUSIVE_END_TIMESTAMP_LABEL:
      if (value == null) {
        unsetInclusiveEndTimestampLabel();
      } else {
        setInclusiveEndTimestampLabel((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION_NAME:
      return getCollectionName();

    case SUBSCRIPTION_ID:
      return getSubscriptionId();

    case EXCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return getExclusiveBeginTimestampLabel();

    case INCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return getInclusiveBeginTimestampLabel();

    case INCLUSIVE_END_TIMESTAMP_LABEL:
      return getInclusiveEndTimestampLabel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION_NAME:
      return isSetCollectionName();
    case SUBSCRIPTION_ID:
      return isSetSubscriptionId();
    case EXCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return isSetExclusiveBeginTimestampLabel();
    case INCLUSIVE_BEGIN_TIMESTAMP_LABEL:
      return isSetInclusiveBeginTimestampLabel();
    case INCLUSIVE_END_TIMESTAMP_LABEL:
      return isSetInclusiveEndTimestampLabel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InboxSubscriptionInformation)
      return this.equals((InboxSubscriptionInformation)that);
    return false;
  }

  public boolean equals(InboxSubscriptionInformation that) {
    if (that == null)
      return false;

    boolean this_present_collectionName = true && this.isSetCollectionName();
    boolean that_present_collectionName = true && that.isSetCollectionName();
    if (this_present_collectionName || that_present_collectionName) {
      if (!(this_present_collectionName && that_present_collectionName))
        return false;
      if (!this.collectionName.equals(that.collectionName))
        return false;
    }

    boolean this_present_subscriptionId = true && this.isSetSubscriptionId();
    boolean that_present_subscriptionId = true && that.isSetSubscriptionId();
    if (this_present_subscriptionId || that_present_subscriptionId) {
      if (!(this_present_subscriptionId && that_present_subscriptionId))
        return false;
      if (!this.subscriptionId.equals(that.subscriptionId))
        return false;
    }

    boolean this_present_exclusiveBeginTimestampLabel = true && this.isSetExclusiveBeginTimestampLabel();
    boolean that_present_exclusiveBeginTimestampLabel = true && that.isSetExclusiveBeginTimestampLabel();
    if (this_present_exclusiveBeginTimestampLabel || that_present_exclusiveBeginTimestampLabel) {
      if (!(this_present_exclusiveBeginTimestampLabel && that_present_exclusiveBeginTimestampLabel))
        return false;
      if (!this.exclusiveBeginTimestampLabel.equals(that.exclusiveBeginTimestampLabel))
        return false;
    }

    boolean this_present_inclusiveBeginTimestampLabel = true && this.isSetInclusiveBeginTimestampLabel();
    boolean that_present_inclusiveBeginTimestampLabel = true && that.isSetInclusiveBeginTimestampLabel();
    if (this_present_inclusiveBeginTimestampLabel || that_present_inclusiveBeginTimestampLabel) {
      if (!(this_present_inclusiveBeginTimestampLabel && that_present_inclusiveBeginTimestampLabel))
        return false;
      if (!this.inclusiveBeginTimestampLabel.equals(that.inclusiveBeginTimestampLabel))
        return false;
    }

    boolean this_present_inclusiveEndTimestampLabel = true && this.isSetInclusiveEndTimestampLabel();
    boolean that_present_inclusiveEndTimestampLabel = true && that.isSetInclusiveEndTimestampLabel();
    if (this_present_inclusiveEndTimestampLabel || that_present_inclusiveEndTimestampLabel) {
      if (!(this_present_inclusiveEndTimestampLabel && that_present_inclusiveEndTimestampLabel))
        return false;
      if (!this.inclusiveEndTimestampLabel.equals(that.inclusiveEndTimestampLabel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(InboxSubscriptionInformation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriptionId()).compareTo(other.isSetSubscriptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionId, other.subscriptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExclusiveBeginTimestampLabel()).compareTo(other.isSetExclusiveBeginTimestampLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExclusiveBeginTimestampLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exclusiveBeginTimestampLabel, other.exclusiveBeginTimestampLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInclusiveBeginTimestampLabel()).compareTo(other.isSetInclusiveBeginTimestampLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInclusiveBeginTimestampLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inclusiveBeginTimestampLabel, other.inclusiveBeginTimestampLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInclusiveEndTimestampLabel()).compareTo(other.isSetInclusiveEndTimestampLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInclusiveEndTimestampLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inclusiveEndTimestampLabel, other.inclusiveEndTimestampLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InboxSubscriptionInformation(");
    boolean first = true;

    sb.append("collectionName:");
    if (this.collectionName == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subscriptionId:");
    if (this.subscriptionId == null) {
      sb.append("null");
    } else {
      sb.append(this.subscriptionId);
    }
    first = false;
    if (isSetExclusiveBeginTimestampLabel()) {
      if (!first) sb.append(", ");
      sb.append("exclusiveBeginTimestampLabel:");
      if (this.exclusiveBeginTimestampLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.exclusiveBeginTimestampLabel);
      }
      first = false;
    }
    if (isSetInclusiveBeginTimestampLabel()) {
      if (!first) sb.append(", ");
      sb.append("inclusiveBeginTimestampLabel:");
      if (this.inclusiveBeginTimestampLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.inclusiveBeginTimestampLabel);
      }
      first = false;
    }
    if (isSetInclusiveEndTimestampLabel()) {
      if (!first) sb.append(", ");
      sb.append("inclusiveEndTimestampLabel:");
      if (this.inclusiveEndTimestampLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.inclusiveEndTimestampLabel);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (collectionName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'collectionName' was not present! Struct: " + toString());
    }
    if (subscriptionId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subscriptionId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InboxSubscriptionInformationStandardSchemeFactory implements SchemeFactory {
    public InboxSubscriptionInformationStandardScheme getScheme() {
      return new InboxSubscriptionInformationStandardScheme();
    }
  }

  private static class InboxSubscriptionInformationStandardScheme extends StandardScheme<InboxSubscriptionInformation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InboxSubscriptionInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionName = iprot.readString();
              struct.setCollectionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBSCRIPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subscriptionId = iprot.readString();
              struct.setSubscriptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXCLUSIVE_BEGIN_TIMESTAMP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exclusiveBeginTimestampLabel = iprot.readString();
              struct.setExclusiveBeginTimestampLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCLUSIVE_BEGIN_TIMESTAMP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inclusiveBeginTimestampLabel = iprot.readString();
              struct.setInclusiveBeginTimestampLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INCLUSIVE_END_TIMESTAMP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inclusiveEndTimestampLabel = iprot.readString();
              struct.setInclusiveEndTimestampLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InboxSubscriptionInformation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collectionName != null) {
        oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
        oprot.writeString(struct.collectionName);
        oprot.writeFieldEnd();
      }
      if (struct.subscriptionId != null) {
        oprot.writeFieldBegin(SUBSCRIPTION_ID_FIELD_DESC);
        oprot.writeString(struct.subscriptionId);
        oprot.writeFieldEnd();
      }
      if (struct.exclusiveBeginTimestampLabel != null) {
        if (struct.isSetExclusiveBeginTimestampLabel()) {
          oprot.writeFieldBegin(EXCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC);
          oprot.writeString(struct.exclusiveBeginTimestampLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inclusiveBeginTimestampLabel != null) {
        if (struct.isSetInclusiveBeginTimestampLabel()) {
          oprot.writeFieldBegin(INCLUSIVE_BEGIN_TIMESTAMP_LABEL_FIELD_DESC);
          oprot.writeString(struct.inclusiveBeginTimestampLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inclusiveEndTimestampLabel != null) {
        if (struct.isSetInclusiveEndTimestampLabel()) {
          oprot.writeFieldBegin(INCLUSIVE_END_TIMESTAMP_LABEL_FIELD_DESC);
          oprot.writeString(struct.inclusiveEndTimestampLabel);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InboxSubscriptionInformationTupleSchemeFactory implements SchemeFactory {
    public InboxSubscriptionInformationTupleScheme getScheme() {
      return new InboxSubscriptionInformationTupleScheme();
    }
  }

  private static class InboxSubscriptionInformationTupleScheme extends TupleScheme<InboxSubscriptionInformation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InboxSubscriptionInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.collectionName);
      oprot.writeString(struct.subscriptionId);
      BitSet optionals = new BitSet();
      if (struct.isSetExclusiveBeginTimestampLabel()) {
        optionals.set(0);
      }
      if (struct.isSetInclusiveBeginTimestampLabel()) {
        optionals.set(1);
      }
      if (struct.isSetInclusiveEndTimestampLabel()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExclusiveBeginTimestampLabel()) {
        oprot.writeString(struct.exclusiveBeginTimestampLabel);
      }
      if (struct.isSetInclusiveBeginTimestampLabel()) {
        oprot.writeString(struct.inclusiveBeginTimestampLabel);
      }
      if (struct.isSetInclusiveEndTimestampLabel()) {
        oprot.writeString(struct.inclusiveEndTimestampLabel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InboxSubscriptionInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.collectionName = iprot.readString();
      struct.setCollectionNameIsSet(true);
      struct.subscriptionId = iprot.readString();
      struct.setSubscriptionIdIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.exclusiveBeginTimestampLabel = iprot.readString();
        struct.setExclusiveBeginTimestampLabelIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inclusiveBeginTimestampLabel = iprot.readString();
        struct.setInclusiveBeginTimestampLabelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.inclusiveEndTimestampLabel = iprot.readString();
        struct.setInclusiveEndTimestampLabelIsSet(true);
      }
    }
  }

}

