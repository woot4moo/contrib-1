/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

/**
 * Relates to content needed to fulfill a subscription
 * 
 */
public class SubscriptionDeliveryParameter implements org.apache.thrift.TBase<SubscriptionDeliveryParameter, SubscriptionDeliveryParameter._Fields>, java.io.Serializable, Cloneable, Comparable<SubscriptionDeliveryParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubscriptionDeliveryParameter");

  private static final org.apache.thrift.protocol.TField INBOX_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("inboxProtocol", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INBOX_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("inboxAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DELIVERY_MESSAGE_BINDING_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMessageBinding", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubscriptionDeliveryParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubscriptionDeliveryParameterTupleSchemeFactory());
  }

  /**
   * * This field identifies the protocol to be used when pushing
   *   TAXII Data Collection content to a Consumer's TAXII Inbox
   *   Service implementation. If the Data Collection does not
   *   support the named Inbox Protocol, a Status Message with a
   *   status of 'Unsupported Protocol Binding' SHOULD be
   *   returned. The Inbox Protocol MUST be a TAXII Protocol
   *   Binding Version ID as defined in a TAXII Protocol Binding
   *   Specification or by a third party.
   * *
   */
  public String inboxProtocol; // required
  /**
   * * This field identifies the address that can be used to contact
   *   the TAXII Daemon hosting the Inbox Service to which the
   *   Consumer requests content for this TAXII Data Collection to
   *   be delivered. The address MUST be of the appropriate type
   *   for the network protocol identified in the Inbox Protocol
   *   field.
   * *
   */
  public String inboxAddress; // required
  /**
   * * This field identifies the message binding to be used to send
   *   pushed content for this subscription. If the TAXII Data
   *   Collection does not support the Delivery Message Binding, a
   *   Status Message with a status of 'Unsupported Message
   *   Binding' SHOULD be returned. The Delivery Message Binding
   *   MUST be a TAXII Message Binding Version ID as defined in a
   *   TAXII Message Binding Specification or by a third party.
   * *
   */
  public String deliveryMessageBinding; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * * This field identifies the protocol to be used when pushing
     *   TAXII Data Collection content to a Consumer's TAXII Inbox
     *   Service implementation. If the Data Collection does not
     *   support the named Inbox Protocol, a Status Message with a
     *   status of 'Unsupported Protocol Binding' SHOULD be
     *   returned. The Inbox Protocol MUST be a TAXII Protocol
     *   Binding Version ID as defined in a TAXII Protocol Binding
     *   Specification or by a third party.
     * *
     */
    INBOX_PROTOCOL((short)1, "inboxProtocol"),
    /**
     * * This field identifies the address that can be used to contact
     *   the TAXII Daemon hosting the Inbox Service to which the
     *   Consumer requests content for this TAXII Data Collection to
     *   be delivered. The address MUST be of the appropriate type
     *   for the network protocol identified in the Inbox Protocol
     *   field.
     * *
     */
    INBOX_ADDRESS((short)2, "inboxAddress"),
    /**
     * * This field identifies the message binding to be used to send
     *   pushed content for this subscription. If the TAXII Data
     *   Collection does not support the Delivery Message Binding, a
     *   Status Message with a status of 'Unsupported Message
     *   Binding' SHOULD be returned. The Delivery Message Binding
     *   MUST be a TAXII Message Binding Version ID as defined in a
     *   TAXII Message Binding Specification or by a third party.
     * *
     */
    DELIVERY_MESSAGE_BINDING((short)3, "deliveryMessageBinding");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INBOX_PROTOCOL
          return INBOX_PROTOCOL;
        case 2: // INBOX_ADDRESS
          return INBOX_ADDRESS;
        case 3: // DELIVERY_MESSAGE_BINDING
          return DELIVERY_MESSAGE_BINDING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INBOX_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("inboxProtocol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INBOX_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("inboxAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_MESSAGE_BINDING, new org.apache.thrift.meta_data.FieldMetaData("deliveryMessageBinding", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubscriptionDeliveryParameter.class, metaDataMap);
  }

  public SubscriptionDeliveryParameter() {
  }

  public SubscriptionDeliveryParameter(
    String inboxProtocol,
    String inboxAddress,
    String deliveryMessageBinding)
  {
    this();
    this.inboxProtocol = inboxProtocol;
    this.inboxAddress = inboxAddress;
    this.deliveryMessageBinding = deliveryMessageBinding;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubscriptionDeliveryParameter(SubscriptionDeliveryParameter other) {
    if (other.isSetInboxProtocol()) {
      this.inboxProtocol = other.inboxProtocol;
    }
    if (other.isSetInboxAddress()) {
      this.inboxAddress = other.inboxAddress;
    }
    if (other.isSetDeliveryMessageBinding()) {
      this.deliveryMessageBinding = other.deliveryMessageBinding;
    }
  }

  public SubscriptionDeliveryParameter deepCopy() {
    return new SubscriptionDeliveryParameter(this);
  }

  @Override
  public void clear() {
    this.inboxProtocol = null;
    this.inboxAddress = null;
    this.deliveryMessageBinding = null;
  }

  /**
   * * This field identifies the protocol to be used when pushing
   *   TAXII Data Collection content to a Consumer's TAXII Inbox
   *   Service implementation. If the Data Collection does not
   *   support the named Inbox Protocol, a Status Message with a
   *   status of 'Unsupported Protocol Binding' SHOULD be
   *   returned. The Inbox Protocol MUST be a TAXII Protocol
   *   Binding Version ID as defined in a TAXII Protocol Binding
   *   Specification or by a third party.
   * *
   */
  public String getInboxProtocol() {
    return this.inboxProtocol;
  }

  /**
   * * This field identifies the protocol to be used when pushing
   *   TAXII Data Collection content to a Consumer's TAXII Inbox
   *   Service implementation. If the Data Collection does not
   *   support the named Inbox Protocol, a Status Message with a
   *   status of 'Unsupported Protocol Binding' SHOULD be
   *   returned. The Inbox Protocol MUST be a TAXII Protocol
   *   Binding Version ID as defined in a TAXII Protocol Binding
   *   Specification or by a third party.
   * *
   */
  public SubscriptionDeliveryParameter setInboxProtocol(String inboxProtocol) {
    this.inboxProtocol = inboxProtocol;
    return this;
  }

  public void unsetInboxProtocol() {
    this.inboxProtocol = null;
  }

  /** Returns true if field inboxProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetInboxProtocol() {
    return this.inboxProtocol != null;
  }

  public void setInboxProtocolIsSet(boolean value) {
    if (!value) {
      this.inboxProtocol = null;
    }
  }

  /**
   * * This field identifies the address that can be used to contact
   *   the TAXII Daemon hosting the Inbox Service to which the
   *   Consumer requests content for this TAXII Data Collection to
   *   be delivered. The address MUST be of the appropriate type
   *   for the network protocol identified in the Inbox Protocol
   *   field.
   * *
   */
  public String getInboxAddress() {
    return this.inboxAddress;
  }

  /**
   * * This field identifies the address that can be used to contact
   *   the TAXII Daemon hosting the Inbox Service to which the
   *   Consumer requests content for this TAXII Data Collection to
   *   be delivered. The address MUST be of the appropriate type
   *   for the network protocol identified in the Inbox Protocol
   *   field.
   * *
   */
  public SubscriptionDeliveryParameter setInboxAddress(String inboxAddress) {
    this.inboxAddress = inboxAddress;
    return this;
  }

  public void unsetInboxAddress() {
    this.inboxAddress = null;
  }

  /** Returns true if field inboxAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetInboxAddress() {
    return this.inboxAddress != null;
  }

  public void setInboxAddressIsSet(boolean value) {
    if (!value) {
      this.inboxAddress = null;
    }
  }

  /**
   * * This field identifies the message binding to be used to send
   *   pushed content for this subscription. If the TAXII Data
   *   Collection does not support the Delivery Message Binding, a
   *   Status Message with a status of 'Unsupported Message
   *   Binding' SHOULD be returned. The Delivery Message Binding
   *   MUST be a TAXII Message Binding Version ID as defined in a
   *   TAXII Message Binding Specification or by a third party.
   * *
   */
  public String getDeliveryMessageBinding() {
    return this.deliveryMessageBinding;
  }

  /**
   * * This field identifies the message binding to be used to send
   *   pushed content for this subscription. If the TAXII Data
   *   Collection does not support the Delivery Message Binding, a
   *   Status Message with a status of 'Unsupported Message
   *   Binding' SHOULD be returned. The Delivery Message Binding
   *   MUST be a TAXII Message Binding Version ID as defined in a
   *   TAXII Message Binding Specification or by a third party.
   * *
   */
  public SubscriptionDeliveryParameter setDeliveryMessageBinding(String deliveryMessageBinding) {
    this.deliveryMessageBinding = deliveryMessageBinding;
    return this;
  }

  public void unsetDeliveryMessageBinding() {
    this.deliveryMessageBinding = null;
  }

  /** Returns true if field deliveryMessageBinding is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMessageBinding() {
    return this.deliveryMessageBinding != null;
  }

  public void setDeliveryMessageBindingIsSet(boolean value) {
    if (!value) {
      this.deliveryMessageBinding = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INBOX_PROTOCOL:
      if (value == null) {
        unsetInboxProtocol();
      } else {
        setInboxProtocol((String)value);
      }
      break;

    case INBOX_ADDRESS:
      if (value == null) {
        unsetInboxAddress();
      } else {
        setInboxAddress((String)value);
      }
      break;

    case DELIVERY_MESSAGE_BINDING:
      if (value == null) {
        unsetDeliveryMessageBinding();
      } else {
        setDeliveryMessageBinding((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INBOX_PROTOCOL:
      return getInboxProtocol();

    case INBOX_ADDRESS:
      return getInboxAddress();

    case DELIVERY_MESSAGE_BINDING:
      return getDeliveryMessageBinding();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INBOX_PROTOCOL:
      return isSetInboxProtocol();
    case INBOX_ADDRESS:
      return isSetInboxAddress();
    case DELIVERY_MESSAGE_BINDING:
      return isSetDeliveryMessageBinding();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubscriptionDeliveryParameter)
      return this.equals((SubscriptionDeliveryParameter)that);
    return false;
  }

  public boolean equals(SubscriptionDeliveryParameter that) {
    if (that == null)
      return false;

    boolean this_present_inboxProtocol = true && this.isSetInboxProtocol();
    boolean that_present_inboxProtocol = true && that.isSetInboxProtocol();
    if (this_present_inboxProtocol || that_present_inboxProtocol) {
      if (!(this_present_inboxProtocol && that_present_inboxProtocol))
        return false;
      if (!this.inboxProtocol.equals(that.inboxProtocol))
        return false;
    }

    boolean this_present_inboxAddress = true && this.isSetInboxAddress();
    boolean that_present_inboxAddress = true && that.isSetInboxAddress();
    if (this_present_inboxAddress || that_present_inboxAddress) {
      if (!(this_present_inboxAddress && that_present_inboxAddress))
        return false;
      if (!this.inboxAddress.equals(that.inboxAddress))
        return false;
    }

    boolean this_present_deliveryMessageBinding = true && this.isSetDeliveryMessageBinding();
    boolean that_present_deliveryMessageBinding = true && that.isSetDeliveryMessageBinding();
    if (this_present_deliveryMessageBinding || that_present_deliveryMessageBinding) {
      if (!(this_present_deliveryMessageBinding && that_present_deliveryMessageBinding))
        return false;
      if (!this.deliveryMessageBinding.equals(that.deliveryMessageBinding))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubscriptionDeliveryParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInboxProtocol()).compareTo(other.isSetInboxProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInboxProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inboxProtocol, other.inboxProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInboxAddress()).compareTo(other.isSetInboxAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInboxAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inboxAddress, other.inboxAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMessageBinding()).compareTo(other.isSetDeliveryMessageBinding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMessageBinding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMessageBinding, other.deliveryMessageBinding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubscriptionDeliveryParameter(");
    boolean first = true;

    sb.append("inboxProtocol:");
    if (this.inboxProtocol == null) {
      sb.append("null");
    } else {
      sb.append(this.inboxProtocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inboxAddress:");
    if (this.inboxAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.inboxAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryMessageBinding:");
    if (this.deliveryMessageBinding == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryMessageBinding);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (inboxProtocol == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'inboxProtocol' was not present! Struct: " + toString());
    }
    if (inboxAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'inboxAddress' was not present! Struct: " + toString());
    }
    if (deliveryMessageBinding == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deliveryMessageBinding' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubscriptionDeliveryParameterStandardSchemeFactory implements SchemeFactory {
    public SubscriptionDeliveryParameterStandardScheme getScheme() {
      return new SubscriptionDeliveryParameterStandardScheme();
    }
  }

  private static class SubscriptionDeliveryParameterStandardScheme extends StandardScheme<SubscriptionDeliveryParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubscriptionDeliveryParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INBOX_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inboxProtocol = iprot.readString();
              struct.setInboxProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INBOX_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inboxAddress = iprot.readString();
              struct.setInboxAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELIVERY_MESSAGE_BINDING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryMessageBinding = iprot.readString();
              struct.setDeliveryMessageBindingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubscriptionDeliveryParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.inboxProtocol != null) {
        oprot.writeFieldBegin(INBOX_PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.inboxProtocol);
        oprot.writeFieldEnd();
      }
      if (struct.inboxAddress != null) {
        oprot.writeFieldBegin(INBOX_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.inboxAddress);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryMessageBinding != null) {
        oprot.writeFieldBegin(DELIVERY_MESSAGE_BINDING_FIELD_DESC);
        oprot.writeString(struct.deliveryMessageBinding);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubscriptionDeliveryParameterTupleSchemeFactory implements SchemeFactory {
    public SubscriptionDeliveryParameterTupleScheme getScheme() {
      return new SubscriptionDeliveryParameterTupleScheme();
    }
  }

  private static class SubscriptionDeliveryParameterTupleScheme extends TupleScheme<SubscriptionDeliveryParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubscriptionDeliveryParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.inboxProtocol);
      oprot.writeString(struct.inboxAddress);
      oprot.writeString(struct.deliveryMessageBinding);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubscriptionDeliveryParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.inboxProtocol = iprot.readString();
      struct.setInboxProtocolIsSet(true);
      struct.inboxAddress = iprot.readString();
      struct.setInboxAddressIsSet(true);
      struct.deliveryMessageBinding = iprot.readString();
      struct.setDeliveryMessageBindingIsSet(true);
    }
  }

}

